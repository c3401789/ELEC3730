
ELEC3730_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fb8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08008258  08008258  00009258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082dc  080082dc  0000a074  2**0
                  CONTENTS
  4 .ARM          00000008  080082dc  080082dc  000092dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082e4  080082e4  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082e4  080082e4  000092e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080082e8  080082e8  000092e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  24000000  080082ec  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  24000074  08008360  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000350  08008360  0000a350  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138ee  00000000  00000000  0000a0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023aa  00000000  00000000  0001d990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  0001fd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d79  00000000  00000000  00020eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00041026  00000000  00000000  00021c31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138d6  00000000  00000000  00062c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001af5eb  00000000  00000000  0007652d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00225b18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005634  00000000  00000000  00225b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0022b190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008240 	.word	0x08008240

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	08008240 	.word	0x08008240

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000394:	4b3d      	ldr	r3, [pc, #244]	@ (800048c <SystemInit+0xfc>)
 8000396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800039a:	4a3c      	ldr	r2, [pc, #240]	@ (800048c <SystemInit+0xfc>)
 800039c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80003a4:	4b39      	ldr	r3, [pc, #228]	@ (800048c <SystemInit+0xfc>)
 80003a6:	691b      	ldr	r3, [r3, #16]
 80003a8:	4a38      	ldr	r2, [pc, #224]	@ (800048c <SystemInit+0xfc>)
 80003aa:	f043 0310 	orr.w	r3, r3, #16
 80003ae:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003b0:	4b37      	ldr	r3, [pc, #220]	@ (8000490 <SystemInit+0x100>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f003 030f 	and.w	r3, r3, #15
 80003b8:	2b06      	cmp	r3, #6
 80003ba:	d807      	bhi.n	80003cc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003bc:	4b34      	ldr	r3, [pc, #208]	@ (8000490 <SystemInit+0x100>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f023 030f 	bic.w	r3, r3, #15
 80003c4:	4a32      	ldr	r2, [pc, #200]	@ (8000490 <SystemInit+0x100>)
 80003c6:	f043 0307 	orr.w	r3, r3, #7
 80003ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003cc:	4b31      	ldr	r3, [pc, #196]	@ (8000494 <SystemInit+0x104>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a30      	ldr	r2, [pc, #192]	@ (8000494 <SystemInit+0x104>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003d8:	4b2e      	ldr	r3, [pc, #184]	@ (8000494 <SystemInit+0x104>)
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003de:	4b2d      	ldr	r3, [pc, #180]	@ (8000494 <SystemInit+0x104>)
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	492c      	ldr	r1, [pc, #176]	@ (8000494 <SystemInit+0x104>)
 80003e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000498 <SystemInit+0x108>)
 80003e6:	4013      	ands	r3, r2
 80003e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003ea:	4b29      	ldr	r3, [pc, #164]	@ (8000490 <SystemInit+0x100>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f003 0308 	and.w	r3, r3, #8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d007      	beq.n	8000406 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003f6:	4b26      	ldr	r3, [pc, #152]	@ (8000490 <SystemInit+0x100>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f023 030f 	bic.w	r3, r3, #15
 80003fe:	4a24      	ldr	r2, [pc, #144]	@ (8000490 <SystemInit+0x100>)
 8000400:	f043 0307 	orr.w	r3, r3, #7
 8000404:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000406:	4b23      	ldr	r3, [pc, #140]	@ (8000494 <SystemInit+0x104>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800040c:	4b21      	ldr	r3, [pc, #132]	@ (8000494 <SystemInit+0x104>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000412:	4b20      	ldr	r3, [pc, #128]	@ (8000494 <SystemInit+0x104>)
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000418:	4b1e      	ldr	r3, [pc, #120]	@ (8000494 <SystemInit+0x104>)
 800041a:	4a20      	ldr	r2, [pc, #128]	@ (800049c <SystemInit+0x10c>)
 800041c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800041e:	4b1d      	ldr	r3, [pc, #116]	@ (8000494 <SystemInit+0x104>)
 8000420:	4a1f      	ldr	r2, [pc, #124]	@ (80004a0 <SystemInit+0x110>)
 8000422:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000424:	4b1b      	ldr	r3, [pc, #108]	@ (8000494 <SystemInit+0x104>)
 8000426:	4a1f      	ldr	r2, [pc, #124]	@ (80004a4 <SystemInit+0x114>)
 8000428:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800042a:	4b1a      	ldr	r3, [pc, #104]	@ (8000494 <SystemInit+0x104>)
 800042c:	2200      	movs	r2, #0
 800042e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000430:	4b18      	ldr	r3, [pc, #96]	@ (8000494 <SystemInit+0x104>)
 8000432:	4a1c      	ldr	r2, [pc, #112]	@ (80004a4 <SystemInit+0x114>)
 8000434:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000436:	4b17      	ldr	r3, [pc, #92]	@ (8000494 <SystemInit+0x104>)
 8000438:	2200      	movs	r2, #0
 800043a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800043c:	4b15      	ldr	r3, [pc, #84]	@ (8000494 <SystemInit+0x104>)
 800043e:	4a19      	ldr	r2, [pc, #100]	@ (80004a4 <SystemInit+0x114>)
 8000440:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000442:	4b14      	ldr	r3, [pc, #80]	@ (8000494 <SystemInit+0x104>)
 8000444:	2200      	movs	r2, #0
 8000446:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000448:	4b12      	ldr	r3, [pc, #72]	@ (8000494 <SystemInit+0x104>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a11      	ldr	r2, [pc, #68]	@ (8000494 <SystemInit+0x104>)
 800044e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000452:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000454:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <SystemInit+0x104>)
 8000456:	2200      	movs	r2, #0
 8000458:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800045a:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <SystemInit+0x118>)
 800045c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800045e:	4a12      	ldr	r2, [pc, #72]	@ (80004a8 <SystemInit+0x118>)
 8000460:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000464:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000466:	4b11      	ldr	r3, [pc, #68]	@ (80004ac <SystemInit+0x11c>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	4b11      	ldr	r3, [pc, #68]	@ (80004b0 <SystemInit+0x120>)
 800046c:	4013      	ands	r3, r2
 800046e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000472:	d202      	bcs.n	800047a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000474:	4b0f      	ldr	r3, [pc, #60]	@ (80004b4 <SystemInit+0x124>)
 8000476:	2201      	movs	r2, #1
 8000478:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800047a:	4b0f      	ldr	r3, [pc, #60]	@ (80004b8 <SystemInit+0x128>)
 800047c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000480:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	e000ed00 	.word	0xe000ed00
 8000490:	52002000 	.word	0x52002000
 8000494:	58024400 	.word	0x58024400
 8000498:	eaf6ed7f 	.word	0xeaf6ed7f
 800049c:	02020200 	.word	0x02020200
 80004a0:	01ff0000 	.word	0x01ff0000
 80004a4:	01010280 	.word	0x01010280
 80004a8:	580000c0 	.word	0x580000c0
 80004ac:	5c001000 	.word	0x5c001000
 80004b0:	ffff0000 	.word	0xffff0000
 80004b4:	51008108 	.word	0x51008108
 80004b8:	52004000 	.word	0x52004000

080004bc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 80004c0:	4b09      	ldr	r3, [pc, #36]	@ (80004e8 <ExitRun0Mode+0x2c>)
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	4a08      	ldr	r2, [pc, #32]	@ (80004e8 <ExitRun0Mode+0x2c>)
 80004c6:	f023 0302 	bic.w	r3, r3, #2
 80004ca:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80004cc:	bf00      	nop
 80004ce:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <ExitRun0Mode+0x2c>)
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d0f9      	beq.n	80004ce <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80004da:	bf00      	nop
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	58024800 	.word	0x58024800

080004ec <HAL_GPIO_EXTI_Callback>:
int count = 0;
uint32_t value;
uint16_t loop = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B2_Pin){
 80004f6:	88fb      	ldrh	r3, [r7, #6]
 80004f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80004fc:	d104      	bne.n	8000508 <HAL_GPIO_EXTI_Callback+0x1c>
		HAL_GPIO_TogglePin(LEDBlue_GPIO_Port, LEDBlue_Pin);
 80004fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000502:	4803      	ldr	r0, [pc, #12]	@ (8000510 <HAL_GPIO_EXTI_Callback+0x24>)
 8000504:	f002 f9f9 	bl	80028fa <HAL_GPIO_TogglePin>
	}

}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	58022000 	.word	0x58022000

08000514 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000524:	d102      	bne.n	800052c <HAL_TIM_PeriodElapsedCallback+0x18>
		flagA = 1;
 8000526:	4b04      	ldr	r3, [pc, #16]	@ (8000538 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000528:	2201      	movs	r2, #1
 800052a:	601a      	str	r2, [r3, #0]
	}

}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	24000140 	.word	0x24000140

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
		initialise_monitor_handles();
 8000540:	f006 fe72 	bl	8007228 <initialise_monitor_handles>
/* USER CODE BEGIN Boot_Mode_Sequence_1 */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 fb54 	bl	8000bf0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f854 	bl	80005f4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f996 	bl	800087c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000550:	f000 f946 	bl	80007e0 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000554:	f000 f8c8 	bl	80006e8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000558:	481d      	ldr	r0, [pc, #116]	@ (80005d0 <main+0x94>)
 800055a:	f005 ffc3 	bl	80064e4 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start(&hadc1);
 800055e:	481d      	ldr	r0, [pc, #116]	@ (80005d4 <main+0x98>)
 8000560:	f000 ff9c 	bl	800149c <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK){
 8000564:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000568:	481a      	ldr	r0, [pc, #104]	@ (80005d4 <main+0x98>)
 800056a:	f001 f861 	bl	8001630 <HAL_ADC_PollForConversion>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d114      	bne.n	800059e <main+0x62>

			value = HAL_ADC_GetValue(&hadc1);
 8000574:	4817      	ldr	r0, [pc, #92]	@ (80005d4 <main+0x98>)
 8000576:	f001 f94f 	bl	8001818 <HAL_ADC_GetValue>
 800057a:	4603      	mov	r3, r0
 800057c:	4a16      	ldr	r2, [pc, #88]	@ (80005d8 <main+0x9c>)
 800057e:	6013      	str	r3, [r2, #0]
			printf("-> Got %4ld at loop %d\n", value, ++loop);
 8000580:	4b15      	ldr	r3, [pc, #84]	@ (80005d8 <main+0x9c>)
 8000582:	6819      	ldr	r1, [r3, #0]
 8000584:	4b15      	ldr	r3, [pc, #84]	@ (80005dc <main+0xa0>)
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	3301      	adds	r3, #1
 800058a:	b29a      	uxth	r2, r3
 800058c:	4b13      	ldr	r3, [pc, #76]	@ (80005dc <main+0xa0>)
 800058e:	801a      	strh	r2, [r3, #0]
 8000590:	4b12      	ldr	r3, [pc, #72]	@ (80005dc <main+0xa0>)
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	461a      	mov	r2, r3
 8000596:	4812      	ldr	r0, [pc, #72]	@ (80005e0 <main+0xa4>)
 8000598:	f006 ff86 	bl	80074a8 <iprintf>
 800059c:	e002      	b.n	80005a4 <main+0x68>
		}else{
			printf("ADC Error\n");
 800059e:	4811      	ldr	r0, [pc, #68]	@ (80005e4 <main+0xa8>)
 80005a0:	f006 ffea 	bl	8007578 <puts>
		}
		HAL_ADC_Start(&hadc1);
 80005a4:	480b      	ldr	r0, [pc, #44]	@ (80005d4 <main+0x98>)
 80005a6:	f000 ff79 	bl	800149c <HAL_ADC_Start>
		if(flagA){
 80005aa:	4b0f      	ldr	r3, [pc, #60]	@ (80005e8 <main+0xac>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0d8      	beq.n	8000564 <main+0x28>
			// Toggle LEDOrange when interrupt triggered by TIM2
			HAL_GPIO_TogglePin(LEDOrange_GPIO_Port, LEDOrange_Pin);
 80005b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005b6:	480d      	ldr	r0, [pc, #52]	@ (80005ec <main+0xb0>)
 80005b8:	f002 f99f 	bl	80028fa <HAL_GPIO_TogglePin>
			flagA = 0;
 80005bc:	4b0a      	ldr	r3, [pc, #40]	@ (80005e8 <main+0xac>)
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
			count++;
 80005c2:	4b0b      	ldr	r3, [pc, #44]	@ (80005f0 <main+0xb4>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	3301      	adds	r3, #1
 80005c8:	4a09      	ldr	r2, [pc, #36]	@ (80005f0 <main+0xb4>)
 80005ca:	6013      	str	r3, [r2, #0]
		if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK){
 80005cc:	e7ca      	b.n	8000564 <main+0x28>
 80005ce:	bf00      	nop
 80005d0:	240000f4 	.word	0x240000f4
 80005d4:	24000090 	.word	0x24000090
 80005d8:	24000148 	.word	0x24000148
 80005dc:	2400014c 	.word	0x2400014c
 80005e0:	08008258 	.word	0x08008258
 80005e4:	08008270 	.word	0x08008270
 80005e8:	24000140 	.word	0x24000140
 80005ec:	58022000 	.word	0x58022000
 80005f0:	24000144 	.word	0x24000144

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b09c      	sub	sp, #112	@ 0x70
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005fe:	224c      	movs	r2, #76	@ 0x4c
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f007 f898 	bl	8007738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2220      	movs	r2, #32
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f007 f892 	bl	8007738 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000614:	2004      	movs	r0, #4
 8000616:	f002 f9a5 	bl	8002964 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061a:	2300      	movs	r3, #0
 800061c:	603b      	str	r3, [r7, #0]
 800061e:	4b30      	ldr	r3, [pc, #192]	@ (80006e0 <SystemClock_Config+0xec>)
 8000620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000622:	4a2f      	ldr	r2, [pc, #188]	@ (80006e0 <SystemClock_Config+0xec>)
 8000624:	f023 0301 	bic.w	r3, r3, #1
 8000628:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800062a:	4b2d      	ldr	r3, [pc, #180]	@ (80006e0 <SystemClock_Config+0xec>)
 800062c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	4b2b      	ldr	r3, [pc, #172]	@ (80006e4 <SystemClock_Config+0xf0>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4a2a      	ldr	r2, [pc, #168]	@ (80006e4 <SystemClock_Config+0xf0>)
 800063a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800063e:	6193      	str	r3, [r2, #24]
 8000640:	4b28      	ldr	r3, [pc, #160]	@ (80006e4 <SystemClock_Config+0xf0>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800064c:	bf00      	nop
 800064e:	4b25      	ldr	r3, [pc, #148]	@ (80006e4 <SystemClock_Config+0xf0>)
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000656:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800065a:	d1f8      	bne.n	800064e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	2301      	movs	r3, #1
 800065e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000660:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000664:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	2302      	movs	r3, #2
 800066c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800066e:	2305      	movs	r3, #5
 8000670:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000672:	23a0      	movs	r3, #160	@ 0xa0
 8000674:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000676:	2302      	movs	r3, #2
 8000678:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800067a:	2305      	movs	r3, #5
 800067c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800067e:	2302      	movs	r3, #2
 8000680:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000682:	2308      	movs	r3, #8
 8000684:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000686:	2300      	movs	r3, #0
 8000688:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000692:	4618      	mov	r0, r3
 8000694:	f002 f9c0 	bl	8002a18 <HAL_RCC_OscConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800069e:	f000 f94b 	bl	8000938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a2:	233f      	movs	r3, #63	@ 0x3f
 80006a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a6:	2303      	movs	r3, #3
 80006a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006ae:	2308      	movs	r3, #8
 80006b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006b2:	2340      	movs	r3, #64	@ 0x40
 80006b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006b6:	2340      	movs	r3, #64	@ 0x40
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006c0:	2340      	movs	r3, #64	@ 0x40
 80006c2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2102      	movs	r1, #2
 80006c8:	4618      	mov	r0, r3
 80006ca:	f002 fdff 	bl	80032cc <HAL_RCC_ClockConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80006d4:	f000 f930 	bl	8000938 <Error_Handler>
  }
}
 80006d8:	bf00      	nop
 80006da:	3770      	adds	r7, #112	@ 0x70
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	58000400 	.word	0x58000400
 80006e4:	58024800 	.word	0x58024800

080006e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	@ 0x28
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006fa:	463b      	mov	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
 8000708:	615a      	str	r2, [r3, #20]
 800070a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800070c:	4b31      	ldr	r3, [pc, #196]	@ (80007d4 <MX_ADC1_Init+0xec>)
 800070e:	4a32      	ldr	r2, [pc, #200]	@ (80007d8 <MX_ADC1_Init+0xf0>)
 8000710:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000712:	4b30      	ldr	r3, [pc, #192]	@ (80007d4 <MX_ADC1_Init+0xec>)
 8000714:	2200      	movs	r2, #0
 8000716:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000718:	4b2e      	ldr	r3, [pc, #184]	@ (80007d4 <MX_ADC1_Init+0xec>)
 800071a:	2208      	movs	r2, #8
 800071c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800071e:	4b2d      	ldr	r3, [pc, #180]	@ (80007d4 <MX_ADC1_Init+0xec>)
 8000720:	2200      	movs	r2, #0
 8000722:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000724:	4b2b      	ldr	r3, [pc, #172]	@ (80007d4 <MX_ADC1_Init+0xec>)
 8000726:	2204      	movs	r2, #4
 8000728:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800072a:	4b2a      	ldr	r3, [pc, #168]	@ (80007d4 <MX_ADC1_Init+0xec>)
 800072c:	2200      	movs	r2, #0
 800072e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000730:	4b28      	ldr	r3, [pc, #160]	@ (80007d4 <MX_ADC1_Init+0xec>)
 8000732:	2200      	movs	r2, #0
 8000734:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000736:	4b27      	ldr	r3, [pc, #156]	@ (80007d4 <MX_ADC1_Init+0xec>)
 8000738:	2201      	movs	r2, #1
 800073a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800073c:	4b25      	ldr	r3, [pc, #148]	@ (80007d4 <MX_ADC1_Init+0xec>)
 800073e:	2200      	movs	r2, #0
 8000740:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000742:	4b24      	ldr	r3, [pc, #144]	@ (80007d4 <MX_ADC1_Init+0xec>)
 8000744:	2200      	movs	r2, #0
 8000746:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000748:	4b22      	ldr	r3, [pc, #136]	@ (80007d4 <MX_ADC1_Init+0xec>)
 800074a:	2200      	movs	r2, #0
 800074c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800074e:	4b21      	ldr	r3, [pc, #132]	@ (80007d4 <MX_ADC1_Init+0xec>)
 8000750:	2200      	movs	r2, #0
 8000752:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000754:	4b1f      	ldr	r3, [pc, #124]	@ (80007d4 <MX_ADC1_Init+0xec>)
 8000756:	2200      	movs	r2, #0
 8000758:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800075a:	4b1e      	ldr	r3, [pc, #120]	@ (80007d4 <MX_ADC1_Init+0xec>)
 800075c:	2200      	movs	r2, #0
 800075e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000760:	4b1c      	ldr	r3, [pc, #112]	@ (80007d4 <MX_ADC1_Init+0xec>)
 8000762:	2200      	movs	r2, #0
 8000764:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000768:	4b1a      	ldr	r3, [pc, #104]	@ (80007d4 <MX_ADC1_Init+0xec>)
 800076a:	2201      	movs	r2, #1
 800076c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800076e:	4819      	ldr	r0, [pc, #100]	@ (80007d4 <MX_ADC1_Init+0xec>)
 8000770:	f000 fcf2 	bl	8001158 <HAL_ADC_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800077a:	f000 f8dd 	bl	8000938 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	4619      	mov	r1, r3
 8000788:	4812      	ldr	r0, [pc, #72]	@ (80007d4 <MX_ADC1_Init+0xec>)
 800078a:	f001 fcff 	bl	800218c <HAL_ADCEx_MultiModeConfigChannel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000794:	f000 f8d0 	bl	8000938 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000798:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <MX_ADC1_Init+0xf4>)
 800079a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800079c:	2306      	movs	r3, #6
 800079e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007a4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80007a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007aa:	2304      	movs	r3, #4
 80007ac:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b6:	463b      	mov	r3, r7
 80007b8:	4619      	mov	r1, r3
 80007ba:	4806      	ldr	r0, [pc, #24]	@ (80007d4 <MX_ADC1_Init+0xec>)
 80007bc:	f001 f83a 	bl	8001834 <HAL_ADC_ConfigChannel>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80007c6:	f000 f8b7 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	3728      	adds	r7, #40	@ 0x28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	24000090 	.word	0x24000090
 80007d8:	40022000 	.word	0x40022000
 80007dc:	32601000 	.word	0x32601000

080007e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e6:	f107 0310 	add.w	r3, r7, #16
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000878 <MX_TIM2_Init+0x98>)
 8000800:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000804:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 8000806:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <MX_TIM2_Init+0x98>)
 8000808:	f242 7210 	movw	r2, #10000	@ 0x2710
 800080c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080e:	4b1a      	ldr	r3, [pc, #104]	@ (8000878 <MX_TIM2_Init+0x98>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9001;
 8000814:	4b18      	ldr	r3, [pc, #96]	@ (8000878 <MX_TIM2_Init+0x98>)
 8000816:	f242 3229 	movw	r2, #9001	@ 0x2329
 800081a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081c:	4b16      	ldr	r3, [pc, #88]	@ (8000878 <MX_TIM2_Init+0x98>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000822:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <MX_TIM2_Init+0x98>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000828:	4813      	ldr	r0, [pc, #76]	@ (8000878 <MX_TIM2_Init+0x98>)
 800082a:	f005 fe03 	bl	8006434 <HAL_TIM_Base_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000834:	f000 f880 	bl	8000938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000838:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800083c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800083e:	f107 0310 	add.w	r3, r7, #16
 8000842:	4619      	mov	r1, r3
 8000844:	480c      	ldr	r0, [pc, #48]	@ (8000878 <MX_TIM2_Init+0x98>)
 8000846:	f005 ffcd 	bl	80067e4 <HAL_TIM_ConfigClockSource>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000850:	f000 f872 	bl	8000938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	4619      	mov	r1, r3
 8000860:	4805      	ldr	r0, [pc, #20]	@ (8000878 <MX_TIM2_Init+0x98>)
 8000862:	f006 fa1d 	bl	8006ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800086c:	f000 f864 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	3720      	adds	r7, #32
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	240000f4 	.word	0x240000f4

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b088      	sub	sp, #32
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	4b26      	ldr	r3, [pc, #152]	@ (800092c <MX_GPIO_Init+0xb0>)
 8000894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000898:	4a24      	ldr	r2, [pc, #144]	@ (800092c <MX_GPIO_Init+0xb0>)
 800089a:	f043 0304 	orr.w	r3, r3, #4
 800089e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008a2:	4b22      	ldr	r3, [pc, #136]	@ (800092c <MX_GPIO_Init+0xb0>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a8:	f003 0304 	and.w	r3, r3, #4
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80008b0:	4b1e      	ldr	r3, [pc, #120]	@ (800092c <MX_GPIO_Init+0xb0>)
 80008b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b6:	4a1d      	ldr	r2, [pc, #116]	@ (800092c <MX_GPIO_Init+0xb0>)
 80008b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008c0:	4b1a      	ldr	r3, [pc, #104]	@ (800092c <MX_GPIO_Init+0xb0>)
 80008c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LEDGreen_Pin|LEDOrange_Pin|LEDRed_Pin|LEDBlue_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80008d4:	4816      	ldr	r0, [pc, #88]	@ (8000930 <MX_GPIO_Init+0xb4>)
 80008d6:	f001 fff7 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 80008da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008e6:	2302      	movs	r3, #2
 80008e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	4619      	mov	r1, r3
 80008f0:	4810      	ldr	r0, [pc, #64]	@ (8000934 <MX_GPIO_Init+0xb8>)
 80008f2:	f001 fe39 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDGreen_Pin LEDOrange_Pin LEDRed_Pin LEDBlue_Pin */
  GPIO_InitStruct.Pin = LEDGreen_Pin|LEDOrange_Pin|LEDRed_Pin|LEDBlue_Pin;
 80008f6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80008fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	4619      	mov	r1, r3
 800090e:	4808      	ldr	r0, [pc, #32]	@ (8000930 <MX_GPIO_Init+0xb4>)
 8000910:	f001 fe2a 	bl	8002568 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(B2_EXTI_IRQn, 0, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2100      	movs	r1, #0
 8000918:	2028      	movs	r0, #40	@ 0x28
 800091a:	f001 fdf0 	bl	80024fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(B2_EXTI_IRQn);
 800091e:	2028      	movs	r0, #40	@ 0x28
 8000920:	f001 fe07 	bl	8002532 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000924:	bf00      	nop
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	58024400 	.word	0x58024400
 8000930:	58022000 	.word	0x58022000
 8000934:	58020800 	.word	0x58020800

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <Error_Handler+0x8>

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <HAL_MspInit+0x30>)
 800094c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000950:	4a08      	ldr	r2, [pc, #32]	@ (8000974 <HAL_MspInit+0x30>)
 8000952:	f043 0302 	orr.w	r3, r3, #2
 8000956:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_MspInit+0x30>)
 800095c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000960:	f003 0302 	and.w	r3, r3, #2
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	58024400 	.word	0x58024400

08000978 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b0bc      	sub	sp, #240	@ 0xf0
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000990:	f107 0310 	add.w	r3, r7, #16
 8000994:	22c8      	movs	r2, #200	@ 0xc8
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f006 fecd 	bl	8007738 <memset>
  if(hadc->Instance==ADC1)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a2b      	ldr	r2, [pc, #172]	@ (8000a50 <HAL_ADC_MspInit+0xd8>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d14f      	bne.n	8000a48 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009a8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80009ac:	f04f 0300 	mov.w	r3, #0
 80009b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 80009b8:	230c      	movs	r3, #12
 80009ba:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80009bc:	2302      	movs	r3, #2
 80009be:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80009c8:	23c0      	movs	r3, #192	@ 0xc0
 80009ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80009cc:	2320      	movs	r3, #32
 80009ce:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80009d4:	2300      	movs	r3, #0
 80009d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009da:	f107 0310 	add.w	r3, r7, #16
 80009de:	4618      	mov	r0, r3
 80009e0:	f002 ffea 	bl	80039b8 <HAL_RCCEx_PeriphCLKConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 80009ea:	f7ff ffa5 	bl	8000938 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80009ee:	4b19      	ldr	r3, [pc, #100]	@ (8000a54 <HAL_ADC_MspInit+0xdc>)
 80009f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009f4:	4a17      	ldr	r2, [pc, #92]	@ (8000a54 <HAL_ADC_MspInit+0xdc>)
 80009f6:	f043 0320 	orr.w	r3, r3, #32
 80009fa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80009fe:	4b15      	ldr	r3, [pc, #84]	@ (8000a54 <HAL_ADC_MspInit+0xdc>)
 8000a00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a04:	f003 0320 	and.w	r3, r3, #32
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0c:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <HAL_ADC_MspInit+0xdc>)
 8000a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a12:	4a10      	ldr	r2, [pc, #64]	@ (8000a54 <HAL_ADC_MspInit+0xdc>)
 8000a14:	f043 0304 	orr.w	r3, r3, #4
 8000a18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a54 <HAL_ADC_MspInit+0xdc>)
 8000a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_INP12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a30:	2303      	movs	r3, #3
 8000a32:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000a40:	4619      	mov	r1, r3
 8000a42:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <HAL_ADC_MspInit+0xe0>)
 8000a44:	f001 fd90 	bl	8002568 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a48:	bf00      	nop
 8000a4a:	37f0      	adds	r7, #240	@ 0xf0
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40022000 	.word	0x40022000
 8000a54:	58024400 	.word	0x58024400
 8000a58:	58020800 	.word	0x58020800

08000a5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a6c:	d116      	bne.n	8000a9c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa4 <HAL_TIM_Base_MspInit+0x48>)
 8000a70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a74:	4a0b      	ldr	r2, [pc, #44]	@ (8000aa4 <HAL_TIM_Base_MspInit+0x48>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000a7e:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <HAL_TIM_Base_MspInit+0x48>)
 8000a80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2100      	movs	r1, #0
 8000a90:	201c      	movs	r0, #28
 8000a92:	f001 fd34 	bl	80024fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a96:	201c      	movs	r0, #28
 8000a98:	f001 fd4b 	bl	8002532 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000a9c:	bf00      	nop
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	58024400 	.word	0x58024400

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <NMI_Handler+0x4>

08000ab0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <MemManage_Handler+0x4>

08000ac0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <BusFault_Handler+0x4>

08000ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <UsageFault_Handler+0x4>

08000ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afe:	f000 f8e9 	bl	8000cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b0c:	4802      	ldr	r0, [pc, #8]	@ (8000b18 <TIM2_IRQHandler+0x10>)
 8000b0e:	f005 fd61 	bl	80065d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	240000f4 	.word	0x240000f4

08000b1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8000b20:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000b24:	f001 ff03 	bl	800292e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b34:	4a14      	ldr	r2, [pc, #80]	@ (8000b88 <_sbrk+0x5c>)
 8000b36:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <_sbrk+0x60>)
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b40:	4b13      	ldr	r3, [pc, #76]	@ (8000b90 <_sbrk+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d102      	bne.n	8000b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b48:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <_sbrk+0x64>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	@ (8000b94 <_sbrk+0x68>)
 8000b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b4e:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d207      	bcs.n	8000b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b5c:	f006 fe3a 	bl	80077d4 <__errno>
 8000b60:	4603      	mov	r3, r0
 8000b62:	220c      	movs	r2, #12
 8000b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b6a:	e009      	b.n	8000b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <_sbrk+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b72:	4b07      	ldr	r3, [pc, #28]	@ (8000b90 <_sbrk+0x64>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	4a05      	ldr	r2, [pc, #20]	@ (8000b90 <_sbrk+0x64>)
 8000b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	24080000 	.word	0x24080000
 8000b8c:	00000400 	.word	0x00000400
 8000b90:	24000150 	.word	0x24000150
 8000b94:	24000350 	.word	0x24000350

08000b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b98:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000bd4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000b9c:	f7ff fc8e 	bl	80004bc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ba0:	f7ff fbf6 	bl	8000390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba4:	480c      	ldr	r0, [pc, #48]	@ (8000bd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ba6:	490d      	ldr	r1, [pc, #52]	@ (8000bdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8000be0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bac:	e002      	b.n	8000bb4 <LoopCopyDataInit>

08000bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb2:	3304      	adds	r3, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb8:	d3f9      	bcc.n	8000bae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bba:	4a0a      	ldr	r2, [pc, #40]	@ (8000be4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bbc:	4c0a      	ldr	r4, [pc, #40]	@ (8000be8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc0:	e001      	b.n	8000bc6 <LoopFillZerobss>

08000bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc4:	3204      	adds	r2, #4

08000bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc8:	d3fb      	bcc.n	8000bc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bca:	f006 fe09 	bl	80077e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bce:	f7ff fcb5 	bl	800053c <main>
  bx  lr
 8000bd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bd4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000bd8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bdc:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000be0:	080082ec 	.word	0x080082ec
  ldr r2, =_sbss
 8000be4:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000be8:	24000350 	.word	0x24000350

08000bec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bec:	e7fe      	b.n	8000bec <ADC3_IRQHandler>
	...

08000bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf6:	2003      	movs	r0, #3
 8000bf8:	f001 fc76 	bl	80024e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000bfc:	f002 fd1c 	bl	8003638 <HAL_RCC_GetSysClockFreq>
 8000c00:	4602      	mov	r2, r0
 8000c02:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <HAL_Init+0x68>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	0a1b      	lsrs	r3, r3, #8
 8000c08:	f003 030f 	and.w	r3, r3, #15
 8000c0c:	4913      	ldr	r1, [pc, #76]	@ (8000c5c <HAL_Init+0x6c>)
 8000c0e:	5ccb      	ldrb	r3, [r1, r3]
 8000c10:	f003 031f 	and.w	r3, r3, #31
 8000c14:	fa22 f303 	lsr.w	r3, r2, r3
 8000c18:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c58 <HAL_Init+0x68>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	4a0e      	ldr	r2, [pc, #56]	@ (8000c5c <HAL_Init+0x6c>)
 8000c24:	5cd3      	ldrb	r3, [r2, r3]
 8000c26:	f003 031f 	and.w	r3, r3, #31
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c30:	4a0b      	ldr	r2, [pc, #44]	@ (8000c60 <HAL_Init+0x70>)
 8000c32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c34:	4a0b      	ldr	r2, [pc, #44]	@ (8000c64 <HAL_Init+0x74>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f000 f814 	bl	8000c68 <HAL_InitTick>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e002      	b.n	8000c50 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c4a:	f7ff fe7b 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c4e:	2300      	movs	r3, #0
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	58024400 	.word	0x58024400
 8000c5c:	0800827c 	.word	0x0800827c
 8000c60:	24000004 	.word	0x24000004
 8000c64:	24000000 	.word	0x24000000

08000c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c70:	4b15      	ldr	r3, [pc, #84]	@ (8000cc8 <HAL_InitTick+0x60>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d101      	bne.n	8000c7c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e021      	b.n	8000cc0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c7c:	4b13      	ldr	r3, [pc, #76]	@ (8000ccc <HAL_InitTick+0x64>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <HAL_InitTick+0x60>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4619      	mov	r1, r3
 8000c86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f001 fc5b 	bl	800254e <HAL_SYSTICK_Config>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00e      	b.n	8000cc0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b0f      	cmp	r3, #15
 8000ca6:	d80a      	bhi.n	8000cbe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cb0:	f001 fc25 	bl	80024fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb4:	4a06      	ldr	r2, [pc, #24]	@ (8000cd0 <HAL_InitTick+0x68>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e000      	b.n	8000cc0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	2400000c 	.word	0x2400000c
 8000ccc:	24000000 	.word	0x24000000
 8000cd0:	24000008 	.word	0x24000008

08000cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <HAL_IncTick+0x20>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_IncTick+0x24>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a04      	ldr	r2, [pc, #16]	@ (8000cf8 <HAL_IncTick+0x24>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	2400000c 	.word	0x2400000c
 8000cf8:	24000154 	.word	0x24000154

08000cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000d00:	4b03      	ldr	r3, [pc, #12]	@ (8000d10 <HAL_GetTick+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	24000154 	.word	0x24000154

08000d14 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d18:	4b03      	ldr	r3, [pc, #12]	@ (8000d28 <HAL_GetREVID+0x14>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	0c1b      	lsrs	r3, r3, #16
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	5c001000 	.word	0x5c001000

08000d2c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	431a      	orrs	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	609a      	str	r2, [r3, #8]
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	431a      	orrs	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b087      	sub	sp, #28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d107      	bne.n	8000db8 <LL_ADC_SetChannelPreselection+0x24>
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	0e9b      	lsrs	r3, r3, #26
 8000dac:	f003 031f 	and.w	r3, r3, #31
 8000db0:	2201      	movs	r2, #1
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	e015      	b.n	8000de4 <LL_ADC_SetChannelPreselection+0x50>
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	fa93 f3a3 	rbit	r3, r3
 8000dc2:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d101      	bne.n	8000dd2 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8000dce:	2320      	movs	r3, #32
 8000dd0:	e003      	b.n	8000dda <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	fab3 f383 	clz	r3, r3
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	f003 031f 	and.w	r3, r3, #31
 8000dde:	2201      	movs	r2, #1
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	69d2      	ldr	r2, [r2, #28]
 8000de8:	431a      	orrs	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8000dee:	bf00      	nop
 8000df0:	371c      	adds	r7, #28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b087      	sub	sp, #28
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	60f8      	str	r0, [r7, #12]
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	3360      	adds	r3, #96	@ 0x60
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	430b      	orrs	r3, r1
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000e2e:	bf00      	nop
 8000e30:	371c      	adds	r7, #28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b085      	sub	sp, #20
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	60f8      	str	r0, [r7, #12]
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	691b      	ldr	r3, [r3, #16]
 8000e4a:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	f003 031f 	and.w	r3, r3, #31
 8000e54:	6879      	ldr	r1, [r7, #4]
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b087      	sub	sp, #28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	3360      	adds	r3, #96	@ 0x60
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4413      	add	r3, r2
 8000e84:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	431a      	orrs	r2, r3
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	601a      	str	r2, [r3, #0]
  }
}
 8000e96:	bf00      	nop
 8000e98:	371c      	adds	r7, #28
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b083      	sub	sp, #12
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e000      	b.n	8000ebc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000eba:	2300      	movs	r3, #0
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	3330      	adds	r3, #48	@ 0x30
 8000ed8:	461a      	mov	r2, r3
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	0a1b      	lsrs	r3, r3, #8
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	f003 030c 	and.w	r3, r3, #12
 8000ee4:	4413      	add	r3, r2
 8000ee6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	f003 031f 	and.w	r3, r3, #31
 8000ef2:	211f      	movs	r1, #31
 8000ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	401a      	ands	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	0e9b      	lsrs	r3, r3, #26
 8000f00:	f003 011f 	and.w	r1, r3, #31
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	f003 031f 	and.w	r3, r3, #31
 8000f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f14:	bf00      	nop
 8000f16:	371c      	adds	r7, #28
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b087      	sub	sp, #28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	3314      	adds	r3, #20
 8000f30:	461a      	mov	r2, r3
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	0e5b      	lsrs	r3, r3, #25
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	f003 0304 	and.w	r3, r3, #4
 8000f3c:	4413      	add	r3, r2
 8000f3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	0d1b      	lsrs	r3, r3, #20
 8000f48:	f003 031f 	and.w	r3, r3, #31
 8000f4c:	2107      	movs	r1, #7
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	401a      	ands	r2, r3
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	0d1b      	lsrs	r3, r3, #20
 8000f5a:	f003 031f 	and.w	r3, r3, #31
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	fa01 f303 	lsl.w	r3, r1, r3
 8000f64:	431a      	orrs	r2, r3
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000f6a:	bf00      	nop
 8000f6c:	371c      	adds	r7, #28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000f90:	43db      	mvns	r3, r3
 8000f92:	401a      	ands	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f003 0318 	and.w	r3, r3, #24
 8000f9a:	4908      	ldr	r1, [pc, #32]	@ (8000fbc <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f9c:	40d9      	lsrs	r1, r3
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	400b      	ands	r3, r1
 8000fa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8000fae:	bf00      	nop
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	000fffff 	.word	0x000fffff

08000fc0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f003 031f 	and.w	r3, r3, #31
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	4b04      	ldr	r3, [pc, #16]	@ (8001018 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001006:	4013      	ands	r3, r2
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	6093      	str	r3, [r2, #8]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	5fffffc0 	.word	0x5fffffc0

0800101c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800102c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001030:	d101      	bne.n	8001036 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001032:	2301      	movs	r3, #1
 8001034:	e000      	b.n	8001038 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001036:	2300      	movs	r3, #0
}
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <LL_ADC_EnableInternalRegulator+0x24>)
 8001052:	4013      	ands	r3, r2
 8001054:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	6fffffc0 	.word	0x6fffffc0

0800106c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800107c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001080:	d101      	bne.n	8001086 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	4b05      	ldr	r3, [pc, #20]	@ (80010b8 <LL_ADC_Enable+0x24>)
 80010a2:	4013      	ands	r3, r2
 80010a4:	f043 0201 	orr.w	r2, r3, #1
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	7fffffc0 	.word	0x7fffffc0

080010bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d101      	bne.n	80010d4 <LL_ADC_IsEnabled+0x18>
 80010d0:	2301      	movs	r3, #1
 80010d2:	e000      	b.n	80010d6 <LL_ADC_IsEnabled+0x1a>
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <LL_ADC_REG_StartConversion+0x24>)
 80010f2:	4013      	ands	r3, r2
 80010f4:	f043 0204 	orr.w	r2, r3, #4
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	7fffffc0 	.word	0x7fffffc0

0800110c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	2b04      	cmp	r3, #4
 800111e:	d101      	bne.n	8001124 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001120:	2301      	movs	r3, #1
 8001122:	e000      	b.n	8001126 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f003 0308 	and.w	r3, r3, #8
 8001142:	2b08      	cmp	r3, #8
 8001144:	d101      	bne.n	800114a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b089      	sub	sp, #36	@ 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e18f      	b.n	8001492 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800117c:	2b00      	cmp	r3, #0
 800117e:	d109      	bne.n	8001194 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff fbf9 	bl	8000978 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff3f 	bl	800101c <LL_ADC_IsDeepPowerDownEnabled>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d004      	beq.n	80011ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff25 	bl	8000ff8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ff5a 	bl	800106c <LL_ADC_IsInternalRegulatorEnabled>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d114      	bne.n	80011e8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ff3e 	bl	8001044 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011c8:	4b87      	ldr	r3, [pc, #540]	@ (80013e8 <HAL_ADC_Init+0x290>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	099b      	lsrs	r3, r3, #6
 80011ce:	4a87      	ldr	r2, [pc, #540]	@ (80013ec <HAL_ADC_Init+0x294>)
 80011d0:	fba2 2303 	umull	r2, r3, r2, r3
 80011d4:	099b      	lsrs	r3, r3, #6
 80011d6:	3301      	adds	r3, #1
 80011d8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011da:	e002      	b.n	80011e2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	3b01      	subs	r3, #1
 80011e0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1f9      	bne.n	80011dc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff3d 	bl	800106c <LL_ADC_IsInternalRegulatorEnabled>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d10d      	bne.n	8001214 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011fc:	f043 0210 	orr.w	r2, r3, #16
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001208:	f043 0201 	orr.w	r2, r3, #1
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff77 	bl	800110c <LL_ADC_REG_IsConversionOngoing>
 800121e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001224:	f003 0310 	and.w	r3, r3, #16
 8001228:	2b00      	cmp	r3, #0
 800122a:	f040 8129 	bne.w	8001480 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	2b00      	cmp	r3, #0
 8001232:	f040 8125 	bne.w	8001480 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800123a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800123e:	f043 0202 	orr.w	r2, r3, #2
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ff36 	bl	80010bc <LL_ADC_IsEnabled>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d136      	bne.n	80012c4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a65      	ldr	r2, [pc, #404]	@ (80013f0 <HAL_ADC_Init+0x298>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d004      	beq.n	800126a <HAL_ADC_Init+0x112>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a63      	ldr	r2, [pc, #396]	@ (80013f4 <HAL_ADC_Init+0x29c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d10e      	bne.n	8001288 <HAL_ADC_Init+0x130>
 800126a:	4861      	ldr	r0, [pc, #388]	@ (80013f0 <HAL_ADC_Init+0x298>)
 800126c:	f7ff ff26 	bl	80010bc <LL_ADC_IsEnabled>
 8001270:	4604      	mov	r4, r0
 8001272:	4860      	ldr	r0, [pc, #384]	@ (80013f4 <HAL_ADC_Init+0x29c>)
 8001274:	f7ff ff22 	bl	80010bc <LL_ADC_IsEnabled>
 8001278:	4603      	mov	r3, r0
 800127a:	4323      	orrs	r3, r4
 800127c:	2b00      	cmp	r3, #0
 800127e:	bf0c      	ite	eq
 8001280:	2301      	moveq	r3, #1
 8001282:	2300      	movne	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	e008      	b.n	800129a <HAL_ADC_Init+0x142>
 8001288:	485b      	ldr	r0, [pc, #364]	@ (80013f8 <HAL_ADC_Init+0x2a0>)
 800128a:	f7ff ff17 	bl	80010bc <LL_ADC_IsEnabled>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	bf0c      	ite	eq
 8001294:	2301      	moveq	r3, #1
 8001296:	2300      	movne	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d012      	beq.n	80012c4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a53      	ldr	r2, [pc, #332]	@ (80013f0 <HAL_ADC_Init+0x298>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d004      	beq.n	80012b2 <HAL_ADC_Init+0x15a>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a51      	ldr	r2, [pc, #324]	@ (80013f4 <HAL_ADC_Init+0x29c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d101      	bne.n	80012b6 <HAL_ADC_Init+0x15e>
 80012b2:	4a52      	ldr	r2, [pc, #328]	@ (80013fc <HAL_ADC_Init+0x2a4>)
 80012b4:	e000      	b.n	80012b8 <HAL_ADC_Init+0x160>
 80012b6:	4a52      	ldr	r2, [pc, #328]	@ (8001400 <HAL_ADC_Init+0x2a8>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	4619      	mov	r1, r3
 80012be:	4610      	mov	r0, r2
 80012c0:	f7ff fd34 	bl	8000d2c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80012c4:	f7ff fd26 	bl	8000d14 <HAL_GetREVID>
 80012c8:	4603      	mov	r3, r0
 80012ca:	f241 0203 	movw	r2, #4099	@ 0x1003
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d914      	bls.n	80012fc <HAL_ADC_Init+0x1a4>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	2b10      	cmp	r3, #16
 80012d8:	d110      	bne.n	80012fc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7d5b      	ldrb	r3, [r3, #21]
 80012de:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80012e4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80012ea:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	7f1b      	ldrb	r3, [r3, #28]
 80012f0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80012f2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80012f4:	f043 030c 	orr.w	r3, r3, #12
 80012f8:	61bb      	str	r3, [r7, #24]
 80012fa:	e00d      	b.n	8001318 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	7d5b      	ldrb	r3, [r3, #21]
 8001300:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001306:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800130c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	7f1b      	ldrb	r3, [r3, #28]
 8001312:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	7f1b      	ldrb	r3, [r3, #28]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d106      	bne.n	800132e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	3b01      	subs	r3, #1
 8001326:	045b      	lsls	r3, r3, #17
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001332:	2b00      	cmp	r3, #0
 8001334:	d009      	beq.n	800134a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800133a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001342:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	4b2c      	ldr	r3, [pc, #176]	@ (8001404 <HAL_ADC_Init+0x2ac>)
 8001352:	4013      	ands	r3, r2
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	6812      	ldr	r2, [r2, #0]
 8001358:	69b9      	ldr	r1, [r7, #24]
 800135a:	430b      	orrs	r3, r1
 800135c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fed2 	bl	800110c <LL_ADC_REG_IsConversionOngoing>
 8001368:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fedf 	bl	8001132 <LL_ADC_INJ_IsConversionOngoing>
 8001374:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d15f      	bne.n	800143c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d15c      	bne.n	800143c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	7d1b      	ldrb	r3, [r3, #20]
 8001386:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68da      	ldr	r2, [r3, #12]
 8001396:	4b1c      	ldr	r3, [pc, #112]	@ (8001408 <HAL_ADC_Init+0x2b0>)
 8001398:	4013      	ands	r3, r2
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	6812      	ldr	r2, [r2, #0]
 800139e:	69b9      	ldr	r1, [r7, #24]
 80013a0:	430b      	orrs	r3, r1
 80013a2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d130      	bne.n	8001410 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	691a      	ldr	r2, [r3, #16]
 80013ba:	4b14      	ldr	r3, [pc, #80]	@ (800140c <HAL_ADC_Init+0x2b4>)
 80013bc:	4013      	ands	r3, r2
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80013c2:	3a01      	subs	r2, #1
 80013c4:	0411      	lsls	r1, r2, #16
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80013ca:	4311      	orrs	r1, r2
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80013d0:	4311      	orrs	r1, r2
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80013d6:	430a      	orrs	r2, r1
 80013d8:	431a      	orrs	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 0201 	orr.w	r2, r2, #1
 80013e2:	611a      	str	r2, [r3, #16]
 80013e4:	e01c      	b.n	8001420 <HAL_ADC_Init+0x2c8>
 80013e6:	bf00      	nop
 80013e8:	24000000 	.word	0x24000000
 80013ec:	053e2d63 	.word	0x053e2d63
 80013f0:	40022000 	.word	0x40022000
 80013f4:	40022100 	.word	0x40022100
 80013f8:	58026000 	.word	0x58026000
 80013fc:	40022300 	.word	0x40022300
 8001400:	58026300 	.word	0x58026300
 8001404:	fff0c003 	.word	0xfff0c003
 8001408:	ffffbffc 	.word	0xffffbffc
 800140c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	691a      	ldr	r2, [r3, #16]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 0201 	bic.w	r2, r2, #1
 800141e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 fd76 	bl	8001f28 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d10c      	bne.n	800145e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f023 010f 	bic.w	r1, r3, #15
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	1e5a      	subs	r2, r3, #1
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	430a      	orrs	r2, r1
 800145a:	631a      	str	r2, [r3, #48]	@ 0x30
 800145c:	e007      	b.n	800146e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 020f 	bic.w	r2, r2, #15
 800146c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001472:	f023 0303 	bic.w	r3, r3, #3
 8001476:	f043 0201 	orr.w	r2, r3, #1
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	655a      	str	r2, [r3, #84]	@ 0x54
 800147e:	e007      	b.n	8001490 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001484:	f043 0210 	orr.w	r2, r3, #16
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001490:	7ffb      	ldrb	r3, [r7, #31]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3724      	adds	r7, #36	@ 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd90      	pop	{r4, r7, pc}
 800149a:	bf00      	nop

0800149c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a5c      	ldr	r2, [pc, #368]	@ (800161c <HAL_ADC_Start+0x180>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d004      	beq.n	80014b8 <HAL_ADC_Start+0x1c>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001620 <HAL_ADC_Start+0x184>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d101      	bne.n	80014bc <HAL_ADC_Start+0x20>
 80014b8:	4b5a      	ldr	r3, [pc, #360]	@ (8001624 <HAL_ADC_Start+0x188>)
 80014ba:	e000      	b.n	80014be <HAL_ADC_Start+0x22>
 80014bc:	4b5a      	ldr	r3, [pc, #360]	@ (8001628 <HAL_ADC_Start+0x18c>)
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fd7e 	bl	8000fc0 <LL_ADC_GetMultimode>
 80014c4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fe1e 	bl	800110c <LL_ADC_REG_IsConversionOngoing>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f040 809a 	bne.w	800160c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d101      	bne.n	80014e6 <HAL_ADC_Start+0x4a>
 80014e2:	2302      	movs	r3, #2
 80014e4:	e095      	b.n	8001612 <HAL_ADC_Start+0x176>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2201      	movs	r2, #1
 80014ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 fc90 	bl	8001e14 <ADC_Enable>
 80014f4:	4603      	mov	r3, r0
 80014f6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f040 8081 	bne.w	8001602 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001504:	4b49      	ldr	r3, [pc, #292]	@ (800162c <HAL_ADC_Start+0x190>)
 8001506:	4013      	ands	r3, r2
 8001508:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a42      	ldr	r2, [pc, #264]	@ (8001620 <HAL_ADC_Start+0x184>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d002      	beq.n	8001520 <HAL_ADC_Start+0x84>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	e000      	b.n	8001522 <HAL_ADC_Start+0x86>
 8001520:	4b3e      	ldr	r3, [pc, #248]	@ (800161c <HAL_ADC_Start+0x180>)
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6812      	ldr	r2, [r2, #0]
 8001526:	4293      	cmp	r3, r2
 8001528:	d002      	beq.n	8001530 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d105      	bne.n	800153c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001534:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001540:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001548:	d106      	bne.n	8001558 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154e:	f023 0206 	bic.w	r2, r3, #6
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	659a      	str	r2, [r3, #88]	@ 0x58
 8001556:	e002      	b.n	800155e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	221c      	movs	r2, #28
 8001564:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a2b      	ldr	r2, [pc, #172]	@ (8001620 <HAL_ADC_Start+0x184>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d002      	beq.n	800157e <HAL_ADC_Start+0xe2>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	e000      	b.n	8001580 <HAL_ADC_Start+0xe4>
 800157e:	4b27      	ldr	r3, [pc, #156]	@ (800161c <HAL_ADC_Start+0x180>)
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6812      	ldr	r2, [r2, #0]
 8001584:	4293      	cmp	r3, r2
 8001586:	d008      	beq.n	800159a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d005      	beq.n	800159a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	2b05      	cmp	r3, #5
 8001592:	d002      	beq.n	800159a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	2b09      	cmp	r3, #9
 8001598:	d114      	bne.n	80015c4 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d007      	beq.n	80015b8 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015b0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fd91 	bl	80010e4 <LL_ADC_REG_StartConversion>
 80015c2:	e025      	b.n	8001610 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015c8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a12      	ldr	r2, [pc, #72]	@ (8001620 <HAL_ADC_Start+0x184>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d002      	beq.n	80015e0 <HAL_ADC_Start+0x144>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	e000      	b.n	80015e2 <HAL_ADC_Start+0x146>
 80015e0:	4b0e      	ldr	r3, [pc, #56]	@ (800161c <HAL_ADC_Start+0x180>)
 80015e2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00f      	beq.n	8001610 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015f4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015f8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	655a      	str	r2, [r3, #84]	@ 0x54
 8001600:	e006      	b.n	8001610 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800160a:	e001      	b.n	8001610 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800160c:	2302      	movs	r3, #2
 800160e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001610:	7dfb      	ldrb	r3, [r7, #23]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40022000 	.word	0x40022000
 8001620:	40022100 	.word	0x40022100
 8001624:	40022300 	.word	0x40022300
 8001628:	58026300 	.word	0x58026300
 800162c:	fffff0fe 	.word	0xfffff0fe

08001630 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a72      	ldr	r2, [pc, #456]	@ (8001808 <HAL_ADC_PollForConversion+0x1d8>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d004      	beq.n	800164e <HAL_ADC_PollForConversion+0x1e>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a70      	ldr	r2, [pc, #448]	@ (800180c <HAL_ADC_PollForConversion+0x1dc>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d101      	bne.n	8001652 <HAL_ADC_PollForConversion+0x22>
 800164e:	4b70      	ldr	r3, [pc, #448]	@ (8001810 <HAL_ADC_PollForConversion+0x1e0>)
 8001650:	e000      	b.n	8001654 <HAL_ADC_PollForConversion+0x24>
 8001652:	4b70      	ldr	r3, [pc, #448]	@ (8001814 <HAL_ADC_PollForConversion+0x1e4>)
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fcb3 	bl	8000fc0 <LL_ADC_GetMultimode>
 800165a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	2b08      	cmp	r3, #8
 8001662:	d102      	bne.n	800166a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001664:	2308      	movs	r3, #8
 8001666:	61fb      	str	r3, [r7, #28]
 8001668:	e037      	b.n	80016da <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d005      	beq.n	800167c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	2b05      	cmp	r3, #5
 8001674:	d002      	beq.n	800167c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	2b09      	cmp	r3, #9
 800167a:	d111      	bne.n	80016a0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	d007      	beq.n	800169a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800168e:	f043 0220 	orr.w	r2, r3, #32
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e0b1      	b.n	80017fe <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800169a:	2304      	movs	r3, #4
 800169c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800169e:	e01c      	b.n	80016da <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a58      	ldr	r2, [pc, #352]	@ (8001808 <HAL_ADC_PollForConversion+0x1d8>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d004      	beq.n	80016b4 <HAL_ADC_PollForConversion+0x84>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a57      	ldr	r2, [pc, #348]	@ (800180c <HAL_ADC_PollForConversion+0x1dc>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d101      	bne.n	80016b8 <HAL_ADC_PollForConversion+0x88>
 80016b4:	4b56      	ldr	r3, [pc, #344]	@ (8001810 <HAL_ADC_PollForConversion+0x1e0>)
 80016b6:	e000      	b.n	80016ba <HAL_ADC_PollForConversion+0x8a>
 80016b8:	4b56      	ldr	r3, [pc, #344]	@ (8001814 <HAL_ADC_PollForConversion+0x1e4>)
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fc8e 	bl	8000fdc <LL_ADC_GetMultiDMATransfer>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d007      	beq.n	80016d6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ca:	f043 0220 	orr.w	r2, r3, #32
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e093      	b.n	80017fe <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80016d6:	2304      	movs	r3, #4
 80016d8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80016da:	f7ff fb0f 	bl	8000cfc <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80016e0:	e021      	b.n	8001726 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016e8:	d01d      	beq.n	8001726 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80016ea:	f7ff fb07 	bl	8000cfc <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d302      	bcc.n	8001700 <HAL_ADC_PollForConversion+0xd0>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d112      	bne.n	8001726 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	4013      	ands	r3, r2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10b      	bne.n	8001726 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001712:	f043 0204 	orr.w	r2, r3, #4
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e06b      	b.n	80017fe <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	4013      	ands	r3, r2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0d6      	beq.n	80016e2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001738:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fbac 	bl	8000ea2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d01c      	beq.n	800178a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	7d5b      	ldrb	r3, [r3, #21]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d118      	bne.n	800178a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	2b08      	cmp	r3, #8
 8001764:	d111      	bne.n	800178a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800176a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001776:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d105      	bne.n	800178a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001782:	f043 0201 	orr.w	r2, r3, #1
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a1f      	ldr	r2, [pc, #124]	@ (800180c <HAL_ADC_PollForConversion+0x1dc>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d002      	beq.n	800179a <HAL_ADC_PollForConversion+0x16a>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	e000      	b.n	800179c <HAL_ADC_PollForConversion+0x16c>
 800179a:	4b1b      	ldr	r3, [pc, #108]	@ (8001808 <HAL_ADC_PollForConversion+0x1d8>)
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d008      	beq.n	80017b6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d005      	beq.n	80017b6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	2b05      	cmp	r3, #5
 80017ae:	d002      	beq.n	80017b6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	2b09      	cmp	r3, #9
 80017b4:	d104      	bne.n	80017c0 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	61bb      	str	r3, [r7, #24]
 80017be:	e00c      	b.n	80017da <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a11      	ldr	r2, [pc, #68]	@ (800180c <HAL_ADC_PollForConversion+0x1dc>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d002      	beq.n	80017d0 <HAL_ADC_PollForConversion+0x1a0>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	e000      	b.n	80017d2 <HAL_ADC_PollForConversion+0x1a2>
 80017d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001808 <HAL_ADC_PollForConversion+0x1d8>)
 80017d2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	2b08      	cmp	r3, #8
 80017de:	d104      	bne.n	80017ea <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2208      	movs	r2, #8
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	e008      	b.n	80017fc <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d103      	bne.n	80017fc <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	220c      	movs	r2, #12
 80017fa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3720      	adds	r7, #32
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40022000 	.word	0x40022000
 800180c:	40022100 	.word	0x40022100
 8001810:	40022300 	.word	0x40022300
 8001814:	58026300 	.word	0x58026300

08001818 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
	...

08001834 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b08d      	sub	sp, #52	@ 0x34
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	4a65      	ldr	r2, [pc, #404]	@ (80019e4 <HAL_ADC_ConfigChannel+0x1b0>)
 800184e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001856:	2b01      	cmp	r3, #1
 8001858:	d101      	bne.n	800185e <HAL_ADC_ConfigChannel+0x2a>
 800185a:	2302      	movs	r3, #2
 800185c:	e2c7      	b.n	8001dee <HAL_ADC_ConfigChannel+0x5ba>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fc4e 	bl	800110c <LL_ADC_REG_IsConversionOngoing>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	f040 82ac 	bne.w	8001dd0 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	db2c      	blt.n	80018da <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001888:	2b00      	cmp	r3, #0
 800188a:	d108      	bne.n	800189e <HAL_ADC_ConfigChannel+0x6a>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	0e9b      	lsrs	r3, r3, #26
 8001892:	f003 031f 	and.w	r3, r3, #31
 8001896:	2201      	movs	r2, #1
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	e016      	b.n	80018cc <HAL_ADC_ConfigChannel+0x98>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	fa93 f3a3 	rbit	r3, r3
 80018aa:	613b      	str	r3, [r7, #16]
  return result;
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 80018b6:	2320      	movs	r3, #32
 80018b8:	e003      	b.n	80018c2 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	fab3 f383 	clz	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	f003 031f 	and.w	r3, r3, #31
 80018c6:	2201      	movs	r2, #1
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	69d1      	ldr	r1, [r2, #28]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6812      	ldr	r2, [r2, #0]
 80018d6:	430b      	orrs	r3, r1
 80018d8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	6859      	ldr	r1, [r3, #4]
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	f7ff faee 	bl	8000ec8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fc0b 	bl	800110c <LL_ADC_REG_IsConversionOngoing>
 80018f6:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fc18 	bl	8001132 <LL_ADC_INJ_IsConversionOngoing>
 8001902:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001906:	2b00      	cmp	r3, #0
 8001908:	f040 80b8 	bne.w	8001a7c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800190c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190e:	2b00      	cmp	r3, #0
 8001910:	f040 80b4 	bne.w	8001a7c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6818      	ldr	r0, [r3, #0]
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	6819      	ldr	r1, [r3, #0]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	461a      	mov	r2, r3
 8001922:	f7ff fafd 	bl	8000f20 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001926:	4b30      	ldr	r3, [pc, #192]	@ (80019e8 <HAL_ADC_ConfigChannel+0x1b4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800192e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001932:	d10b      	bne.n	800194c <HAL_ADC_ConfigChannel+0x118>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	695a      	ldr	r2, [r3, #20]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	089b      	lsrs	r3, r3, #2
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	e01d      	b.n	8001988 <HAL_ADC_ConfigChannel+0x154>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10b      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x13e>
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	695a      	ldr	r2, [r3, #20]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	e00a      	b.n	8001988 <HAL_ADC_ConfigChannel+0x154>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	695a      	ldr	r2, [r3, #20]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	089b      	lsrs	r3, r3, #2
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	2b04      	cmp	r3, #4
 8001990:	d02c      	beq.n	80019ec <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	6919      	ldr	r1, [r3, #16]
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	f7ff fa2b 	bl	8000dfa <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	6919      	ldr	r1, [r3, #16]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	7e5b      	ldrb	r3, [r3, #25]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d102      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x186>
 80019b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80019b8:	e000      	b.n	80019bc <HAL_ADC_ConfigChannel+0x188>
 80019ba:	2300      	movs	r3, #0
 80019bc:	461a      	mov	r2, r3
 80019be:	f7ff fa55 	bl	8000e6c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6818      	ldr	r0, [r3, #0]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	6919      	ldr	r1, [r3, #16]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	7e1b      	ldrb	r3, [r3, #24]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d102      	bne.n	80019d8 <HAL_ADC_ConfigChannel+0x1a4>
 80019d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80019d6:	e000      	b.n	80019da <HAL_ADC_ConfigChannel+0x1a6>
 80019d8:	2300      	movs	r3, #0
 80019da:	461a      	mov	r2, r3
 80019dc:	f7ff fa2d 	bl	8000e3a <LL_ADC_SetDataRightShift>
 80019e0:	e04c      	b.n	8001a7c <HAL_ADC_ConfigChannel+0x248>
 80019e2:	bf00      	nop
 80019e4:	47ff0000 	.word	0x47ff0000
 80019e8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	069b      	lsls	r3, r3, #26
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d107      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001a0e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001a16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	069b      	lsls	r3, r3, #26
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d107      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001a32:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001a3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	069b      	lsls	r3, r3, #26
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d107      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001a56:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	069b      	lsls	r3, r3, #26
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d107      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001a7a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fb1b 	bl	80010bc <LL_ADC_IsEnabled>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f040 81aa 	bne.w	8001de2 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	6819      	ldr	r1, [r3, #0]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	f7ff fa6c 	bl	8000f78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	4a87      	ldr	r2, [pc, #540]	@ (8001cc4 <HAL_ADC_ConfigChannel+0x490>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	f040 809a 	bne.w	8001be0 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4984      	ldr	r1, [pc, #528]	@ (8001cc8 <HAL_ADC_ConfigChannel+0x494>)
 8001ab6:	428b      	cmp	r3, r1
 8001ab8:	d147      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x316>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4983      	ldr	r1, [pc, #524]	@ (8001ccc <HAL_ADC_ConfigChannel+0x498>)
 8001ac0:	428b      	cmp	r3, r1
 8001ac2:	d040      	beq.n	8001b46 <HAL_ADC_ConfigChannel+0x312>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4981      	ldr	r1, [pc, #516]	@ (8001cd0 <HAL_ADC_ConfigChannel+0x49c>)
 8001aca:	428b      	cmp	r3, r1
 8001acc:	d039      	beq.n	8001b42 <HAL_ADC_ConfigChannel+0x30e>
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4980      	ldr	r1, [pc, #512]	@ (8001cd4 <HAL_ADC_ConfigChannel+0x4a0>)
 8001ad4:	428b      	cmp	r3, r1
 8001ad6:	d032      	beq.n	8001b3e <HAL_ADC_ConfigChannel+0x30a>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	497e      	ldr	r1, [pc, #504]	@ (8001cd8 <HAL_ADC_ConfigChannel+0x4a4>)
 8001ade:	428b      	cmp	r3, r1
 8001ae0:	d02b      	beq.n	8001b3a <HAL_ADC_ConfigChannel+0x306>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	497d      	ldr	r1, [pc, #500]	@ (8001cdc <HAL_ADC_ConfigChannel+0x4a8>)
 8001ae8:	428b      	cmp	r3, r1
 8001aea:	d024      	beq.n	8001b36 <HAL_ADC_ConfigChannel+0x302>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	497b      	ldr	r1, [pc, #492]	@ (8001ce0 <HAL_ADC_ConfigChannel+0x4ac>)
 8001af2:	428b      	cmp	r3, r1
 8001af4:	d01d      	beq.n	8001b32 <HAL_ADC_ConfigChannel+0x2fe>
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	497a      	ldr	r1, [pc, #488]	@ (8001ce4 <HAL_ADC_ConfigChannel+0x4b0>)
 8001afc:	428b      	cmp	r3, r1
 8001afe:	d016      	beq.n	8001b2e <HAL_ADC_ConfigChannel+0x2fa>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4978      	ldr	r1, [pc, #480]	@ (8001ce8 <HAL_ADC_ConfigChannel+0x4b4>)
 8001b06:	428b      	cmp	r3, r1
 8001b08:	d00f      	beq.n	8001b2a <HAL_ADC_ConfigChannel+0x2f6>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4977      	ldr	r1, [pc, #476]	@ (8001cec <HAL_ADC_ConfigChannel+0x4b8>)
 8001b10:	428b      	cmp	r3, r1
 8001b12:	d008      	beq.n	8001b26 <HAL_ADC_ConfigChannel+0x2f2>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4975      	ldr	r1, [pc, #468]	@ (8001cf0 <HAL_ADC_ConfigChannel+0x4bc>)
 8001b1a:	428b      	cmp	r3, r1
 8001b1c:	d101      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x2ee>
 8001b1e:	4b75      	ldr	r3, [pc, #468]	@ (8001cf4 <HAL_ADC_ConfigChannel+0x4c0>)
 8001b20:	e05a      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x3a4>
 8001b22:	2300      	movs	r3, #0
 8001b24:	e058      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x3a4>
 8001b26:	4b74      	ldr	r3, [pc, #464]	@ (8001cf8 <HAL_ADC_ConfigChannel+0x4c4>)
 8001b28:	e056      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x3a4>
 8001b2a:	4b74      	ldr	r3, [pc, #464]	@ (8001cfc <HAL_ADC_ConfigChannel+0x4c8>)
 8001b2c:	e054      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x3a4>
 8001b2e:	4b6e      	ldr	r3, [pc, #440]	@ (8001ce8 <HAL_ADC_ConfigChannel+0x4b4>)
 8001b30:	e052      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x3a4>
 8001b32:	4b6c      	ldr	r3, [pc, #432]	@ (8001ce4 <HAL_ADC_ConfigChannel+0x4b0>)
 8001b34:	e050      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x3a4>
 8001b36:	4b72      	ldr	r3, [pc, #456]	@ (8001d00 <HAL_ADC_ConfigChannel+0x4cc>)
 8001b38:	e04e      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x3a4>
 8001b3a:	4b72      	ldr	r3, [pc, #456]	@ (8001d04 <HAL_ADC_ConfigChannel+0x4d0>)
 8001b3c:	e04c      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x3a4>
 8001b3e:	4b72      	ldr	r3, [pc, #456]	@ (8001d08 <HAL_ADC_ConfigChannel+0x4d4>)
 8001b40:	e04a      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x3a4>
 8001b42:	4b72      	ldr	r3, [pc, #456]	@ (8001d0c <HAL_ADC_ConfigChannel+0x4d8>)
 8001b44:	e048      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x3a4>
 8001b46:	2301      	movs	r3, #1
 8001b48:	e046      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x3a4>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4970      	ldr	r1, [pc, #448]	@ (8001d10 <HAL_ADC_ConfigChannel+0x4dc>)
 8001b50:	428b      	cmp	r3, r1
 8001b52:	d140      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x3a2>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	495c      	ldr	r1, [pc, #368]	@ (8001ccc <HAL_ADC_ConfigChannel+0x498>)
 8001b5a:	428b      	cmp	r3, r1
 8001b5c:	d039      	beq.n	8001bd2 <HAL_ADC_ConfigChannel+0x39e>
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	495b      	ldr	r1, [pc, #364]	@ (8001cd0 <HAL_ADC_ConfigChannel+0x49c>)
 8001b64:	428b      	cmp	r3, r1
 8001b66:	d032      	beq.n	8001bce <HAL_ADC_ConfigChannel+0x39a>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4959      	ldr	r1, [pc, #356]	@ (8001cd4 <HAL_ADC_ConfigChannel+0x4a0>)
 8001b6e:	428b      	cmp	r3, r1
 8001b70:	d02b      	beq.n	8001bca <HAL_ADC_ConfigChannel+0x396>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4958      	ldr	r1, [pc, #352]	@ (8001cd8 <HAL_ADC_ConfigChannel+0x4a4>)
 8001b78:	428b      	cmp	r3, r1
 8001b7a:	d024      	beq.n	8001bc6 <HAL_ADC_ConfigChannel+0x392>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4956      	ldr	r1, [pc, #344]	@ (8001cdc <HAL_ADC_ConfigChannel+0x4a8>)
 8001b82:	428b      	cmp	r3, r1
 8001b84:	d01d      	beq.n	8001bc2 <HAL_ADC_ConfigChannel+0x38e>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4955      	ldr	r1, [pc, #340]	@ (8001ce0 <HAL_ADC_ConfigChannel+0x4ac>)
 8001b8c:	428b      	cmp	r3, r1
 8001b8e:	d016      	beq.n	8001bbe <HAL_ADC_ConfigChannel+0x38a>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4953      	ldr	r1, [pc, #332]	@ (8001ce4 <HAL_ADC_ConfigChannel+0x4b0>)
 8001b96:	428b      	cmp	r3, r1
 8001b98:	d00f      	beq.n	8001bba <HAL_ADC_ConfigChannel+0x386>
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4952      	ldr	r1, [pc, #328]	@ (8001ce8 <HAL_ADC_ConfigChannel+0x4b4>)
 8001ba0:	428b      	cmp	r3, r1
 8001ba2:	d008      	beq.n	8001bb6 <HAL_ADC_ConfigChannel+0x382>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4951      	ldr	r1, [pc, #324]	@ (8001cf0 <HAL_ADC_ConfigChannel+0x4bc>)
 8001baa:	428b      	cmp	r3, r1
 8001bac:	d101      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x37e>
 8001bae:	4b51      	ldr	r3, [pc, #324]	@ (8001cf4 <HAL_ADC_ConfigChannel+0x4c0>)
 8001bb0:	e012      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x3a4>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e010      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x3a4>
 8001bb6:	4b51      	ldr	r3, [pc, #324]	@ (8001cfc <HAL_ADC_ConfigChannel+0x4c8>)
 8001bb8:	e00e      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x3a4>
 8001bba:	4b4b      	ldr	r3, [pc, #300]	@ (8001ce8 <HAL_ADC_ConfigChannel+0x4b4>)
 8001bbc:	e00c      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x3a4>
 8001bbe:	4b49      	ldr	r3, [pc, #292]	@ (8001ce4 <HAL_ADC_ConfigChannel+0x4b0>)
 8001bc0:	e00a      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x3a4>
 8001bc2:	4b4f      	ldr	r3, [pc, #316]	@ (8001d00 <HAL_ADC_ConfigChannel+0x4cc>)
 8001bc4:	e008      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x3a4>
 8001bc6:	4b4f      	ldr	r3, [pc, #316]	@ (8001d04 <HAL_ADC_ConfigChannel+0x4d0>)
 8001bc8:	e006      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x3a4>
 8001bca:	4b4f      	ldr	r3, [pc, #316]	@ (8001d08 <HAL_ADC_ConfigChannel+0x4d4>)
 8001bcc:	e004      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x3a4>
 8001bce:	4b4f      	ldr	r3, [pc, #316]	@ (8001d0c <HAL_ADC_ConfigChannel+0x4d8>)
 8001bd0:	e002      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x3a4>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x3a4>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4610      	mov	r0, r2
 8001bdc:	f7ff f8da 	bl	8000d94 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f280 80fc 	bge.w	8001de2 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a36      	ldr	r2, [pc, #216]	@ (8001cc8 <HAL_ADC_ConfigChannel+0x494>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d004      	beq.n	8001bfe <HAL_ADC_ConfigChannel+0x3ca>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a45      	ldr	r2, [pc, #276]	@ (8001d10 <HAL_ADC_ConfigChannel+0x4dc>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x3ce>
 8001bfe:	4b45      	ldr	r3, [pc, #276]	@ (8001d14 <HAL_ADC_ConfigChannel+0x4e0>)
 8001c00:	e000      	b.n	8001c04 <HAL_ADC_ConfigChannel+0x3d0>
 8001c02:	4b45      	ldr	r3, [pc, #276]	@ (8001d18 <HAL_ADC_ConfigChannel+0x4e4>)
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff f8b7 	bl	8000d78 <LL_ADC_GetCommonPathInternalCh>
 8001c0a:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a2d      	ldr	r2, [pc, #180]	@ (8001cc8 <HAL_ADC_ConfigChannel+0x494>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d004      	beq.n	8001c20 <HAL_ADC_ConfigChannel+0x3ec>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a3d      	ldr	r2, [pc, #244]	@ (8001d10 <HAL_ADC_ConfigChannel+0x4dc>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d10e      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x40a>
 8001c20:	4829      	ldr	r0, [pc, #164]	@ (8001cc8 <HAL_ADC_ConfigChannel+0x494>)
 8001c22:	f7ff fa4b 	bl	80010bc <LL_ADC_IsEnabled>
 8001c26:	4604      	mov	r4, r0
 8001c28:	4839      	ldr	r0, [pc, #228]	@ (8001d10 <HAL_ADC_ConfigChannel+0x4dc>)
 8001c2a:	f7ff fa47 	bl	80010bc <LL_ADC_IsEnabled>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4323      	orrs	r3, r4
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	bf0c      	ite	eq
 8001c36:	2301      	moveq	r3, #1
 8001c38:	2300      	movne	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	e008      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x41c>
 8001c3e:	4837      	ldr	r0, [pc, #220]	@ (8001d1c <HAL_ADC_ConfigChannel+0x4e8>)
 8001c40:	f7ff fa3c 	bl	80010bc <LL_ADC_IsEnabled>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	bf0c      	ite	eq
 8001c4a:	2301      	moveq	r3, #1
 8001c4c:	2300      	movne	r3, #0
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 80b3 	beq.w	8001dbc <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a31      	ldr	r2, [pc, #196]	@ (8001d20 <HAL_ADC_ConfigChannel+0x4ec>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d165      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x4f8>
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d160      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a2b      	ldr	r2, [pc, #172]	@ (8001d1c <HAL_ADC_ConfigChannel+0x4e8>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	f040 80b6 	bne.w	8001de2 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a13      	ldr	r2, [pc, #76]	@ (8001cc8 <HAL_ADC_ConfigChannel+0x494>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d004      	beq.n	8001c8a <HAL_ADC_ConfigChannel+0x456>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a22      	ldr	r2, [pc, #136]	@ (8001d10 <HAL_ADC_ConfigChannel+0x4dc>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d101      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x45a>
 8001c8a:	4a22      	ldr	r2, [pc, #136]	@ (8001d14 <HAL_ADC_ConfigChannel+0x4e0>)
 8001c8c:	e000      	b.n	8001c90 <HAL_ADC_ConfigChannel+0x45c>
 8001c8e:	4a22      	ldr	r2, [pc, #136]	@ (8001d18 <HAL_ADC_ConfigChannel+0x4e4>)
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c96:	4619      	mov	r1, r3
 8001c98:	4610      	mov	r0, r2
 8001c9a:	f7ff f85a 	bl	8000d52 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c9e:	4b21      	ldr	r3, [pc, #132]	@ (8001d24 <HAL_ADC_ConfigChannel+0x4f0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	099b      	lsrs	r3, r3, #6
 8001ca4:	4a20      	ldr	r2, [pc, #128]	@ (8001d28 <HAL_ADC_ConfigChannel+0x4f4>)
 8001ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8001caa:	099b      	lsrs	r3, r3, #6
 8001cac:	3301      	adds	r3, #1
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8001cb2:	e002      	b.n	8001cba <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1f9      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cc0:	e08f      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x5ae>
 8001cc2:	bf00      	nop
 8001cc4:	47ff0000 	.word	0x47ff0000
 8001cc8:	40022000 	.word	0x40022000
 8001ccc:	04300002 	.word	0x04300002
 8001cd0:	08600004 	.word	0x08600004
 8001cd4:	0c900008 	.word	0x0c900008
 8001cd8:	10c00010 	.word	0x10c00010
 8001cdc:	14f00020 	.word	0x14f00020
 8001ce0:	2a000400 	.word	0x2a000400
 8001ce4:	2e300800 	.word	0x2e300800
 8001ce8:	32601000 	.word	0x32601000
 8001cec:	43210000 	.word	0x43210000
 8001cf0:	4b840000 	.word	0x4b840000
 8001cf4:	4fb80000 	.word	0x4fb80000
 8001cf8:	47520000 	.word	0x47520000
 8001cfc:	36902000 	.word	0x36902000
 8001d00:	25b00200 	.word	0x25b00200
 8001d04:	21800100 	.word	0x21800100
 8001d08:	1d500080 	.word	0x1d500080
 8001d0c:	19200040 	.word	0x19200040
 8001d10:	40022100 	.word	0x40022100
 8001d14:	40022300 	.word	0x40022300
 8001d18:	58026300 	.word	0x58026300
 8001d1c:	58026000 	.word	0x58026000
 8001d20:	cb840000 	.word	0xcb840000
 8001d24:	24000000 	.word	0x24000000
 8001d28:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a31      	ldr	r2, [pc, #196]	@ (8001df8 <HAL_ADC_ConfigChannel+0x5c4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d11e      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x540>
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d119      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a2d      	ldr	r2, [pc, #180]	@ (8001dfc <HAL_ADC_ConfigChannel+0x5c8>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d14b      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a2c      	ldr	r2, [pc, #176]	@ (8001e00 <HAL_ADC_ConfigChannel+0x5cc>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d004      	beq.n	8001d5e <HAL_ADC_ConfigChannel+0x52a>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a2a      	ldr	r2, [pc, #168]	@ (8001e04 <HAL_ADC_ConfigChannel+0x5d0>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d101      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x52e>
 8001d5e:	4a2a      	ldr	r2, [pc, #168]	@ (8001e08 <HAL_ADC_ConfigChannel+0x5d4>)
 8001d60:	e000      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x530>
 8001d62:	4a2a      	ldr	r2, [pc, #168]	@ (8001e0c <HAL_ADC_ConfigChannel+0x5d8>)
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	f7fe fff0 	bl	8000d52 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d72:	e036      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a25      	ldr	r2, [pc, #148]	@ (8001e10 <HAL_ADC_ConfigChannel+0x5dc>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d131      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x5ae>
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d12c      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a1b      	ldr	r2, [pc, #108]	@ (8001dfc <HAL_ADC_ConfigChannel+0x5c8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d127      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a1a      	ldr	r2, [pc, #104]	@ (8001e00 <HAL_ADC_ConfigChannel+0x5cc>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d004      	beq.n	8001da6 <HAL_ADC_ConfigChannel+0x572>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a18      	ldr	r2, [pc, #96]	@ (8001e04 <HAL_ADC_ConfigChannel+0x5d0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d101      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x576>
 8001da6:	4a18      	ldr	r2, [pc, #96]	@ (8001e08 <HAL_ADC_ConfigChannel+0x5d4>)
 8001da8:	e000      	b.n	8001dac <HAL_ADC_ConfigChannel+0x578>
 8001daa:	4a18      	ldr	r2, [pc, #96]	@ (8001e0c <HAL_ADC_ConfigChannel+0x5d8>)
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001db2:	4619      	mov	r1, r3
 8001db4:	4610      	mov	r0, r2
 8001db6:	f7fe ffcc 	bl	8000d52 <LL_ADC_SetCommonPathInternalCh>
 8001dba:	e012      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc0:	f043 0220 	orr.w	r2, r3, #32
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001dce:	e008      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd4:	f043 0220 	orr.w	r2, r3, #32
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001dea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3734      	adds	r7, #52	@ 0x34
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd90      	pop	{r4, r7, pc}
 8001df6:	bf00      	nop
 8001df8:	c7520000 	.word	0xc7520000
 8001dfc:	58026000 	.word	0x58026000
 8001e00:	40022000 	.word	0x40022000
 8001e04:	40022100 	.word	0x40022100
 8001e08:	40022300 	.word	0x40022300
 8001e0c:	58026300 	.word	0x58026300
 8001e10:	cfb80000 	.word	0xcfb80000

08001e14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff f94b 	bl	80010bc <LL_ADC_IsEnabled>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d16e      	bne.n	8001f0a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	4b38      	ldr	r3, [pc, #224]	@ (8001f14 <ADC_Enable+0x100>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00d      	beq.n	8001e56 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e3e:	f043 0210 	orr.w	r2, r3, #16
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4a:	f043 0201 	orr.w	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e05a      	b.n	8001f0c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff f91a 	bl	8001094 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001e60:	f7fe ff4c 	bl	8000cfc <HAL_GetTick>
 8001e64:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a2b      	ldr	r2, [pc, #172]	@ (8001f18 <ADC_Enable+0x104>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d004      	beq.n	8001e7a <ADC_Enable+0x66>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a29      	ldr	r2, [pc, #164]	@ (8001f1c <ADC_Enable+0x108>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d101      	bne.n	8001e7e <ADC_Enable+0x6a>
 8001e7a:	4b29      	ldr	r3, [pc, #164]	@ (8001f20 <ADC_Enable+0x10c>)
 8001e7c:	e000      	b.n	8001e80 <ADC_Enable+0x6c>
 8001e7e:	4b29      	ldr	r3, [pc, #164]	@ (8001f24 <ADC_Enable+0x110>)
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff f89d 	bl	8000fc0 <LL_ADC_GetMultimode>
 8001e86:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a23      	ldr	r2, [pc, #140]	@ (8001f1c <ADC_Enable+0x108>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d002      	beq.n	8001e98 <ADC_Enable+0x84>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	e000      	b.n	8001e9a <ADC_Enable+0x86>
 8001e98:	4b1f      	ldr	r3, [pc, #124]	@ (8001f18 <ADC_Enable+0x104>)
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d02c      	beq.n	8001efc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d130      	bne.n	8001f0a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ea8:	e028      	b.n	8001efc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff f904 	bl	80010bc <LL_ADC_IsEnabled>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d104      	bne.n	8001ec4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff f8e8 	bl	8001094 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ec4:	f7fe ff1a 	bl	8000cfc <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d914      	bls.n	8001efc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d00d      	beq.n	8001efc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee4:	f043 0210 	orr.w	r2, r3, #16
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef0:	f043 0201 	orr.w	r2, r3, #1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e007      	b.n	8001f0c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d1cf      	bne.n	8001eaa <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	8000003f 	.word	0x8000003f
 8001f18:	40022000 	.word	0x40022000
 8001f1c:	40022100 	.word	0x40022100
 8001f20:	40022300 	.word	0x40022300
 8001f24:	58026300 	.word	0x58026300

08001f28 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a7a      	ldr	r2, [pc, #488]	@ (8002120 <ADC_ConfigureBoostMode+0x1f8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d004      	beq.n	8001f44 <ADC_ConfigureBoostMode+0x1c>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a79      	ldr	r2, [pc, #484]	@ (8002124 <ADC_ConfigureBoostMode+0x1fc>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d109      	bne.n	8001f58 <ADC_ConfigureBoostMode+0x30>
 8001f44:	4b78      	ldr	r3, [pc, #480]	@ (8002128 <ADC_ConfigureBoostMode+0x200>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	bf14      	ite	ne
 8001f50:	2301      	movne	r3, #1
 8001f52:	2300      	moveq	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	e008      	b.n	8001f6a <ADC_ConfigureBoostMode+0x42>
 8001f58:	4b74      	ldr	r3, [pc, #464]	@ (800212c <ADC_ConfigureBoostMode+0x204>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	bf14      	ite	ne
 8001f64:	2301      	movne	r3, #1
 8001f66:	2300      	moveq	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d01c      	beq.n	8001fa8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001f6e:	f001 fcdd 	bl	800392c <HAL_RCC_GetHCLKFreq>
 8001f72:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001f7c:	d010      	beq.n	8001fa0 <ADC_ConfigureBoostMode+0x78>
 8001f7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001f82:	d873      	bhi.n	800206c <ADC_ConfigureBoostMode+0x144>
 8001f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f88:	d002      	beq.n	8001f90 <ADC_ConfigureBoostMode+0x68>
 8001f8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001f8e:	d16d      	bne.n	800206c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	0c1b      	lsrs	r3, r3, #16
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9c:	60fb      	str	r3, [r7, #12]
        break;
 8001f9e:	e068      	b.n	8002072 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	089b      	lsrs	r3, r3, #2
 8001fa4:	60fb      	str	r3, [r7, #12]
        break;
 8001fa6:	e064      	b.n	8002072 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001fa8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001fac:	f04f 0100 	mov.w	r1, #0
 8001fb0:	f002 ff4c 	bl	8004e4c <HAL_RCCEx_GetPeriphCLKFreq>
 8001fb4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8001fbe:	d051      	beq.n	8002064 <ADC_ConfigureBoostMode+0x13c>
 8001fc0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8001fc4:	d854      	bhi.n	8002070 <ADC_ConfigureBoostMode+0x148>
 8001fc6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8001fca:	d047      	beq.n	800205c <ADC_ConfigureBoostMode+0x134>
 8001fcc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8001fd0:	d84e      	bhi.n	8002070 <ADC_ConfigureBoostMode+0x148>
 8001fd2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8001fd6:	d03d      	beq.n	8002054 <ADC_ConfigureBoostMode+0x12c>
 8001fd8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8001fdc:	d848      	bhi.n	8002070 <ADC_ConfigureBoostMode+0x148>
 8001fde:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001fe2:	d033      	beq.n	800204c <ADC_ConfigureBoostMode+0x124>
 8001fe4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001fe8:	d842      	bhi.n	8002070 <ADC_ConfigureBoostMode+0x148>
 8001fea:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8001fee:	d029      	beq.n	8002044 <ADC_ConfigureBoostMode+0x11c>
 8001ff0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8001ff4:	d83c      	bhi.n	8002070 <ADC_ConfigureBoostMode+0x148>
 8001ff6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8001ffa:	d01a      	beq.n	8002032 <ADC_ConfigureBoostMode+0x10a>
 8001ffc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002000:	d836      	bhi.n	8002070 <ADC_ConfigureBoostMode+0x148>
 8002002:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002006:	d014      	beq.n	8002032 <ADC_ConfigureBoostMode+0x10a>
 8002008:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800200c:	d830      	bhi.n	8002070 <ADC_ConfigureBoostMode+0x148>
 800200e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002012:	d00e      	beq.n	8002032 <ADC_ConfigureBoostMode+0x10a>
 8002014:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002018:	d82a      	bhi.n	8002070 <ADC_ConfigureBoostMode+0x148>
 800201a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800201e:	d008      	beq.n	8002032 <ADC_ConfigureBoostMode+0x10a>
 8002020:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002024:	d824      	bhi.n	8002070 <ADC_ConfigureBoostMode+0x148>
 8002026:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800202a:	d002      	beq.n	8002032 <ADC_ConfigureBoostMode+0x10a>
 800202c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002030:	d11e      	bne.n	8002070 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	0c9b      	lsrs	r3, r3, #18
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002040:	60fb      	str	r3, [r7, #12]
        break;
 8002042:	e016      	b.n	8002072 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	091b      	lsrs	r3, r3, #4
 8002048:	60fb      	str	r3, [r7, #12]
        break;
 800204a:	e012      	b.n	8002072 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	60fb      	str	r3, [r7, #12]
        break;
 8002052:	e00e      	b.n	8002072 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	099b      	lsrs	r3, r3, #6
 8002058:	60fb      	str	r3, [r7, #12]
        break;
 800205a:	e00a      	b.n	8002072 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	09db      	lsrs	r3, r3, #7
 8002060:	60fb      	str	r3, [r7, #12]
        break;
 8002062:	e006      	b.n	8002072 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	0a1b      	lsrs	r3, r3, #8
 8002068:	60fb      	str	r3, [r7, #12]
        break;
 800206a:	e002      	b.n	8002072 <ADC_ConfigureBoostMode+0x14a>
        break;
 800206c:	bf00      	nop
 800206e:	e000      	b.n	8002072 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002070:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002072:	f7fe fe4f 	bl	8000d14 <HAL_GetREVID>
 8002076:	4603      	mov	r3, r0
 8002078:	f241 0203 	movw	r2, #4099	@ 0x1003
 800207c:	4293      	cmp	r3, r2
 800207e:	d815      	bhi.n	80020ac <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4a2b      	ldr	r2, [pc, #172]	@ (8002130 <ADC_ConfigureBoostMode+0x208>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d908      	bls.n	800209a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002096:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002098:	e03e      	b.n	8002118 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020a8:	609a      	str	r2, [r3, #8]
}
 80020aa:	e035      	b.n	8002118 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	085b      	lsrs	r3, r3, #1
 80020b0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002134 <ADC_ConfigureBoostMode+0x20c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d808      	bhi.n	80020cc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80020c8:	609a      	str	r2, [r3, #8]
}
 80020ca:	e025      	b.n	8002118 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4a1a      	ldr	r2, [pc, #104]	@ (8002138 <ADC_ConfigureBoostMode+0x210>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d80a      	bhi.n	80020ea <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020e6:	609a      	str	r2, [r3, #8]
}
 80020e8:	e016      	b.n	8002118 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	4a13      	ldr	r2, [pc, #76]	@ (800213c <ADC_ConfigureBoostMode+0x214>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d80a      	bhi.n	8002108 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002104:	609a      	str	r2, [r3, #8]
}
 8002106:	e007      	b.n	8002118 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002116:	609a      	str	r2, [r3, #8]
}
 8002118:	bf00      	nop
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40022000 	.word	0x40022000
 8002124:	40022100 	.word	0x40022100
 8002128:	40022300 	.word	0x40022300
 800212c:	58026300 	.word	0x58026300
 8002130:	01312d00 	.word	0x01312d00
 8002134:	005f5e10 	.word	0x005f5e10
 8002138:	00bebc20 	.word	0x00bebc20
 800213c:	017d7840 	.word	0x017d7840

08002140 <LL_ADC_IsEnabled>:
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b01      	cmp	r3, #1
 8002152:	d101      	bne.n	8002158 <LL_ADC_IsEnabled+0x18>
 8002154:	2301      	movs	r3, #1
 8002156:	e000      	b.n	800215a <LL_ADC_IsEnabled+0x1a>
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <LL_ADC_REG_IsConversionOngoing>:
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	2b04      	cmp	r3, #4
 8002178:	d101      	bne.n	800217e <LL_ADC_REG_IsConversionOngoing+0x18>
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800218c:	b590      	push	{r4, r7, lr}
 800218e:	b09f      	sub	sp, #124	@ 0x7c
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d101      	bne.n	80021aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80021a6:	2302      	movs	r3, #2
 80021a8:	e0be      	b.n	8002328 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80021b2:	2300      	movs	r3, #0
 80021b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a5c      	ldr	r2, [pc, #368]	@ (8002330 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d102      	bne.n	80021ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80021c4:	4b5b      	ldr	r3, [pc, #364]	@ (8002334 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	e001      	b.n	80021ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80021ca:	2300      	movs	r3, #0
 80021cc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10b      	bne.n	80021ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d8:	f043 0220 	orr.w	r2, r3, #32
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e09d      	b.n	8002328 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff ffb9 	bl	8002166 <LL_ADC_REG_IsConversionOngoing>
 80021f4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff ffb3 	bl	8002166 <LL_ADC_REG_IsConversionOngoing>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d17f      	bne.n	8002306 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002206:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002208:	2b00      	cmp	r3, #0
 800220a:	d17c      	bne.n	8002306 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a47      	ldr	r2, [pc, #284]	@ (8002330 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d004      	beq.n	8002220 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a46      	ldr	r2, [pc, #280]	@ (8002334 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d101      	bne.n	8002224 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002220:	4b45      	ldr	r3, [pc, #276]	@ (8002338 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002222:	e000      	b.n	8002226 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002224:	4b45      	ldr	r3, [pc, #276]	@ (800233c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002226:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d039      	beq.n	80022a4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002230:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	431a      	orrs	r2, r3
 800223e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002240:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a3a      	ldr	r2, [pc, #232]	@ (8002330 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d004      	beq.n	8002256 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a38      	ldr	r2, [pc, #224]	@ (8002334 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d10e      	bne.n	8002274 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002256:	4836      	ldr	r0, [pc, #216]	@ (8002330 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002258:	f7ff ff72 	bl	8002140 <LL_ADC_IsEnabled>
 800225c:	4604      	mov	r4, r0
 800225e:	4835      	ldr	r0, [pc, #212]	@ (8002334 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002260:	f7ff ff6e 	bl	8002140 <LL_ADC_IsEnabled>
 8002264:	4603      	mov	r3, r0
 8002266:	4323      	orrs	r3, r4
 8002268:	2b00      	cmp	r3, #0
 800226a:	bf0c      	ite	eq
 800226c:	2301      	moveq	r3, #1
 800226e:	2300      	movne	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	e008      	b.n	8002286 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002274:	4832      	ldr	r0, [pc, #200]	@ (8002340 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002276:	f7ff ff63 	bl	8002140 <LL_ADC_IsEnabled>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	bf0c      	ite	eq
 8002280:	2301      	moveq	r3, #1
 8002282:	2300      	movne	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d047      	beq.n	800231a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800228a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	4b2d      	ldr	r3, [pc, #180]	@ (8002344 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002290:	4013      	ands	r3, r2
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	6811      	ldr	r1, [r2, #0]
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	6892      	ldr	r2, [r2, #8]
 800229a:	430a      	orrs	r2, r1
 800229c:	431a      	orrs	r2, r3
 800229e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022a0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022a2:	e03a      	b.n	800231a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80022a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80022ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022ae:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002330 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d004      	beq.n	80022c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a1d      	ldr	r2, [pc, #116]	@ (8002334 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d10e      	bne.n	80022e2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80022c4:	481a      	ldr	r0, [pc, #104]	@ (8002330 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80022c6:	f7ff ff3b 	bl	8002140 <LL_ADC_IsEnabled>
 80022ca:	4604      	mov	r4, r0
 80022cc:	4819      	ldr	r0, [pc, #100]	@ (8002334 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80022ce:	f7ff ff37 	bl	8002140 <LL_ADC_IsEnabled>
 80022d2:	4603      	mov	r3, r0
 80022d4:	4323      	orrs	r3, r4
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	bf0c      	ite	eq
 80022da:	2301      	moveq	r3, #1
 80022dc:	2300      	movne	r3, #0
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	e008      	b.n	80022f4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80022e2:	4817      	ldr	r0, [pc, #92]	@ (8002340 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80022e4:	f7ff ff2c 	bl	8002140 <LL_ADC_IsEnabled>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	bf0c      	ite	eq
 80022ee:	2301      	moveq	r3, #1
 80022f0:	2300      	movne	r3, #0
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d010      	beq.n	800231a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80022f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	4b11      	ldr	r3, [pc, #68]	@ (8002344 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80022fe:	4013      	ands	r3, r2
 8002300:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002302:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002304:	e009      	b.n	800231a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800230a:	f043 0220 	orr.w	r2, r3, #32
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002318:	e000      	b.n	800231c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800231a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002324:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002328:	4618      	mov	r0, r3
 800232a:	377c      	adds	r7, #124	@ 0x7c
 800232c:	46bd      	mov	sp, r7
 800232e:	bd90      	pop	{r4, r7, pc}
 8002330:	40022000 	.word	0x40022000
 8002334:	40022100 	.word	0x40022100
 8002338:	40022300 	.word	0x40022300
 800233c:	58026300 	.word	0x58026300
 8002340:	58026000 	.word	0x58026000
 8002344:	fffff0e0 	.word	0xfffff0e0

08002348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002358:	4b0b      	ldr	r3, [pc, #44]	@ (8002388 <__NVIC_SetPriorityGrouping+0x40>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002364:	4013      	ands	r3, r2
 8002366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002370:	4b06      	ldr	r3, [pc, #24]	@ (800238c <__NVIC_SetPriorityGrouping+0x44>)
 8002372:	4313      	orrs	r3, r2
 8002374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002376:	4a04      	ldr	r2, [pc, #16]	@ (8002388 <__NVIC_SetPriorityGrouping+0x40>)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	60d3      	str	r3, [r2, #12]
}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	e000ed00 	.word	0xe000ed00
 800238c:	05fa0000 	.word	0x05fa0000

08002390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002394:	4b04      	ldr	r3, [pc, #16]	@ (80023a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	0a1b      	lsrs	r3, r3, #8
 800239a:	f003 0307 	and.w	r3, r3, #7
}
 800239e:	4618      	mov	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	db0b      	blt.n	80023d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023be:	88fb      	ldrh	r3, [r7, #6]
 80023c0:	f003 021f 	and.w	r2, r3, #31
 80023c4:	4907      	ldr	r1, [pc, #28]	@ (80023e4 <__NVIC_EnableIRQ+0x38>)
 80023c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	2001      	movs	r0, #1
 80023ce:	fa00 f202 	lsl.w	r2, r0, r2
 80023d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000e100 	.word	0xe000e100

080023e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	6039      	str	r1, [r7, #0]
 80023f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	db0a      	blt.n	8002412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	490c      	ldr	r1, [pc, #48]	@ (8002434 <__NVIC_SetPriority+0x4c>)
 8002402:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002406:	0112      	lsls	r2, r2, #4
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	440b      	add	r3, r1
 800240c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002410:	e00a      	b.n	8002428 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	b2da      	uxtb	r2, r3
 8002416:	4908      	ldr	r1, [pc, #32]	@ (8002438 <__NVIC_SetPriority+0x50>)
 8002418:	88fb      	ldrh	r3, [r7, #6]
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	3b04      	subs	r3, #4
 8002420:	0112      	lsls	r2, r2, #4
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	440b      	add	r3, r1
 8002426:	761a      	strb	r2, [r3, #24]
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000e100 	.word	0xe000e100
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800243c:	b480      	push	{r7}
 800243e:	b089      	sub	sp, #36	@ 0x24
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f1c3 0307 	rsb	r3, r3, #7
 8002456:	2b04      	cmp	r3, #4
 8002458:	bf28      	it	cs
 800245a:	2304      	movcs	r3, #4
 800245c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3304      	adds	r3, #4
 8002462:	2b06      	cmp	r3, #6
 8002464:	d902      	bls.n	800246c <NVIC_EncodePriority+0x30>
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3b03      	subs	r3, #3
 800246a:	e000      	b.n	800246e <NVIC_EncodePriority+0x32>
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002470:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43da      	mvns	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	401a      	ands	r2, r3
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002484:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	fa01 f303 	lsl.w	r3, r1, r3
 800248e:	43d9      	mvns	r1, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002494:	4313      	orrs	r3, r2
         );
}
 8002496:	4618      	mov	r0, r3
 8002498:	3724      	adds	r7, #36	@ 0x24
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
	...

080024a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024b4:	d301      	bcc.n	80024ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024b6:	2301      	movs	r3, #1
 80024b8:	e00f      	b.n	80024da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ba:	4a0a      	ldr	r2, [pc, #40]	@ (80024e4 <SysTick_Config+0x40>)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3b01      	subs	r3, #1
 80024c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024c2:	210f      	movs	r1, #15
 80024c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024c8:	f7ff ff8e 	bl	80023e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024cc:	4b05      	ldr	r3, [pc, #20]	@ (80024e4 <SysTick_Config+0x40>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024d2:	4b04      	ldr	r3, [pc, #16]	@ (80024e4 <SysTick_Config+0x40>)
 80024d4:	2207      	movs	r2, #7
 80024d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	e000e010 	.word	0xe000e010

080024e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ff29 	bl	8002348 <__NVIC_SetPriorityGrouping>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b086      	sub	sp, #24
 8002502:	af00      	add	r7, sp, #0
 8002504:	4603      	mov	r3, r0
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
 800250a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800250c:	f7ff ff40 	bl	8002390 <__NVIC_GetPriorityGrouping>
 8002510:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	6978      	ldr	r0, [r7, #20]
 8002518:	f7ff ff90 	bl	800243c <NVIC_EncodePriority>
 800251c:	4602      	mov	r2, r0
 800251e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff5f 	bl	80023e8 <__NVIC_SetPriority>
}
 800252a:	bf00      	nop
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	4603      	mov	r3, r0
 800253a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800253c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff33 	bl	80023ac <__NVIC_EnableIRQ>
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff ffa4 	bl	80024a4 <SysTick_Config>
 800255c:	4603      	mov	r3, r0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002568:	b480      	push	{r7}
 800256a:	b089      	sub	sp, #36	@ 0x24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002576:	4b89      	ldr	r3, [pc, #548]	@ (800279c <HAL_GPIO_Init+0x234>)
 8002578:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800257a:	e194      	b.n	80028a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	2101      	movs	r1, #1
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	fa01 f303 	lsl.w	r3, r1, r3
 8002588:	4013      	ands	r3, r2
 800258a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 8186 	beq.w	80028a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	2b01      	cmp	r3, #1
 800259e:	d005      	beq.n	80025ac <HAL_GPIO_Init+0x44>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d130      	bne.n	800260e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	2203      	movs	r2, #3
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025e2:	2201      	movs	r2, #1
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	091b      	lsrs	r3, r3, #4
 80025f8:	f003 0201 	and.w	r2, r3, #1
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	2b03      	cmp	r3, #3
 8002618:	d017      	beq.n	800264a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	2203      	movs	r2, #3
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4013      	ands	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4313      	orrs	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d123      	bne.n	800269e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	08da      	lsrs	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3208      	adds	r2, #8
 800265e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	220f      	movs	r2, #15
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4313      	orrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	08da      	lsrs	r2, r3, #3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3208      	adds	r2, #8
 8002698:	69b9      	ldr	r1, [r7, #24]
 800269a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	2203      	movs	r2, #3
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f003 0203 	and.w	r2, r3, #3
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 80e0 	beq.w	80028a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e0:	4b2f      	ldr	r3, [pc, #188]	@ (80027a0 <HAL_GPIO_Init+0x238>)
 80026e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026e6:	4a2e      	ldr	r2, [pc, #184]	@ (80027a0 <HAL_GPIO_Init+0x238>)
 80026e8:	f043 0302 	orr.w	r3, r3, #2
 80026ec:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80026f0:	4b2b      	ldr	r3, [pc, #172]	@ (80027a0 <HAL_GPIO_Init+0x238>)
 80026f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026fe:	4a29      	ldr	r2, [pc, #164]	@ (80027a4 <HAL_GPIO_Init+0x23c>)
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	089b      	lsrs	r3, r3, #2
 8002704:	3302      	adds	r3, #2
 8002706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	220f      	movs	r2, #15
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a20      	ldr	r2, [pc, #128]	@ (80027a8 <HAL_GPIO_Init+0x240>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d052      	beq.n	80027d0 <HAL_GPIO_Init+0x268>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a1f      	ldr	r2, [pc, #124]	@ (80027ac <HAL_GPIO_Init+0x244>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d031      	beq.n	8002796 <HAL_GPIO_Init+0x22e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a1e      	ldr	r2, [pc, #120]	@ (80027b0 <HAL_GPIO_Init+0x248>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d02b      	beq.n	8002792 <HAL_GPIO_Init+0x22a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a1d      	ldr	r2, [pc, #116]	@ (80027b4 <HAL_GPIO_Init+0x24c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d025      	beq.n	800278e <HAL_GPIO_Init+0x226>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a1c      	ldr	r2, [pc, #112]	@ (80027b8 <HAL_GPIO_Init+0x250>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d01f      	beq.n	800278a <HAL_GPIO_Init+0x222>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a1b      	ldr	r2, [pc, #108]	@ (80027bc <HAL_GPIO_Init+0x254>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d019      	beq.n	8002786 <HAL_GPIO_Init+0x21e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a1a      	ldr	r2, [pc, #104]	@ (80027c0 <HAL_GPIO_Init+0x258>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d013      	beq.n	8002782 <HAL_GPIO_Init+0x21a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a19      	ldr	r2, [pc, #100]	@ (80027c4 <HAL_GPIO_Init+0x25c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00d      	beq.n	800277e <HAL_GPIO_Init+0x216>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a18      	ldr	r2, [pc, #96]	@ (80027c8 <HAL_GPIO_Init+0x260>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d007      	beq.n	800277a <HAL_GPIO_Init+0x212>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a17      	ldr	r2, [pc, #92]	@ (80027cc <HAL_GPIO_Init+0x264>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d101      	bne.n	8002776 <HAL_GPIO_Init+0x20e>
 8002772:	2309      	movs	r3, #9
 8002774:	e02d      	b.n	80027d2 <HAL_GPIO_Init+0x26a>
 8002776:	230a      	movs	r3, #10
 8002778:	e02b      	b.n	80027d2 <HAL_GPIO_Init+0x26a>
 800277a:	2308      	movs	r3, #8
 800277c:	e029      	b.n	80027d2 <HAL_GPIO_Init+0x26a>
 800277e:	2307      	movs	r3, #7
 8002780:	e027      	b.n	80027d2 <HAL_GPIO_Init+0x26a>
 8002782:	2306      	movs	r3, #6
 8002784:	e025      	b.n	80027d2 <HAL_GPIO_Init+0x26a>
 8002786:	2305      	movs	r3, #5
 8002788:	e023      	b.n	80027d2 <HAL_GPIO_Init+0x26a>
 800278a:	2304      	movs	r3, #4
 800278c:	e021      	b.n	80027d2 <HAL_GPIO_Init+0x26a>
 800278e:	2303      	movs	r3, #3
 8002790:	e01f      	b.n	80027d2 <HAL_GPIO_Init+0x26a>
 8002792:	2302      	movs	r3, #2
 8002794:	e01d      	b.n	80027d2 <HAL_GPIO_Init+0x26a>
 8002796:	2301      	movs	r3, #1
 8002798:	e01b      	b.n	80027d2 <HAL_GPIO_Init+0x26a>
 800279a:	bf00      	nop
 800279c:	58000080 	.word	0x58000080
 80027a0:	58024400 	.word	0x58024400
 80027a4:	58000400 	.word	0x58000400
 80027a8:	58020000 	.word	0x58020000
 80027ac:	58020400 	.word	0x58020400
 80027b0:	58020800 	.word	0x58020800
 80027b4:	58020c00 	.word	0x58020c00
 80027b8:	58021000 	.word	0x58021000
 80027bc:	58021400 	.word	0x58021400
 80027c0:	58021800 	.word	0x58021800
 80027c4:	58021c00 	.word	0x58021c00
 80027c8:	58022000 	.word	0x58022000
 80027cc:	58022400 	.word	0x58022400
 80027d0:	2300      	movs	r3, #0
 80027d2:	69fa      	ldr	r2, [r7, #28]
 80027d4:	f002 0203 	and.w	r2, r2, #3
 80027d8:	0092      	lsls	r2, r2, #2
 80027da:	4093      	lsls	r3, r2
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027e2:	4938      	ldr	r1, [pc, #224]	@ (80028c4 <HAL_GPIO_Init+0x35c>)
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	089b      	lsrs	r3, r3, #2
 80027e8:	3302      	adds	r3, #2
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002816:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800281e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002844:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	3301      	adds	r3, #1
 80028a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	fa22 f303 	lsr.w	r3, r2, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f47f ae63 	bne.w	800257c <HAL_GPIO_Init+0x14>
  }
}
 80028b6:	bf00      	nop
 80028b8:	bf00      	nop
 80028ba:	3724      	adds	r7, #36	@ 0x24
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	58000400 	.word	0x58000400

080028c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	807b      	strh	r3, [r7, #2]
 80028d4:	4613      	mov	r3, r2
 80028d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028d8:	787b      	ldrb	r3, [r7, #1]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028de:	887a      	ldrh	r2, [r7, #2]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80028e4:	e003      	b.n	80028ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80028e6:	887b      	ldrh	r3, [r7, #2]
 80028e8:	041a      	lsls	r2, r3, #16
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	619a      	str	r2, [r3, #24]
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b085      	sub	sp, #20
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	460b      	mov	r3, r1
 8002904:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800290c:	887a      	ldrh	r2, [r7, #2]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4013      	ands	r3, r2
 8002912:	041a      	lsls	r2, r3, #16
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	43d9      	mvns	r1, r3
 8002918:	887b      	ldrh	r3, [r7, #2]
 800291a:	400b      	ands	r3, r1
 800291c:	431a      	orrs	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	619a      	str	r2, [r3, #24]
}
 8002922:	bf00      	nop
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	4603      	mov	r3, r0
 8002936:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002938:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800293c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002940:	88fb      	ldrh	r3, [r7, #6]
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d008      	beq.n	800295a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002948:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800294c:	88fb      	ldrh	r3, [r7, #6]
 800294e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002952:	88fb      	ldrh	r3, [r7, #6]
 8002954:	4618      	mov	r0, r3
 8002956:	f7fd fdc9 	bl	80004ec <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
	...

08002964 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800296c:	4b29      	ldr	r3, [pc, #164]	@ (8002a14 <HAL_PWREx_ConfigSupply+0xb0>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	2b06      	cmp	r3, #6
 8002976:	d00a      	beq.n	800298e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002978:	4b26      	ldr	r3, [pc, #152]	@ (8002a14 <HAL_PWREx_ConfigSupply+0xb0>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	429a      	cmp	r2, r3
 8002984:	d001      	beq.n	800298a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e040      	b.n	8002a0c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	e03e      	b.n	8002a0c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800298e:	4b21      	ldr	r3, [pc, #132]	@ (8002a14 <HAL_PWREx_ConfigSupply+0xb0>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002996:	491f      	ldr	r1, [pc, #124]	@ (8002a14 <HAL_PWREx_ConfigSupply+0xb0>)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4313      	orrs	r3, r2
 800299c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800299e:	f7fe f9ad 	bl	8000cfc <HAL_GetTick>
 80029a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80029a4:	e009      	b.n	80029ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80029a6:	f7fe f9a9 	bl	8000cfc <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029b4:	d901      	bls.n	80029ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e028      	b.n	8002a0c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80029ba:	4b16      	ldr	r3, [pc, #88]	@ (8002a14 <HAL_PWREx_ConfigSupply+0xb0>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029c6:	d1ee      	bne.n	80029a6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b1e      	cmp	r3, #30
 80029cc:	d008      	beq.n	80029e0 <HAL_PWREx_ConfigSupply+0x7c>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80029d2:	d005      	beq.n	80029e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b1d      	cmp	r3, #29
 80029d8:	d002      	beq.n	80029e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b2d      	cmp	r3, #45	@ 0x2d
 80029de:	d114      	bne.n	8002a0a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80029e0:	f7fe f98c 	bl	8000cfc <HAL_GetTick>
 80029e4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80029e6:	e009      	b.n	80029fc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80029e8:	f7fe f988 	bl	8000cfc <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029f6:	d901      	bls.n	80029fc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e007      	b.n	8002a0c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80029fc:	4b05      	ldr	r3, [pc, #20]	@ (8002a14 <HAL_PWREx_ConfigSupply+0xb0>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a08:	d1ee      	bne.n	80029e8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	58024800 	.word	0x58024800

08002a18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08c      	sub	sp, #48	@ 0x30
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d102      	bne.n	8002a2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	f000 bc48 	b.w	80032bc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 8088 	beq.w	8002b4a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a3a:	4b99      	ldr	r3, [pc, #612]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a44:	4b96      	ldr	r3, [pc, #600]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a48:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a4c:	2b10      	cmp	r3, #16
 8002a4e:	d007      	beq.n	8002a60 <HAL_RCC_OscConfig+0x48>
 8002a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a52:	2b18      	cmp	r3, #24
 8002a54:	d111      	bne.n	8002a7a <HAL_RCC_OscConfig+0x62>
 8002a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d10c      	bne.n	8002a7a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a60:	4b8f      	ldr	r3, [pc, #572]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d06d      	beq.n	8002b48 <HAL_RCC_OscConfig+0x130>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d169      	bne.n	8002b48 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	f000 bc21 	b.w	80032bc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a82:	d106      	bne.n	8002a92 <HAL_RCC_OscConfig+0x7a>
 8002a84:	4b86      	ldr	r3, [pc, #536]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a85      	ldr	r2, [pc, #532]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002a8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	e02e      	b.n	8002af0 <HAL_RCC_OscConfig+0xd8>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x9c>
 8002a9a:	4b81      	ldr	r3, [pc, #516]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a80      	ldr	r2, [pc, #512]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002aa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	4b7e      	ldr	r3, [pc, #504]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a7d      	ldr	r2, [pc, #500]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002aac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	e01d      	b.n	8002af0 <HAL_RCC_OscConfig+0xd8>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002abc:	d10c      	bne.n	8002ad8 <HAL_RCC_OscConfig+0xc0>
 8002abe:	4b78      	ldr	r3, [pc, #480]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a77      	ldr	r2, [pc, #476]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002ac4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	4b75      	ldr	r3, [pc, #468]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a74      	ldr	r2, [pc, #464]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	e00b      	b.n	8002af0 <HAL_RCC_OscConfig+0xd8>
 8002ad8:	4b71      	ldr	r3, [pc, #452]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a70      	ldr	r2, [pc, #448]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002ade:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	4b6e      	ldr	r3, [pc, #440]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a6d      	ldr	r2, [pc, #436]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002aea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d013      	beq.n	8002b20 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7fe f900 	bl	8000cfc <HAL_GetTick>
 8002afc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b00:	f7fe f8fc 	bl	8000cfc <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b64      	cmp	r3, #100	@ 0x64
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e3d4      	b.n	80032bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b12:	4b63      	ldr	r3, [pc, #396]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0xe8>
 8002b1e:	e014      	b.n	8002b4a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b20:	f7fe f8ec 	bl	8000cfc <HAL_GetTick>
 8002b24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b28:	f7fe f8e8 	bl	8000cfc <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b64      	cmp	r3, #100	@ 0x64
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e3c0      	b.n	80032bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b3a:	4b59      	ldr	r3, [pc, #356]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x110>
 8002b46:	e000      	b.n	8002b4a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 80ca 	beq.w	8002cec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b58:	4b51      	ldr	r3, [pc, #324]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b60:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b62:	4b4f      	ldr	r3, [pc, #316]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b66:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d007      	beq.n	8002b7e <HAL_RCC_OscConfig+0x166>
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	2b18      	cmp	r3, #24
 8002b72:	d156      	bne.n	8002c22 <HAL_RCC_OscConfig+0x20a>
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d151      	bne.n	8002c22 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b7e:	4b48      	ldr	r3, [pc, #288]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0304 	and.w	r3, r3, #4
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d005      	beq.n	8002b96 <HAL_RCC_OscConfig+0x17e>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e392      	b.n	80032bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b96:	4b42      	ldr	r3, [pc, #264]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 0219 	bic.w	r2, r3, #25
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	493f      	ldr	r1, [pc, #252]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7fe f8a8 	bl	8000cfc <HAL_GetTick>
 8002bac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb0:	f7fe f8a4 	bl	8000cfc <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e37c      	b.n	80032bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bc2:	4b37      	ldr	r3, [pc, #220]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bce:	f7fe f8a1 	bl	8000d14 <HAL_GetREVID>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d817      	bhi.n	8002c0c <HAL_RCC_OscConfig+0x1f4>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	2b40      	cmp	r3, #64	@ 0x40
 8002be2:	d108      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x1de>
 8002be4:	4b2e      	ldr	r3, [pc, #184]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002bec:	4a2c      	ldr	r2, [pc, #176]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002bee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bf2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bf4:	e07a      	b.n	8002cec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	031b      	lsls	r3, r3, #12
 8002c04:	4926      	ldr	r1, [pc, #152]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c0a:	e06f      	b.n	8002cec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c0c:	4b24      	ldr	r3, [pc, #144]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	061b      	lsls	r3, r3, #24
 8002c1a:	4921      	ldr	r1, [pc, #132]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c20:	e064      	b.n	8002cec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d047      	beq.n	8002cba <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f023 0219 	bic.w	r2, r3, #25
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	491a      	ldr	r1, [pc, #104]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7fe f85e 	bl	8000cfc <HAL_GetTick>
 8002c40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c44:	f7fe f85a 	bl	8000cfc <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e332      	b.n	80032bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c56:	4b12      	ldr	r3, [pc, #72]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c62:	f7fe f857 	bl	8000d14 <HAL_GetREVID>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d819      	bhi.n	8002ca4 <HAL_RCC_OscConfig+0x28c>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	2b40      	cmp	r3, #64	@ 0x40
 8002c76:	d108      	bne.n	8002c8a <HAL_RCC_OscConfig+0x272>
 8002c78:	4b09      	ldr	r3, [pc, #36]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002c80:	4a07      	ldr	r2, [pc, #28]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002c82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c86:	6053      	str	r3, [r2, #4]
 8002c88:	e030      	b.n	8002cec <HAL_RCC_OscConfig+0x2d4>
 8002c8a:	4b05      	ldr	r3, [pc, #20]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	031b      	lsls	r3, r3, #12
 8002c98:	4901      	ldr	r1, [pc, #4]	@ (8002ca0 <HAL_RCC_OscConfig+0x288>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	604b      	str	r3, [r1, #4]
 8002c9e:	e025      	b.n	8002cec <HAL_RCC_OscConfig+0x2d4>
 8002ca0:	58024400 	.word	0x58024400
 8002ca4:	4b9a      	ldr	r3, [pc, #616]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	061b      	lsls	r3, r3, #24
 8002cb2:	4997      	ldr	r1, [pc, #604]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	604b      	str	r3, [r1, #4]
 8002cb8:	e018      	b.n	8002cec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cba:	4b95      	ldr	r3, [pc, #596]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a94      	ldr	r2, [pc, #592]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002cc0:	f023 0301 	bic.w	r3, r3, #1
 8002cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc6:	f7fe f819 	bl	8000cfc <HAL_GetTick>
 8002cca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cce:	f7fe f815 	bl	8000cfc <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e2ed      	b.n	80032bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ce0:	4b8b      	ldr	r3, [pc, #556]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1f0      	bne.n	8002cce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0310 	and.w	r3, r3, #16
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 80a9 	beq.w	8002e4c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cfa:	4b85      	ldr	r3, [pc, #532]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d02:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d04:	4b82      	ldr	r3, [pc, #520]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d08:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d007      	beq.n	8002d20 <HAL_RCC_OscConfig+0x308>
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	2b18      	cmp	r3, #24
 8002d14:	d13a      	bne.n	8002d8c <HAL_RCC_OscConfig+0x374>
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f003 0303 	and.w	r3, r3, #3
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d135      	bne.n	8002d8c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d20:	4b7b      	ldr	r3, [pc, #492]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_RCC_OscConfig+0x320>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	2b80      	cmp	r3, #128	@ 0x80
 8002d32:	d001      	beq.n	8002d38 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e2c1      	b.n	80032bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d38:	f7fd ffec 	bl	8000d14 <HAL_GetREVID>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d817      	bhi.n	8002d76 <HAL_RCC_OscConfig+0x35e>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	2b20      	cmp	r3, #32
 8002d4c:	d108      	bne.n	8002d60 <HAL_RCC_OscConfig+0x348>
 8002d4e:	4b70      	ldr	r3, [pc, #448]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002d56:	4a6e      	ldr	r2, [pc, #440]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002d58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002d5c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d5e:	e075      	b.n	8002e4c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d60:	4b6b      	ldr	r3, [pc, #428]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	069b      	lsls	r3, r3, #26
 8002d6e:	4968      	ldr	r1, [pc, #416]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d74:	e06a      	b.n	8002e4c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d76:	4b66      	ldr	r3, [pc, #408]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	061b      	lsls	r3, r3, #24
 8002d84:	4962      	ldr	r1, [pc, #392]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d8a:	e05f      	b.n	8002e4c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d042      	beq.n	8002e1a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d94:	4b5e      	ldr	r3, [pc, #376]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a5d      	ldr	r2, [pc, #372]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002d9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da0:	f7fd ffac 	bl	8000cfc <HAL_GetTick>
 8002da4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002da8:	f7fd ffa8 	bl	8000cfc <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e280      	b.n	80032bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002dba:	4b55      	ldr	r3, [pc, #340]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dc6:	f7fd ffa5 	bl	8000d14 <HAL_GetREVID>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d817      	bhi.n	8002e04 <HAL_RCC_OscConfig+0x3ec>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	2b20      	cmp	r3, #32
 8002dda:	d108      	bne.n	8002dee <HAL_RCC_OscConfig+0x3d6>
 8002ddc:	4b4c      	ldr	r3, [pc, #304]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002de4:	4a4a      	ldr	r2, [pc, #296]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002de6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002dea:	6053      	str	r3, [r2, #4]
 8002dec:	e02e      	b.n	8002e4c <HAL_RCC_OscConfig+0x434>
 8002dee:	4b48      	ldr	r3, [pc, #288]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	069b      	lsls	r3, r3, #26
 8002dfc:	4944      	ldr	r1, [pc, #272]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	604b      	str	r3, [r1, #4]
 8002e02:	e023      	b.n	8002e4c <HAL_RCC_OscConfig+0x434>
 8002e04:	4b42      	ldr	r3, [pc, #264]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	061b      	lsls	r3, r3, #24
 8002e12:	493f      	ldr	r1, [pc, #252]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60cb      	str	r3, [r1, #12]
 8002e18:	e018      	b.n	8002e4c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002e1a:	4b3d      	ldr	r3, [pc, #244]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a3c      	ldr	r2, [pc, #240]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002e20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e26:	f7fd ff69 	bl	8000cfc <HAL_GetTick>
 8002e2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e2e:	f7fd ff65 	bl	8000cfc <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e23d      	b.n	80032bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e40:	4b33      	ldr	r3, [pc, #204]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1f0      	bne.n	8002e2e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0308 	and.w	r3, r3, #8
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d036      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d019      	beq.n	8002e94 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e60:	4b2b      	ldr	r3, [pc, #172]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002e62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e64:	4a2a      	ldr	r2, [pc, #168]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6c:	f7fd ff46 	bl	8000cfc <HAL_GetTick>
 8002e70:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e74:	f7fd ff42 	bl	8000cfc <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e21a      	b.n	80032bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e86:	4b22      	ldr	r3, [pc, #136]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002e88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d0f0      	beq.n	8002e74 <HAL_RCC_OscConfig+0x45c>
 8002e92:	e018      	b.n	8002ec6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e94:	4b1e      	ldr	r3, [pc, #120]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002e96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e98:	4a1d      	ldr	r2, [pc, #116]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002e9a:	f023 0301 	bic.w	r3, r3, #1
 8002e9e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea0:	f7fd ff2c 	bl	8000cfc <HAL_GetTick>
 8002ea4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea8:	f7fd ff28 	bl	8000cfc <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e200      	b.n	80032bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002eba:	4b15      	ldr	r3, [pc, #84]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002ebc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f0      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0320 	and.w	r3, r3, #32
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d039      	beq.n	8002f46 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d01c      	beq.n	8002f14 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002eda:	4b0d      	ldr	r3, [pc, #52]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a0c      	ldr	r2, [pc, #48]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002ee0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ee4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ee6:	f7fd ff09 	bl	8000cfc <HAL_GetTick>
 8002eea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002eee:	f7fd ff05 	bl	8000cfc <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e1dd      	b.n	80032bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f00:	4b03      	ldr	r3, [pc, #12]	@ (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x4d6>
 8002f0c:	e01b      	b.n	8002f46 <HAL_RCC_OscConfig+0x52e>
 8002f0e:	bf00      	nop
 8002f10:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f14:	4b9b      	ldr	r3, [pc, #620]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a9a      	ldr	r2, [pc, #616]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8002f1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f1e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f20:	f7fd feec 	bl	8000cfc <HAL_GetTick>
 8002f24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f28:	f7fd fee8 	bl	8000cfc <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e1c0      	b.n	80032bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f3a:	4b92      	ldr	r3, [pc, #584]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f0      	bne.n	8002f28 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 8081 	beq.w	8003056 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f54:	4b8c      	ldr	r3, [pc, #560]	@ (8003188 <HAL_RCC_OscConfig+0x770>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a8b      	ldr	r2, [pc, #556]	@ (8003188 <HAL_RCC_OscConfig+0x770>)
 8002f5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f60:	f7fd fecc 	bl	8000cfc <HAL_GetTick>
 8002f64:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f68:	f7fd fec8 	bl	8000cfc <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	@ 0x64
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e1a0      	b.n	80032bc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f7a:	4b83      	ldr	r3, [pc, #524]	@ (8003188 <HAL_RCC_OscConfig+0x770>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d106      	bne.n	8002f9c <HAL_RCC_OscConfig+0x584>
 8002f8e:	4b7d      	ldr	r3, [pc, #500]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8002f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f92:	4a7c      	ldr	r2, [pc, #496]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f9a:	e02d      	b.n	8002ff8 <HAL_RCC_OscConfig+0x5e0>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10c      	bne.n	8002fbe <HAL_RCC_OscConfig+0x5a6>
 8002fa4:	4b77      	ldr	r3, [pc, #476]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8002fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa8:	4a76      	ldr	r2, [pc, #472]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8002faa:	f023 0301 	bic.w	r3, r3, #1
 8002fae:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fb0:	4b74      	ldr	r3, [pc, #464]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb4:	4a73      	ldr	r2, [pc, #460]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8002fb6:	f023 0304 	bic.w	r3, r3, #4
 8002fba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fbc:	e01c      	b.n	8002ff8 <HAL_RCC_OscConfig+0x5e0>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	2b05      	cmp	r3, #5
 8002fc4:	d10c      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x5c8>
 8002fc6:	4b6f      	ldr	r3, [pc, #444]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8002fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fca:	4a6e      	ldr	r2, [pc, #440]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8002fcc:	f043 0304 	orr.w	r3, r3, #4
 8002fd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd2:	4b6c      	ldr	r3, [pc, #432]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd6:	4a6b      	ldr	r2, [pc, #428]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fde:	e00b      	b.n	8002ff8 <HAL_RCC_OscConfig+0x5e0>
 8002fe0:	4b68      	ldr	r3, [pc, #416]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8002fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe4:	4a67      	ldr	r2, [pc, #412]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8002fe6:	f023 0301 	bic.w	r3, r3, #1
 8002fea:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fec:	4b65      	ldr	r3, [pc, #404]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8002fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff0:	4a64      	ldr	r2, [pc, #400]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8002ff2:	f023 0304 	bic.w	r3, r3, #4
 8002ff6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d015      	beq.n	800302c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003000:	f7fd fe7c 	bl	8000cfc <HAL_GetTick>
 8003004:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003006:	e00a      	b.n	800301e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003008:	f7fd fe78 	bl	8000cfc <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e14e      	b.n	80032bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800301e:	4b59      	ldr	r3, [pc, #356]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0ee      	beq.n	8003008 <HAL_RCC_OscConfig+0x5f0>
 800302a:	e014      	b.n	8003056 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302c:	f7fd fe66 	bl	8000cfc <HAL_GetTick>
 8003030:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003032:	e00a      	b.n	800304a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003034:	f7fd fe62 	bl	8000cfc <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003042:	4293      	cmp	r3, r2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e138      	b.n	80032bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800304a:	4b4e      	ldr	r3, [pc, #312]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 800304c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1ee      	bne.n	8003034 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 812d 	beq.w	80032ba <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003060:	4b48      	ldr	r3, [pc, #288]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003068:	2b18      	cmp	r3, #24
 800306a:	f000 80bd 	beq.w	80031e8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003072:	2b02      	cmp	r3, #2
 8003074:	f040 809e 	bne.w	80031b4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003078:	4b42      	ldr	r3, [pc, #264]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a41      	ldr	r2, [pc, #260]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 800307e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003084:	f7fd fe3a 	bl	8000cfc <HAL_GetTick>
 8003088:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800308c:	f7fd fe36 	bl	8000cfc <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e10e      	b.n	80032bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800309e:	4b39      	ldr	r3, [pc, #228]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030aa:	4b36      	ldr	r3, [pc, #216]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 80030ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030ae:	4b37      	ldr	r3, [pc, #220]	@ (800318c <HAL_RCC_OscConfig+0x774>)
 80030b0:	4013      	ands	r3, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80030ba:	0112      	lsls	r2, r2, #4
 80030bc:	430a      	orrs	r2, r1
 80030be:	4931      	ldr	r1, [pc, #196]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c8:	3b01      	subs	r3, #1
 80030ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030d2:	3b01      	subs	r3, #1
 80030d4:	025b      	lsls	r3, r3, #9
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	431a      	orrs	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030de:	3b01      	subs	r3, #1
 80030e0:	041b      	lsls	r3, r3, #16
 80030e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ec:	3b01      	subs	r3, #1
 80030ee:	061b      	lsls	r3, r3, #24
 80030f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80030f4:	4923      	ldr	r1, [pc, #140]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80030fa:	4b22      	ldr	r3, [pc, #136]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 80030fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fe:	4a21      	ldr	r2, [pc, #132]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8003100:	f023 0301 	bic.w	r3, r3, #1
 8003104:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003106:	4b1f      	ldr	r3, [pc, #124]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8003108:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800310a:	4b21      	ldr	r3, [pc, #132]	@ (8003190 <HAL_RCC_OscConfig+0x778>)
 800310c:	4013      	ands	r3, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003112:	00d2      	lsls	r2, r2, #3
 8003114:	491b      	ldr	r1, [pc, #108]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8003116:	4313      	orrs	r3, r2
 8003118:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800311a:	4b1a      	ldr	r3, [pc, #104]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 800311c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311e:	f023 020c 	bic.w	r2, r3, #12
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	4917      	ldr	r1, [pc, #92]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8003128:	4313      	orrs	r3, r2
 800312a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800312c:	4b15      	ldr	r3, [pc, #84]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 800312e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003130:	f023 0202 	bic.w	r2, r3, #2
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003138:	4912      	ldr	r1, [pc, #72]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 800313a:	4313      	orrs	r3, r2
 800313c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800313e:	4b11      	ldr	r3, [pc, #68]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8003140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003142:	4a10      	ldr	r2, [pc, #64]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8003144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003148:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800314a:	4b0e      	ldr	r3, [pc, #56]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 800314c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314e:	4a0d      	ldr	r2, [pc, #52]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8003150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003154:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003156:	4b0b      	ldr	r3, [pc, #44]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8003158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315a:	4a0a      	ldr	r2, [pc, #40]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 800315c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003160:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003162:	4b08      	ldr	r3, [pc, #32]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8003164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003166:	4a07      	ldr	r2, [pc, #28]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800316e:	4b05      	ldr	r3, [pc, #20]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a04      	ldr	r2, [pc, #16]	@ (8003184 <HAL_RCC_OscConfig+0x76c>)
 8003174:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003178:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317a:	f7fd fdbf 	bl	8000cfc <HAL_GetTick>
 800317e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003180:	e011      	b.n	80031a6 <HAL_RCC_OscConfig+0x78e>
 8003182:	bf00      	nop
 8003184:	58024400 	.word	0x58024400
 8003188:	58024800 	.word	0x58024800
 800318c:	fffffc0c 	.word	0xfffffc0c
 8003190:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003194:	f7fd fdb2 	bl	8000cfc <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e08a      	b.n	80032bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031a6:	4b47      	ldr	r3, [pc, #284]	@ (80032c4 <HAL_RCC_OscConfig+0x8ac>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0f0      	beq.n	8003194 <HAL_RCC_OscConfig+0x77c>
 80031b2:	e082      	b.n	80032ba <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b4:	4b43      	ldr	r3, [pc, #268]	@ (80032c4 <HAL_RCC_OscConfig+0x8ac>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a42      	ldr	r2, [pc, #264]	@ (80032c4 <HAL_RCC_OscConfig+0x8ac>)
 80031ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fd fd9c 	bl	8000cfc <HAL_GetTick>
 80031c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c8:	f7fd fd98 	bl	8000cfc <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e070      	b.n	80032bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031da:	4b3a      	ldr	r3, [pc, #232]	@ (80032c4 <HAL_RCC_OscConfig+0x8ac>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f0      	bne.n	80031c8 <HAL_RCC_OscConfig+0x7b0>
 80031e6:	e068      	b.n	80032ba <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80031e8:	4b36      	ldr	r3, [pc, #216]	@ (80032c4 <HAL_RCC_OscConfig+0x8ac>)
 80031ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80031ee:	4b35      	ldr	r3, [pc, #212]	@ (80032c4 <HAL_RCC_OscConfig+0x8ac>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d031      	beq.n	8003260 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f003 0203 	and.w	r2, r3, #3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003206:	429a      	cmp	r2, r3
 8003208:	d12a      	bne.n	8003260 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	091b      	lsrs	r3, r3, #4
 800320e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003216:	429a      	cmp	r2, r3
 8003218:	d122      	bne.n	8003260 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003224:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003226:	429a      	cmp	r2, r3
 8003228:	d11a      	bne.n	8003260 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	0a5b      	lsrs	r3, r3, #9
 800322e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003236:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003238:	429a      	cmp	r2, r3
 800323a:	d111      	bne.n	8003260 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	0c1b      	lsrs	r3, r3, #16
 8003240:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003248:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800324a:	429a      	cmp	r2, r3
 800324c:	d108      	bne.n	8003260 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	0e1b      	lsrs	r3, r3, #24
 8003252:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800325a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800325c:	429a      	cmp	r2, r3
 800325e:	d001      	beq.n	8003264 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e02b      	b.n	80032bc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003264:	4b17      	ldr	r3, [pc, #92]	@ (80032c4 <HAL_RCC_OscConfig+0x8ac>)
 8003266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003268:	08db      	lsrs	r3, r3, #3
 800326a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800326e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	429a      	cmp	r2, r3
 8003278:	d01f      	beq.n	80032ba <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800327a:	4b12      	ldr	r3, [pc, #72]	@ (80032c4 <HAL_RCC_OscConfig+0x8ac>)
 800327c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327e:	4a11      	ldr	r2, [pc, #68]	@ (80032c4 <HAL_RCC_OscConfig+0x8ac>)
 8003280:	f023 0301 	bic.w	r3, r3, #1
 8003284:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003286:	f7fd fd39 	bl	8000cfc <HAL_GetTick>
 800328a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800328c:	bf00      	nop
 800328e:	f7fd fd35 	bl	8000cfc <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003296:	4293      	cmp	r3, r2
 8003298:	d0f9      	beq.n	800328e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800329a:	4b0a      	ldr	r3, [pc, #40]	@ (80032c4 <HAL_RCC_OscConfig+0x8ac>)
 800329c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800329e:	4b0a      	ldr	r3, [pc, #40]	@ (80032c8 <HAL_RCC_OscConfig+0x8b0>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80032a6:	00d2      	lsls	r2, r2, #3
 80032a8:	4906      	ldr	r1, [pc, #24]	@ (80032c4 <HAL_RCC_OscConfig+0x8ac>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80032ae:	4b05      	ldr	r3, [pc, #20]	@ (80032c4 <HAL_RCC_OscConfig+0x8ac>)
 80032b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b2:	4a04      	ldr	r2, [pc, #16]	@ (80032c4 <HAL_RCC_OscConfig+0x8ac>)
 80032b4:	f043 0301 	orr.w	r3, r3, #1
 80032b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3730      	adds	r7, #48	@ 0x30
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	58024400 	.word	0x58024400
 80032c8:	ffff0007 	.word	0xffff0007

080032cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e19c      	b.n	800361a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032e0:	4b8a      	ldr	r3, [pc, #552]	@ (800350c <HAL_RCC_ClockConfig+0x240>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 030f 	and.w	r3, r3, #15
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d910      	bls.n	8003310 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ee:	4b87      	ldr	r3, [pc, #540]	@ (800350c <HAL_RCC_ClockConfig+0x240>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f023 020f 	bic.w	r2, r3, #15
 80032f6:	4985      	ldr	r1, [pc, #532]	@ (800350c <HAL_RCC_ClockConfig+0x240>)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fe:	4b83      	ldr	r3, [pc, #524]	@ (800350c <HAL_RCC_ClockConfig+0x240>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d001      	beq.n	8003310 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e184      	b.n	800361a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d010      	beq.n	800333e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	4b7b      	ldr	r3, [pc, #492]	@ (8003510 <HAL_RCC_ClockConfig+0x244>)
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003328:	429a      	cmp	r2, r3
 800332a:	d908      	bls.n	800333e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800332c:	4b78      	ldr	r3, [pc, #480]	@ (8003510 <HAL_RCC_ClockConfig+0x244>)
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	4975      	ldr	r1, [pc, #468]	@ (8003510 <HAL_RCC_ClockConfig+0x244>)
 800333a:	4313      	orrs	r3, r2
 800333c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d010      	beq.n	800336c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695a      	ldr	r2, [r3, #20]
 800334e:	4b70      	ldr	r3, [pc, #448]	@ (8003510 <HAL_RCC_ClockConfig+0x244>)
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003356:	429a      	cmp	r2, r3
 8003358:	d908      	bls.n	800336c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800335a:	4b6d      	ldr	r3, [pc, #436]	@ (8003510 <HAL_RCC_ClockConfig+0x244>)
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	496a      	ldr	r1, [pc, #424]	@ (8003510 <HAL_RCC_ClockConfig+0x244>)
 8003368:	4313      	orrs	r3, r2
 800336a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	2b00      	cmp	r3, #0
 8003376:	d010      	beq.n	800339a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699a      	ldr	r2, [r3, #24]
 800337c:	4b64      	ldr	r3, [pc, #400]	@ (8003510 <HAL_RCC_ClockConfig+0x244>)
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003384:	429a      	cmp	r2, r3
 8003386:	d908      	bls.n	800339a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003388:	4b61      	ldr	r3, [pc, #388]	@ (8003510 <HAL_RCC_ClockConfig+0x244>)
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	495e      	ldr	r1, [pc, #376]	@ (8003510 <HAL_RCC_ClockConfig+0x244>)
 8003396:	4313      	orrs	r3, r2
 8003398:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0320 	and.w	r3, r3, #32
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d010      	beq.n	80033c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69da      	ldr	r2, [r3, #28]
 80033aa:	4b59      	ldr	r3, [pc, #356]	@ (8003510 <HAL_RCC_ClockConfig+0x244>)
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d908      	bls.n	80033c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80033b6:	4b56      	ldr	r3, [pc, #344]	@ (8003510 <HAL_RCC_ClockConfig+0x244>)
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	4953      	ldr	r1, [pc, #332]	@ (8003510 <HAL_RCC_ClockConfig+0x244>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d010      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	4b4d      	ldr	r3, [pc, #308]	@ (8003510 <HAL_RCC_ClockConfig+0x244>)
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	f003 030f 	and.w	r3, r3, #15
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d908      	bls.n	80033f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e4:	4b4a      	ldr	r3, [pc, #296]	@ (8003510 <HAL_RCC_ClockConfig+0x244>)
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	f023 020f 	bic.w	r2, r3, #15
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	4947      	ldr	r1, [pc, #284]	@ (8003510 <HAL_RCC_ClockConfig+0x244>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d055      	beq.n	80034ae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003402:	4b43      	ldr	r3, [pc, #268]	@ (8003510 <HAL_RCC_ClockConfig+0x244>)
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	4940      	ldr	r1, [pc, #256]	@ (8003510 <HAL_RCC_ClockConfig+0x244>)
 8003410:	4313      	orrs	r3, r2
 8003412:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b02      	cmp	r3, #2
 800341a:	d107      	bne.n	800342c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800341c:	4b3c      	ldr	r3, [pc, #240]	@ (8003510 <HAL_RCC_ClockConfig+0x244>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d121      	bne.n	800346c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0f6      	b.n	800361a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b03      	cmp	r3, #3
 8003432:	d107      	bne.n	8003444 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003434:	4b36      	ldr	r3, [pc, #216]	@ (8003510 <HAL_RCC_ClockConfig+0x244>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d115      	bne.n	800346c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0ea      	b.n	800361a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d107      	bne.n	800345c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800344c:	4b30      	ldr	r3, [pc, #192]	@ (8003510 <HAL_RCC_ClockConfig+0x244>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003454:	2b00      	cmp	r3, #0
 8003456:	d109      	bne.n	800346c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e0de      	b.n	800361a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800345c:	4b2c      	ldr	r3, [pc, #176]	@ (8003510 <HAL_RCC_ClockConfig+0x244>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e0d6      	b.n	800361a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800346c:	4b28      	ldr	r3, [pc, #160]	@ (8003510 <HAL_RCC_ClockConfig+0x244>)
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	f023 0207 	bic.w	r2, r3, #7
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	4925      	ldr	r1, [pc, #148]	@ (8003510 <HAL_RCC_ClockConfig+0x244>)
 800347a:	4313      	orrs	r3, r2
 800347c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800347e:	f7fd fc3d 	bl	8000cfc <HAL_GetTick>
 8003482:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003484:	e00a      	b.n	800349c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003486:	f7fd fc39 	bl	8000cfc <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003494:	4293      	cmp	r3, r2
 8003496:	d901      	bls.n	800349c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e0be      	b.n	800361a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349c:	4b1c      	ldr	r3, [pc, #112]	@ (8003510 <HAL_RCC_ClockConfig+0x244>)
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d1eb      	bne.n	8003486 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d010      	beq.n	80034dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	4b14      	ldr	r3, [pc, #80]	@ (8003510 <HAL_RCC_ClockConfig+0x244>)
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d208      	bcs.n	80034dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ca:	4b11      	ldr	r3, [pc, #68]	@ (8003510 <HAL_RCC_ClockConfig+0x244>)
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	f023 020f 	bic.w	r2, r3, #15
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	490e      	ldr	r1, [pc, #56]	@ (8003510 <HAL_RCC_ClockConfig+0x244>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034dc:	4b0b      	ldr	r3, [pc, #44]	@ (800350c <HAL_RCC_ClockConfig+0x240>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 030f 	and.w	r3, r3, #15
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d214      	bcs.n	8003514 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ea:	4b08      	ldr	r3, [pc, #32]	@ (800350c <HAL_RCC_ClockConfig+0x240>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f023 020f 	bic.w	r2, r3, #15
 80034f2:	4906      	ldr	r1, [pc, #24]	@ (800350c <HAL_RCC_ClockConfig+0x240>)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fa:	4b04      	ldr	r3, [pc, #16]	@ (800350c <HAL_RCC_ClockConfig+0x240>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d005      	beq.n	8003514 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e086      	b.n	800361a <HAL_RCC_ClockConfig+0x34e>
 800350c:	52002000 	.word	0x52002000
 8003510:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d010      	beq.n	8003542 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	4b3f      	ldr	r3, [pc, #252]	@ (8003624 <HAL_RCC_ClockConfig+0x358>)
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800352c:	429a      	cmp	r2, r3
 800352e:	d208      	bcs.n	8003542 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003530:	4b3c      	ldr	r3, [pc, #240]	@ (8003624 <HAL_RCC_ClockConfig+0x358>)
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	4939      	ldr	r1, [pc, #228]	@ (8003624 <HAL_RCC_ClockConfig+0x358>)
 800353e:	4313      	orrs	r3, r2
 8003540:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b00      	cmp	r3, #0
 800354c:	d010      	beq.n	8003570 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695a      	ldr	r2, [r3, #20]
 8003552:	4b34      	ldr	r3, [pc, #208]	@ (8003624 <HAL_RCC_ClockConfig+0x358>)
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800355a:	429a      	cmp	r2, r3
 800355c:	d208      	bcs.n	8003570 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800355e:	4b31      	ldr	r3, [pc, #196]	@ (8003624 <HAL_RCC_ClockConfig+0x358>)
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	492e      	ldr	r1, [pc, #184]	@ (8003624 <HAL_RCC_ClockConfig+0x358>)
 800356c:	4313      	orrs	r3, r2
 800356e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0310 	and.w	r3, r3, #16
 8003578:	2b00      	cmp	r3, #0
 800357a:	d010      	beq.n	800359e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699a      	ldr	r2, [r3, #24]
 8003580:	4b28      	ldr	r3, [pc, #160]	@ (8003624 <HAL_RCC_ClockConfig+0x358>)
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003588:	429a      	cmp	r2, r3
 800358a:	d208      	bcs.n	800359e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800358c:	4b25      	ldr	r3, [pc, #148]	@ (8003624 <HAL_RCC_ClockConfig+0x358>)
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	4922      	ldr	r1, [pc, #136]	@ (8003624 <HAL_RCC_ClockConfig+0x358>)
 800359a:	4313      	orrs	r3, r2
 800359c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d010      	beq.n	80035cc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69da      	ldr	r2, [r3, #28]
 80035ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003624 <HAL_RCC_ClockConfig+0x358>)
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d208      	bcs.n	80035cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80035ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003624 <HAL_RCC_ClockConfig+0x358>)
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	4917      	ldr	r1, [pc, #92]	@ (8003624 <HAL_RCC_ClockConfig+0x358>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80035cc:	f000 f834 	bl	8003638 <HAL_RCC_GetSysClockFreq>
 80035d0:	4602      	mov	r2, r0
 80035d2:	4b14      	ldr	r3, [pc, #80]	@ (8003624 <HAL_RCC_ClockConfig+0x358>)
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	0a1b      	lsrs	r3, r3, #8
 80035d8:	f003 030f 	and.w	r3, r3, #15
 80035dc:	4912      	ldr	r1, [pc, #72]	@ (8003628 <HAL_RCC_ClockConfig+0x35c>)
 80035de:	5ccb      	ldrb	r3, [r1, r3]
 80035e0:	f003 031f 	and.w	r3, r3, #31
 80035e4:	fa22 f303 	lsr.w	r3, r2, r3
 80035e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003624 <HAL_RCC_ClockConfig+0x358>)
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	4a0d      	ldr	r2, [pc, #52]	@ (8003628 <HAL_RCC_ClockConfig+0x35c>)
 80035f4:	5cd3      	ldrb	r3, [r2, r3]
 80035f6:	f003 031f 	and.w	r3, r3, #31
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003600:	4a0a      	ldr	r2, [pc, #40]	@ (800362c <HAL_RCC_ClockConfig+0x360>)
 8003602:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003604:	4a0a      	ldr	r2, [pc, #40]	@ (8003630 <HAL_RCC_ClockConfig+0x364>)
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800360a:	4b0a      	ldr	r3, [pc, #40]	@ (8003634 <HAL_RCC_ClockConfig+0x368>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f7fd fb2a 	bl	8000c68 <HAL_InitTick>
 8003614:	4603      	mov	r3, r0
 8003616:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003618:	7bfb      	ldrb	r3, [r7, #15]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	58024400 	.word	0x58024400
 8003628:	0800827c 	.word	0x0800827c
 800362c:	24000004 	.word	0x24000004
 8003630:	24000000 	.word	0x24000000
 8003634:	24000008 	.word	0x24000008

08003638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003638:	b480      	push	{r7}
 800363a:	b089      	sub	sp, #36	@ 0x24
 800363c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800363e:	4bb3      	ldr	r3, [pc, #716]	@ (800390c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003646:	2b18      	cmp	r3, #24
 8003648:	f200 8155 	bhi.w	80038f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800364c:	a201      	add	r2, pc, #4	@ (adr r2, 8003654 <HAL_RCC_GetSysClockFreq+0x1c>)
 800364e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003652:	bf00      	nop
 8003654:	080036b9 	.word	0x080036b9
 8003658:	080038f7 	.word	0x080038f7
 800365c:	080038f7 	.word	0x080038f7
 8003660:	080038f7 	.word	0x080038f7
 8003664:	080038f7 	.word	0x080038f7
 8003668:	080038f7 	.word	0x080038f7
 800366c:	080038f7 	.word	0x080038f7
 8003670:	080038f7 	.word	0x080038f7
 8003674:	080036df 	.word	0x080036df
 8003678:	080038f7 	.word	0x080038f7
 800367c:	080038f7 	.word	0x080038f7
 8003680:	080038f7 	.word	0x080038f7
 8003684:	080038f7 	.word	0x080038f7
 8003688:	080038f7 	.word	0x080038f7
 800368c:	080038f7 	.word	0x080038f7
 8003690:	080038f7 	.word	0x080038f7
 8003694:	080036e5 	.word	0x080036e5
 8003698:	080038f7 	.word	0x080038f7
 800369c:	080038f7 	.word	0x080038f7
 80036a0:	080038f7 	.word	0x080038f7
 80036a4:	080038f7 	.word	0x080038f7
 80036a8:	080038f7 	.word	0x080038f7
 80036ac:	080038f7 	.word	0x080038f7
 80036b0:	080038f7 	.word	0x080038f7
 80036b4:	080036eb 	.word	0x080036eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036b8:	4b94      	ldr	r3, [pc, #592]	@ (800390c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d009      	beq.n	80036d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80036c4:	4b91      	ldr	r3, [pc, #580]	@ (800390c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	08db      	lsrs	r3, r3, #3
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	4a90      	ldr	r2, [pc, #576]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036d0:	fa22 f303 	lsr.w	r3, r2, r3
 80036d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80036d6:	e111      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80036d8:	4b8d      	ldr	r3, [pc, #564]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036da:	61bb      	str	r3, [r7, #24]
      break;
 80036dc:	e10e      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80036de:	4b8d      	ldr	r3, [pc, #564]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036e0:	61bb      	str	r3, [r7, #24]
      break;
 80036e2:	e10b      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80036e4:	4b8c      	ldr	r3, [pc, #560]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80036e6:	61bb      	str	r3, [r7, #24]
      break;
 80036e8:	e108      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036ea:	4b88      	ldr	r3, [pc, #544]	@ (800390c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80036f4:	4b85      	ldr	r3, [pc, #532]	@ (800390c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f8:	091b      	lsrs	r3, r3, #4
 80036fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003700:	4b82      	ldr	r3, [pc, #520]	@ (800390c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800370a:	4b80      	ldr	r3, [pc, #512]	@ (800390c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800370c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800370e:	08db      	lsrs	r3, r3, #3
 8003710:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	fb02 f303 	mul.w	r3, r2, r3
 800371a:	ee07 3a90 	vmov	s15, r3
 800371e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003722:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 80e1 	beq.w	80038f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2b02      	cmp	r3, #2
 8003732:	f000 8083 	beq.w	800383c <HAL_RCC_GetSysClockFreq+0x204>
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2b02      	cmp	r3, #2
 800373a:	f200 80a1 	bhi.w	8003880 <HAL_RCC_GetSysClockFreq+0x248>
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x114>
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d056      	beq.n	80037f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800374a:	e099      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800374c:	4b6f      	ldr	r3, [pc, #444]	@ (800390c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0320 	and.w	r3, r3, #32
 8003754:	2b00      	cmp	r3, #0
 8003756:	d02d      	beq.n	80037b4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003758:	4b6c      	ldr	r3, [pc, #432]	@ (800390c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	08db      	lsrs	r3, r3, #3
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	4a6b      	ldr	r2, [pc, #428]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003764:	fa22 f303 	lsr.w	r3, r2, r3
 8003768:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	ee07 3a90 	vmov	s15, r3
 8003770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	ee07 3a90 	vmov	s15, r3
 800377a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800377e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003782:	4b62      	ldr	r3, [pc, #392]	@ (800390c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800378a:	ee07 3a90 	vmov	s15, r3
 800378e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003792:	ed97 6a02 	vldr	s12, [r7, #8]
 8003796:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800391c <HAL_RCC_GetSysClockFreq+0x2e4>
 800379a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800379e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80037b2:	e087      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	ee07 3a90 	vmov	s15, r3
 80037ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037be:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003920 <HAL_RCC_GetSysClockFreq+0x2e8>
 80037c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037c6:	4b51      	ldr	r3, [pc, #324]	@ (800390c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ce:	ee07 3a90 	vmov	s15, r3
 80037d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80037da:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800391c <HAL_RCC_GetSysClockFreq+0x2e4>
 80037de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037f6:	e065      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	ee07 3a90 	vmov	s15, r3
 80037fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003802:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003924 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800380a:	4b40      	ldr	r3, [pc, #256]	@ (800390c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003812:	ee07 3a90 	vmov	s15, r3
 8003816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800381a:	ed97 6a02 	vldr	s12, [r7, #8]
 800381e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800391c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800382a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800382e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003836:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800383a:	e043      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	ee07 3a90 	vmov	s15, r3
 8003842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003846:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003928 <HAL_RCC_GetSysClockFreq+0x2f0>
 800384a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800384e:	4b2f      	ldr	r3, [pc, #188]	@ (800390c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003856:	ee07 3a90 	vmov	s15, r3
 800385a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800385e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003862:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800391c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800386a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800386e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800387a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800387e:	e021      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	ee07 3a90 	vmov	s15, r3
 8003886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800388a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003924 <HAL_RCC_GetSysClockFreq+0x2ec>
 800388e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003892:	4b1e      	ldr	r3, [pc, #120]	@ (800390c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800389a:	ee07 3a90 	vmov	s15, r3
 800389e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80038a6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800391c <HAL_RCC_GetSysClockFreq+0x2e4>
 80038aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038c2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80038c4:	4b11      	ldr	r3, [pc, #68]	@ (800390c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c8:	0a5b      	lsrs	r3, r3, #9
 80038ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038ce:	3301      	adds	r3, #1
 80038d0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	ee07 3a90 	vmov	s15, r3
 80038d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80038e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038e8:	ee17 3a90 	vmov	r3, s15
 80038ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80038ee:	e005      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	61bb      	str	r3, [r7, #24]
      break;
 80038f4:	e002      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80038f6:	4b07      	ldr	r3, [pc, #28]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038f8:	61bb      	str	r3, [r7, #24]
      break;
 80038fa:	bf00      	nop
  }

  return sysclockfreq;
 80038fc:	69bb      	ldr	r3, [r7, #24]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3724      	adds	r7, #36	@ 0x24
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	58024400 	.word	0x58024400
 8003910:	03d09000 	.word	0x03d09000
 8003914:	003d0900 	.word	0x003d0900
 8003918:	017d7840 	.word	0x017d7840
 800391c:	46000000 	.word	0x46000000
 8003920:	4c742400 	.word	0x4c742400
 8003924:	4a742400 	.word	0x4a742400
 8003928:	4bbebc20 	.word	0x4bbebc20

0800392c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003932:	f7ff fe81 	bl	8003638 <HAL_RCC_GetSysClockFreq>
 8003936:	4602      	mov	r2, r0
 8003938:	4b10      	ldr	r3, [pc, #64]	@ (800397c <HAL_RCC_GetHCLKFreq+0x50>)
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	0a1b      	lsrs	r3, r3, #8
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	490f      	ldr	r1, [pc, #60]	@ (8003980 <HAL_RCC_GetHCLKFreq+0x54>)
 8003944:	5ccb      	ldrb	r3, [r1, r3]
 8003946:	f003 031f 	and.w	r3, r3, #31
 800394a:	fa22 f303 	lsr.w	r3, r2, r3
 800394e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003950:	4b0a      	ldr	r3, [pc, #40]	@ (800397c <HAL_RCC_GetHCLKFreq+0x50>)
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	f003 030f 	and.w	r3, r3, #15
 8003958:	4a09      	ldr	r2, [pc, #36]	@ (8003980 <HAL_RCC_GetHCLKFreq+0x54>)
 800395a:	5cd3      	ldrb	r3, [r2, r3]
 800395c:	f003 031f 	and.w	r3, r3, #31
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	fa22 f303 	lsr.w	r3, r2, r3
 8003966:	4a07      	ldr	r2, [pc, #28]	@ (8003984 <HAL_RCC_GetHCLKFreq+0x58>)
 8003968:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800396a:	4a07      	ldr	r2, [pc, #28]	@ (8003988 <HAL_RCC_GetHCLKFreq+0x5c>)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003970:	4b04      	ldr	r3, [pc, #16]	@ (8003984 <HAL_RCC_GetHCLKFreq+0x58>)
 8003972:	681b      	ldr	r3, [r3, #0]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	58024400 	.word	0x58024400
 8003980:	0800827c 	.word	0x0800827c
 8003984:	24000004 	.word	0x24000004
 8003988:	24000000 	.word	0x24000000

0800398c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003990:	f7ff ffcc 	bl	800392c <HAL_RCC_GetHCLKFreq>
 8003994:	4602      	mov	r2, r0
 8003996:	4b06      	ldr	r3, [pc, #24]	@ (80039b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	091b      	lsrs	r3, r3, #4
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	4904      	ldr	r1, [pc, #16]	@ (80039b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039a2:	5ccb      	ldrb	r3, [r1, r3]
 80039a4:	f003 031f 	and.w	r3, r3, #31
 80039a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	58024400 	.word	0x58024400
 80039b4:	0800827c 	.word	0x0800827c

080039b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039bc:	b0cc      	sub	sp, #304	@ 0x130
 80039be:	af00      	add	r7, sp, #0
 80039c0:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039c4:	2300      	movs	r3, #0
 80039c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039ca:	2300      	movs	r3, #0
 80039cc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80039dc:	2500      	movs	r5, #0
 80039de:	ea54 0305 	orrs.w	r3, r4, r5
 80039e2:	d049      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80039e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80039ee:	d02f      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80039f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80039f4:	d828      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80039f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039fa:	d01a      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80039fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a00:	d822      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003a06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a0a:	d007      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a0c:	e01c      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a0e:	4bb8      	ldr	r3, [pc, #736]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a12:	4ab7      	ldr	r2, [pc, #732]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a1a:	e01a      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a20:	3308      	adds	r3, #8
 8003a22:	2102      	movs	r1, #2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f002 fba1 	bl	800616c <RCCEx_PLL2_Config>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a30:	e00f      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a36:	3328      	adds	r3, #40	@ 0x28
 8003a38:	2102      	movs	r1, #2
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f002 fc48 	bl	80062d0 <RCCEx_PLL3_Config>
 8003a40:	4603      	mov	r3, r0
 8003a42:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a46:	e004      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003a4e:	e000      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003a50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a52:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10a      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a5a:	4ba5      	ldr	r3, [pc, #660]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a5e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003a62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a68:	4aa1      	ldr	r2, [pc, #644]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a6e:	e003      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a70:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a74:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a80:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003a84:	f04f 0900 	mov.w	r9, #0
 8003a88:	ea58 0309 	orrs.w	r3, r8, r9
 8003a8c:	d047      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003a8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a94:	2b04      	cmp	r3, #4
 8003a96:	d82a      	bhi.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003a98:	a201      	add	r2, pc, #4	@ (adr r2, 8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9e:	bf00      	nop
 8003aa0:	08003ab5 	.word	0x08003ab5
 8003aa4:	08003ac3 	.word	0x08003ac3
 8003aa8:	08003ad9 	.word	0x08003ad9
 8003aac:	08003af7 	.word	0x08003af7
 8003ab0:	08003af7 	.word	0x08003af7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ab4:	4b8e      	ldr	r3, [pc, #568]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab8:	4a8d      	ldr	r2, [pc, #564]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003aba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003abe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ac0:	e01a      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ac2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ac6:	3308      	adds	r3, #8
 8003ac8:	2100      	movs	r1, #0
 8003aca:	4618      	mov	r0, r3
 8003acc:	f002 fb4e 	bl	800616c <RCCEx_PLL2_Config>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ad6:	e00f      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ad8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003adc:	3328      	adds	r3, #40	@ 0x28
 8003ade:	2100      	movs	r1, #0
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f002 fbf5 	bl	80062d0 <RCCEx_PLL3_Config>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003aec:	e004      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003af4:	e000      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003af6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003af8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10a      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b00:	4b7b      	ldr	r3, [pc, #492]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b04:	f023 0107 	bic.w	r1, r3, #7
 8003b08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b0e:	4a78      	ldr	r2, [pc, #480]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b10:	430b      	orrs	r3, r1
 8003b12:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b14:	e003      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b16:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b1a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003b1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b26:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003b2a:	f04f 0b00 	mov.w	fp, #0
 8003b2e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003b32:	d04c      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003b34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b3e:	d030      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003b40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b44:	d829      	bhi.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b46:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b48:	d02d      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b4c:	d825      	bhi.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b4e:	2b80      	cmp	r3, #128	@ 0x80
 8003b50:	d018      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003b52:	2b80      	cmp	r3, #128	@ 0x80
 8003b54:	d821      	bhi.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003b5a:	2b40      	cmp	r3, #64	@ 0x40
 8003b5c:	d007      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003b5e:	e01c      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b60:	4b63      	ldr	r3, [pc, #396]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b64:	4a62      	ldr	r2, [pc, #392]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b6c:	e01c      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b72:	3308      	adds	r3, #8
 8003b74:	2100      	movs	r1, #0
 8003b76:	4618      	mov	r0, r3
 8003b78:	f002 faf8 	bl	800616c <RCCEx_PLL2_Config>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b82:	e011      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b88:	3328      	adds	r3, #40	@ 0x28
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f002 fb9f 	bl	80062d0 <RCCEx_PLL3_Config>
 8003b92:	4603      	mov	r3, r0
 8003b94:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b98:	e006      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003ba0:	e002      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003ba2:	bf00      	nop
 8003ba4:	e000      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003ba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ba8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10a      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003bb0:	4b4f      	ldr	r3, [pc, #316]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bb4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003bb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bbe:	4a4c      	ldr	r2, [pc, #304]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003bc4:	e003      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003bca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003bce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003bda:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003bde:	2300      	movs	r3, #0
 8003be0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003be4:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8003be8:	460b      	mov	r3, r1
 8003bea:	4313      	orrs	r3, r2
 8003bec:	d053      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003bee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bf2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003bf6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bfa:	d035      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003bfc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c00:	d82e      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c02:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003c06:	d031      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003c08:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003c0c:	d828      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c12:	d01a      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003c14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c18:	d822      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003c1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c22:	d007      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003c24:	e01c      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c26:	4b32      	ldr	r3, [pc, #200]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2a:	4a31      	ldr	r2, [pc, #196]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c32:	e01c      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c38:	3308      	adds	r3, #8
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f002 fa95 	bl	800616c <RCCEx_PLL2_Config>
 8003c42:	4603      	mov	r3, r0
 8003c44:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003c48:	e011      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c4e:	3328      	adds	r3, #40	@ 0x28
 8003c50:	2100      	movs	r1, #0
 8003c52:	4618      	mov	r0, r3
 8003c54:	f002 fb3c 	bl	80062d0 <RCCEx_PLL3_Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c5e:	e006      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003c66:	e002      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003c68:	bf00      	nop
 8003c6a:	e000      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003c6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c6e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10b      	bne.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003c76:	4b1e      	ldr	r3, [pc, #120]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003c7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003c86:	4a1a      	ldr	r2, [pc, #104]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c88:	430b      	orrs	r3, r1
 8003c8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c8c:	e003      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c8e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c92:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003c96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003ca2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003cac:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	d056      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003cb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003cbe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003cc2:	d038      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003cc4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003cc8:	d831      	bhi.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003cca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003cce:	d034      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003cd0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003cd4:	d82b      	bhi.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003cd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cda:	d01d      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003cdc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ce0:	d825      	bhi.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d006      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003ce6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cea:	d00a      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003cec:	e01f      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003cee:	bf00      	nop
 8003cf0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cf4:	4ba2      	ldr	r3, [pc, #648]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf8:	4aa1      	ldr	r2, [pc, #644]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d00:	e01c      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d06:	3308      	adds	r3, #8
 8003d08:	2100      	movs	r1, #0
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f002 fa2e 	bl	800616c <RCCEx_PLL2_Config>
 8003d10:	4603      	mov	r3, r0
 8003d12:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003d16:	e011      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d1c:	3328      	adds	r3, #40	@ 0x28
 8003d1e:	2100      	movs	r1, #0
 8003d20:	4618      	mov	r0, r3
 8003d22:	f002 fad5 	bl	80062d0 <RCCEx_PLL3_Config>
 8003d26:	4603      	mov	r3, r0
 8003d28:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d2c:	e006      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003d34:	e002      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003d36:	bf00      	nop
 8003d38:	e000      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003d3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d3c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10b      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003d44:	4b8e      	ldr	r3, [pc, #568]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d48:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003d4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d54:	4a8a      	ldr	r2, [pc, #552]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d56:	430b      	orrs	r3, r1
 8003d58:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d5a:	e003      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d5c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d60:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003d64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003d70:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003d74:	2300      	movs	r3, #0
 8003d76:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003d7a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4313      	orrs	r3, r2
 8003d82:	d03a      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003d84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d8a:	2b30      	cmp	r3, #48	@ 0x30
 8003d8c:	d01f      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003d8e:	2b30      	cmp	r3, #48	@ 0x30
 8003d90:	d819      	bhi.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003d92:	2b20      	cmp	r3, #32
 8003d94:	d00c      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003d96:	2b20      	cmp	r3, #32
 8003d98:	d815      	bhi.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d019      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003d9e:	2b10      	cmp	r3, #16
 8003da0:	d111      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da2:	4b77      	ldr	r3, [pc, #476]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da6:	4a76      	ldr	r2, [pc, #472]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003da8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003dae:	e011      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003db0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003db4:	3308      	adds	r3, #8
 8003db6:	2102      	movs	r1, #2
 8003db8:	4618      	mov	r0, r3
 8003dba:	f002 f9d7 	bl	800616c <RCCEx_PLL2_Config>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003dc4:	e006      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003dcc:	e002      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003dce:	bf00      	nop
 8003dd0:	e000      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003dd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dd4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10a      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ddc:	4b68      	ldr	r3, [pc, #416]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003de0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003de4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dea:	4a65      	ldr	r2, [pc, #404]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dec:	430b      	orrs	r3, r1
 8003dee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003df0:	e003      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003df6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003dfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e02:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003e06:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003e10:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003e14:	460b      	mov	r3, r1
 8003e16:	4313      	orrs	r3, r2
 8003e18:	d051      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003e1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e24:	d035      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003e26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e2a:	d82e      	bhi.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e30:	d031      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003e32:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e36:	d828      	bhi.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e3c:	d01a      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003e3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e42:	d822      	bhi.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003e48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e4c:	d007      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003e4e:	e01c      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e50:	4b4b      	ldr	r3, [pc, #300]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e54:	4a4a      	ldr	r2, [pc, #296]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e5c:	e01c      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e62:	3308      	adds	r3, #8
 8003e64:	2100      	movs	r1, #0
 8003e66:	4618      	mov	r0, r3
 8003e68:	f002 f980 	bl	800616c <RCCEx_PLL2_Config>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e72:	e011      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e78:	3328      	adds	r3, #40	@ 0x28
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f002 fa27 	bl	80062d0 <RCCEx_PLL3_Config>
 8003e82:	4603      	mov	r3, r0
 8003e84:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e88:	e006      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003e90:	e002      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003e92:	bf00      	nop
 8003e94:	e000      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003e96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e98:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10a      	bne.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003ea0:	4b37      	ldr	r3, [pc, #220]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ea4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003ea8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003eac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003eae:	4a34      	ldr	r2, [pc, #208]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eb0:	430b      	orrs	r3, r1
 8003eb2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003eb4:	e003      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003eba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003ebe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003eca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003ed4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4313      	orrs	r3, r2
 8003edc:	d056      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003ede:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ee2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ee4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ee8:	d033      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003eea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003eee:	d82c      	bhi.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ef0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ef4:	d02f      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003ef6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003efa:	d826      	bhi.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003efc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f00:	d02b      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003f02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f06:	d820      	bhi.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f0c:	d012      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003f0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f12:	d81a      	bhi.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d022      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f1c:	d115      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f22:	3308      	adds	r3, #8
 8003f24:	2101      	movs	r1, #1
 8003f26:	4618      	mov	r0, r3
 8003f28:	f002 f920 	bl	800616c <RCCEx_PLL2_Config>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003f32:	e015      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f38:	3328      	adds	r3, #40	@ 0x28
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f002 f9c7 	bl	80062d0 <RCCEx_PLL3_Config>
 8003f42:	4603      	mov	r3, r0
 8003f44:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003f48:	e00a      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003f50:	e006      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f52:	bf00      	nop
 8003f54:	e004      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f56:	bf00      	nop
 8003f58:	e002      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f5a:	bf00      	nop
 8003f5c:	e000      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f60:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10d      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003f68:	4b05      	ldr	r3, [pc, #20]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f6c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003f70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f76:	4a02      	ldr	r2, [pc, #8]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f78:	430b      	orrs	r3, r1
 8003f7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f7c:	e006      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003f7e:	bf00      	nop
 8003f80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f84:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f88:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003f8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f94:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003f98:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003fa2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	d055      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003fac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003fb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fb8:	d033      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003fba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fbe:	d82c      	bhi.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fc4:	d02f      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fca:	d826      	bhi.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003fcc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003fd0:	d02b      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003fd2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003fd6:	d820      	bhi.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003fd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fdc:	d012      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003fde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fe2:	d81a      	bhi.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d022      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003fe8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fec:	d115      	bne.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ff2:	3308      	adds	r3, #8
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f002 f8b8 	bl	800616c <RCCEx_PLL2_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004002:	e015      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004004:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004008:	3328      	adds	r3, #40	@ 0x28
 800400a:	2101      	movs	r1, #1
 800400c:	4618      	mov	r0, r3
 800400e:	f002 f95f 	bl	80062d0 <RCCEx_PLL3_Config>
 8004012:	4603      	mov	r3, r0
 8004014:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004018:	e00a      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004020:	e006      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004022:	bf00      	nop
 8004024:	e004      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004026:	bf00      	nop
 8004028:	e002      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800402a:	bf00      	nop
 800402c:	e000      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800402e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004030:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10b      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004038:	4bb6      	ldr	r3, [pc, #728]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800403a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800403c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004040:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004044:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004048:	4ab2      	ldr	r2, [pc, #712]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800404a:	430b      	orrs	r3, r1
 800404c:	6593      	str	r3, [r2, #88]	@ 0x58
 800404e:	e003      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004050:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004054:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004058:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004060:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004064:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004068:	2300      	movs	r3, #0
 800406a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800406e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004072:	460b      	mov	r3, r1
 8004074:	4313      	orrs	r3, r2
 8004076:	d02a      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8004078:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800407c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800407e:	2b00      	cmp	r3, #0
 8004080:	d011      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8004082:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004086:	d10a      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004088:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800408c:	3308      	adds	r3, #8
 800408e:	2101      	movs	r1, #1
 8004090:	4618      	mov	r0, r3
 8004092:	f002 f86b 	bl	800616c <RCCEx_PLL2_Config>
 8004096:	4603      	mov	r3, r0
 8004098:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 800409c:	e004      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80040a4:	e000      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 80040a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10a      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80040b0:	4b98      	ldr	r3, [pc, #608]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80040b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040b4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80040b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040be:	4a95      	ldr	r2, [pc, #596]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80040c0:	430b      	orrs	r3, r1
 80040c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040c4:	e003      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80040ca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80040da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80040de:	2300      	movs	r3, #0
 80040e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80040e4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80040e8:	460b      	mov	r3, r1
 80040ea:	4313      	orrs	r3, r2
 80040ec:	d037      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80040ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040f8:	d00e      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80040fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040fe:	d816      	bhi.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x776>
 8004100:	2b00      	cmp	r3, #0
 8004102:	d018      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004104:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004108:	d111      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800410a:	4b82      	ldr	r3, [pc, #520]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800410c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410e:	4a81      	ldr	r2, [pc, #516]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004110:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004114:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004116:	e00f      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004118:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800411c:	3308      	adds	r3, #8
 800411e:	2101      	movs	r1, #1
 8004120:	4618      	mov	r0, r3
 8004122:	f002 f823 	bl	800616c <RCCEx_PLL2_Config>
 8004126:	4603      	mov	r3, r0
 8004128:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800412c:	e004      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004134:	e000      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8004136:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004138:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10a      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004140:	4b74      	ldr	r3, [pc, #464]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004142:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004144:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004148:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800414c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800414e:	4a71      	ldr	r2, [pc, #452]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004150:	430b      	orrs	r3, r1
 8004152:	6513      	str	r3, [r2, #80]	@ 0x50
 8004154:	e003      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004156:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800415a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800415e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004166:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800416a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800416e:	2300      	movs	r3, #0
 8004170:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004174:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004178:	460b      	mov	r3, r1
 800417a:	4313      	orrs	r3, r2
 800417c:	d03a      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800417e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004182:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004184:	2b03      	cmp	r3, #3
 8004186:	d81d      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8004188:	a201      	add	r2, pc, #4	@ (adr r2, 8004190 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800418a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418e:	bf00      	nop
 8004190:	080041cd 	.word	0x080041cd
 8004194:	080041a1 	.word	0x080041a1
 8004198:	080041af 	.word	0x080041af
 800419c:	080041cd 	.word	0x080041cd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041a0:	4b5c      	ldr	r3, [pc, #368]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80041a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a4:	4a5b      	ldr	r2, [pc, #364]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80041a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80041ac:	e00f      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041b2:	3308      	adds	r3, #8
 80041b4:	2102      	movs	r1, #2
 80041b6:	4618      	mov	r0, r3
 80041b8:	f001 ffd8 	bl	800616c <RCCEx_PLL2_Config>
 80041bc:	4603      	mov	r3, r0
 80041be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80041c2:	e004      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80041ca:	e000      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 80041cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10a      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80041d6:	4b4f      	ldr	r3, [pc, #316]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80041d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041da:	f023 0103 	bic.w	r1, r3, #3
 80041de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041e4:	4a4b      	ldr	r2, [pc, #300]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80041e6:	430b      	orrs	r3, r1
 80041e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041ea:	e003      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80041f0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004200:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004204:	2300      	movs	r3, #0
 8004206:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800420a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800420e:	460b      	mov	r3, r1
 8004210:	4313      	orrs	r3, r2
 8004212:	f000 80a0 	beq.w	8004356 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004216:	4b40      	ldr	r3, [pc, #256]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a3f      	ldr	r2, [pc, #252]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800421c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004220:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004222:	f7fc fd6b 	bl	8000cfc <HAL_GetTick>
 8004226:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800422a:	e00b      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800422c:	f7fc fd66 	bl	8000cfc <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b64      	cmp	r3, #100	@ 0x64
 800423a:	d903      	bls.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004242:	e005      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004244:	4b34      	ldr	r3, [pc, #208]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0ed      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8004250:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004254:	2b00      	cmp	r3, #0
 8004256:	d17a      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004258:	4b2e      	ldr	r3, [pc, #184]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800425a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800425c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004260:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004264:	4053      	eors	r3, r2
 8004266:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800426a:	2b00      	cmp	r3, #0
 800426c:	d015      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800426e:	4b29      	ldr	r3, [pc, #164]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004272:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004276:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800427a:	4b26      	ldr	r3, [pc, #152]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800427c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800427e:	4a25      	ldr	r2, [pc, #148]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004284:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004286:	4b23      	ldr	r3, [pc, #140]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800428a:	4a22      	ldr	r2, [pc, #136]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800428c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004290:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004292:	4a20      	ldr	r2, [pc, #128]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004294:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004298:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800429a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800429e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80042a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042a6:	d118      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a8:	f7fc fd28 	bl	8000cfc <HAL_GetTick>
 80042ac:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042b0:	e00d      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b2:	f7fc fd23 	bl	8000cfc <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80042bc:	1ad2      	subs	r2, r2, r3
 80042be:	f241 3388 	movw	r3, #5000	@ 0x1388
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d903      	bls.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 80042cc:	e005      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042ce:	4b11      	ldr	r3, [pc, #68]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80042d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0eb      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 80042da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d130      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80042ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042f2:	d115      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x968>
 80042f4:	4b07      	ldr	r3, [pc, #28]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80042fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004300:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004304:	091a      	lsrs	r2, r3, #4
 8004306:	4b05      	ldr	r3, [pc, #20]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8004308:	4013      	ands	r3, r2
 800430a:	4a02      	ldr	r2, [pc, #8]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800430c:	430b      	orrs	r3, r1
 800430e:	6113      	str	r3, [r2, #16]
 8004310:	e00c      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x974>
 8004312:	bf00      	nop
 8004314:	58024400 	.word	0x58024400
 8004318:	58024800 	.word	0x58024800
 800431c:	00ffffcf 	.word	0x00ffffcf
 8004320:	4bd4      	ldr	r3, [pc, #848]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	4ad3      	ldr	r2, [pc, #844]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004326:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800432a:	6113      	str	r3, [r2, #16]
 800432c:	4bd1      	ldr	r3, [pc, #836]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800432e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004330:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004334:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800433c:	4acd      	ldr	r2, [pc, #820]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800433e:	430b      	orrs	r3, r1
 8004340:	6713      	str	r3, [r2, #112]	@ 0x70
 8004342:	e008      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004344:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004348:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 800434c:	e003      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800434e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004352:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004356:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800435a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435e:	f002 0301 	and.w	r3, r2, #1
 8004362:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004366:	2300      	movs	r3, #0
 8004368:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800436c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004370:	460b      	mov	r3, r1
 8004372:	4313      	orrs	r3, r2
 8004374:	f000 808b 	beq.w	800448e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004378:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800437c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004380:	2b28      	cmp	r3, #40	@ 0x28
 8004382:	d86b      	bhi.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004384:	a201      	add	r2, pc, #4	@ (adr r2, 800438c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8004386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438a:	bf00      	nop
 800438c:	08004465 	.word	0x08004465
 8004390:	0800445d 	.word	0x0800445d
 8004394:	0800445d 	.word	0x0800445d
 8004398:	0800445d 	.word	0x0800445d
 800439c:	0800445d 	.word	0x0800445d
 80043a0:	0800445d 	.word	0x0800445d
 80043a4:	0800445d 	.word	0x0800445d
 80043a8:	0800445d 	.word	0x0800445d
 80043ac:	08004431 	.word	0x08004431
 80043b0:	0800445d 	.word	0x0800445d
 80043b4:	0800445d 	.word	0x0800445d
 80043b8:	0800445d 	.word	0x0800445d
 80043bc:	0800445d 	.word	0x0800445d
 80043c0:	0800445d 	.word	0x0800445d
 80043c4:	0800445d 	.word	0x0800445d
 80043c8:	0800445d 	.word	0x0800445d
 80043cc:	08004447 	.word	0x08004447
 80043d0:	0800445d 	.word	0x0800445d
 80043d4:	0800445d 	.word	0x0800445d
 80043d8:	0800445d 	.word	0x0800445d
 80043dc:	0800445d 	.word	0x0800445d
 80043e0:	0800445d 	.word	0x0800445d
 80043e4:	0800445d 	.word	0x0800445d
 80043e8:	0800445d 	.word	0x0800445d
 80043ec:	08004465 	.word	0x08004465
 80043f0:	0800445d 	.word	0x0800445d
 80043f4:	0800445d 	.word	0x0800445d
 80043f8:	0800445d 	.word	0x0800445d
 80043fc:	0800445d 	.word	0x0800445d
 8004400:	0800445d 	.word	0x0800445d
 8004404:	0800445d 	.word	0x0800445d
 8004408:	0800445d 	.word	0x0800445d
 800440c:	08004465 	.word	0x08004465
 8004410:	0800445d 	.word	0x0800445d
 8004414:	0800445d 	.word	0x0800445d
 8004418:	0800445d 	.word	0x0800445d
 800441c:	0800445d 	.word	0x0800445d
 8004420:	0800445d 	.word	0x0800445d
 8004424:	0800445d 	.word	0x0800445d
 8004428:	0800445d 	.word	0x0800445d
 800442c:	08004465 	.word	0x08004465
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004430:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004434:	3308      	adds	r3, #8
 8004436:	2101      	movs	r1, #1
 8004438:	4618      	mov	r0, r3
 800443a:	f001 fe97 	bl	800616c <RCCEx_PLL2_Config>
 800443e:	4603      	mov	r3, r0
 8004440:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004444:	e00f      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004446:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800444a:	3328      	adds	r3, #40	@ 0x28
 800444c:	2101      	movs	r1, #1
 800444e:	4618      	mov	r0, r3
 8004450:	f001 ff3e 	bl	80062d0 <RCCEx_PLL3_Config>
 8004454:	4603      	mov	r3, r0
 8004456:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800445a:	e004      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004462:	e000      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8004464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004466:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10b      	bne.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800446e:	4b81      	ldr	r3, [pc, #516]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004472:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004476:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800447a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800447e:	4a7d      	ldr	r2, [pc, #500]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004480:	430b      	orrs	r3, r1
 8004482:	6553      	str	r3, [r2, #84]	@ 0x54
 8004484:	e003      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004486:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800448a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800448e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004496:	f002 0302 	and.w	r3, r2, #2
 800449a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800449e:	2300      	movs	r3, #0
 80044a0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80044a4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80044a8:	460b      	mov	r3, r1
 80044aa:	4313      	orrs	r3, r2
 80044ac:	d042      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80044ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044b4:	2b05      	cmp	r3, #5
 80044b6:	d825      	bhi.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 80044b8:	a201      	add	r2, pc, #4	@ (adr r2, 80044c0 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 80044ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044be:	bf00      	nop
 80044c0:	0800450d 	.word	0x0800450d
 80044c4:	080044d9 	.word	0x080044d9
 80044c8:	080044ef 	.word	0x080044ef
 80044cc:	0800450d 	.word	0x0800450d
 80044d0:	0800450d 	.word	0x0800450d
 80044d4:	0800450d 	.word	0x0800450d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044dc:	3308      	adds	r3, #8
 80044de:	2101      	movs	r1, #1
 80044e0:	4618      	mov	r0, r3
 80044e2:	f001 fe43 	bl	800616c <RCCEx_PLL2_Config>
 80044e6:	4603      	mov	r3, r0
 80044e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80044ec:	e00f      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044f2:	3328      	adds	r3, #40	@ 0x28
 80044f4:	2101      	movs	r1, #1
 80044f6:	4618      	mov	r0, r3
 80044f8:	f001 feea 	bl	80062d0 <RCCEx_PLL3_Config>
 80044fc:	4603      	mov	r3, r0
 80044fe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004502:	e004      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800450a:	e000      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 800450c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800450e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10a      	bne.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004516:	4b57      	ldr	r3, [pc, #348]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800451a:	f023 0107 	bic.w	r1, r3, #7
 800451e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004522:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004524:	4a53      	ldr	r2, [pc, #332]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004526:	430b      	orrs	r3, r1
 8004528:	6553      	str	r3, [r2, #84]	@ 0x54
 800452a:	e003      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800452c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004530:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004534:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	f002 0304 	and.w	r3, r2, #4
 8004540:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004544:	2300      	movs	r3, #0
 8004546:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800454a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800454e:	460b      	mov	r3, r1
 8004550:	4313      	orrs	r3, r2
 8004552:	d044      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004554:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004558:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800455c:	2b05      	cmp	r3, #5
 800455e:	d825      	bhi.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8004560:	a201      	add	r2, pc, #4	@ (adr r2, 8004568 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8004562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004566:	bf00      	nop
 8004568:	080045b5 	.word	0x080045b5
 800456c:	08004581 	.word	0x08004581
 8004570:	08004597 	.word	0x08004597
 8004574:	080045b5 	.word	0x080045b5
 8004578:	080045b5 	.word	0x080045b5
 800457c:	080045b5 	.word	0x080045b5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004580:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004584:	3308      	adds	r3, #8
 8004586:	2101      	movs	r1, #1
 8004588:	4618      	mov	r0, r3
 800458a:	f001 fdef 	bl	800616c <RCCEx_PLL2_Config>
 800458e:	4603      	mov	r3, r0
 8004590:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004594:	e00f      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004596:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800459a:	3328      	adds	r3, #40	@ 0x28
 800459c:	2101      	movs	r1, #1
 800459e:	4618      	mov	r0, r3
 80045a0:	f001 fe96 	bl	80062d0 <RCCEx_PLL3_Config>
 80045a4:	4603      	mov	r3, r0
 80045a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80045aa:	e004      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80045b2:	e000      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 80045b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10b      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045be:	4b2d      	ldr	r3, [pc, #180]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80045c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045c2:	f023 0107 	bic.w	r1, r3, #7
 80045c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045ce:	4a29      	ldr	r2, [pc, #164]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80045d0:	430b      	orrs	r3, r1
 80045d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80045d4:	e003      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80045da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e6:	f002 0320 	and.w	r3, r2, #32
 80045ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80045ee:	2300      	movs	r3, #0
 80045f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80045f8:	460b      	mov	r3, r1
 80045fa:	4313      	orrs	r3, r2
 80045fc:	d057      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80045fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004602:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004606:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800460a:	d035      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 800460c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004610:	d82c      	bhi.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004616:	d031      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8004618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800461c:	d826      	bhi.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800461e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004622:	d02d      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8004624:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004628:	d820      	bhi.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800462a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800462e:	d012      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8004630:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004634:	d81a      	bhi.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004636:	2b00      	cmp	r3, #0
 8004638:	d024      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 800463a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800463e:	d115      	bne.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004640:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004644:	3308      	adds	r3, #8
 8004646:	2100      	movs	r1, #0
 8004648:	4618      	mov	r0, r3
 800464a:	f001 fd8f 	bl	800616c <RCCEx_PLL2_Config>
 800464e:	4603      	mov	r3, r0
 8004650:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004654:	e017      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004656:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800465a:	3328      	adds	r3, #40	@ 0x28
 800465c:	2102      	movs	r1, #2
 800465e:	4618      	mov	r0, r3
 8004660:	f001 fe36 	bl	80062d0 <RCCEx_PLL3_Config>
 8004664:	4603      	mov	r3, r0
 8004666:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800466a:	e00c      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004672:	e008      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8004674:	58024400 	.word	0x58024400
        break;
 8004678:	bf00      	nop
 800467a:	e004      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800467c:	bf00      	nop
 800467e:	e002      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004680:	bf00      	nop
 8004682:	e000      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004686:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10b      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800468e:	4bc2      	ldr	r3, [pc, #776]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004692:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004696:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800469a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800469e:	4abe      	ldr	r2, [pc, #760]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80046a0:	430b      	orrs	r3, r1
 80046a2:	6553      	str	r3, [r2, #84]	@ 0x54
 80046a4:	e003      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80046aa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80046ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80046ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80046be:	2300      	movs	r3, #0
 80046c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80046c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80046c8:	460b      	mov	r3, r1
 80046ca:	4313      	orrs	r3, r2
 80046cc:	d055      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80046ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80046d6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80046da:	d033      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 80046dc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80046e0:	d82c      	bhi.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80046e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046e6:	d02f      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 80046e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046ec:	d826      	bhi.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80046ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046f2:	d02b      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xd94>
 80046f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046f8:	d820      	bhi.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80046fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046fe:	d012      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8004700:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004704:	d81a      	bhi.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004706:	2b00      	cmp	r3, #0
 8004708:	d022      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 800470a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800470e:	d115      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004710:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004714:	3308      	adds	r3, #8
 8004716:	2100      	movs	r1, #0
 8004718:	4618      	mov	r0, r3
 800471a:	f001 fd27 	bl	800616c <RCCEx_PLL2_Config>
 800471e:	4603      	mov	r3, r0
 8004720:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004724:	e015      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004726:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800472a:	3328      	adds	r3, #40	@ 0x28
 800472c:	2102      	movs	r1, #2
 800472e:	4618      	mov	r0, r3
 8004730:	f001 fdce 	bl	80062d0 <RCCEx_PLL3_Config>
 8004734:	4603      	mov	r3, r0
 8004736:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800473a:	e00a      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004742:	e006      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004744:	bf00      	nop
 8004746:	e004      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004748:	bf00      	nop
 800474a:	e002      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800474c:	bf00      	nop
 800474e:	e000      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004750:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004752:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10b      	bne.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800475a:	4b8f      	ldr	r3, [pc, #572]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800475c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800475e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004762:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004766:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800476a:	4a8b      	ldr	r2, [pc, #556]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800476c:	430b      	orrs	r3, r1
 800476e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004770:	e003      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004772:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004776:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800477a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800477e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004782:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004786:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800478a:	2300      	movs	r3, #0
 800478c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004790:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004794:	460b      	mov	r3, r1
 8004796:	4313      	orrs	r3, r2
 8004798:	d055      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800479a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800479e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80047a2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80047a6:	d033      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80047a8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80047ac:	d82c      	bhi.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80047ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047b2:	d02f      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80047b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047b8:	d826      	bhi.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80047ba:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80047be:	d02b      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80047c0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80047c4:	d820      	bhi.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80047c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047ca:	d012      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 80047cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047d0:	d81a      	bhi.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d022      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xe64>
 80047d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047da:	d115      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047e0:	3308      	adds	r3, #8
 80047e2:	2100      	movs	r1, #0
 80047e4:	4618      	mov	r0, r3
 80047e6:	f001 fcc1 	bl	800616c <RCCEx_PLL2_Config>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80047f0:	e015      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047f6:	3328      	adds	r3, #40	@ 0x28
 80047f8:	2102      	movs	r1, #2
 80047fa:	4618      	mov	r0, r3
 80047fc:	f001 fd68 	bl	80062d0 <RCCEx_PLL3_Config>
 8004800:	4603      	mov	r3, r0
 8004802:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004806:	e00a      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800480e:	e006      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004810:	bf00      	nop
 8004812:	e004      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004814:	bf00      	nop
 8004816:	e002      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004818:	bf00      	nop
 800481a:	e000      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800481c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800481e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10b      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004826:	4b5c      	ldr	r3, [pc, #368]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800482a:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800482e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004832:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004836:	4a58      	ldr	r2, [pc, #352]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004838:	430b      	orrs	r3, r1
 800483a:	6593      	str	r3, [r2, #88]	@ 0x58
 800483c:	e003      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800483e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004842:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004846:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800484a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484e:	f002 0308 	and.w	r3, r2, #8
 8004852:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004856:	2300      	movs	r3, #0
 8004858:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800485c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004860:	460b      	mov	r3, r1
 8004862:	4313      	orrs	r3, r2
 8004864:	d01e      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004866:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800486a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800486e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004872:	d10c      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004874:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004878:	3328      	adds	r3, #40	@ 0x28
 800487a:	2102      	movs	r1, #2
 800487c:	4618      	mov	r0, r3
 800487e:	f001 fd27 	bl	80062d0 <RCCEx_PLL3_Config>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d002      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800488e:	4b42      	ldr	r3, [pc, #264]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004892:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004896:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800489a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489e:	4a3e      	ldr	r2, [pc, #248]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048a0:	430b      	orrs	r3, r1
 80048a2:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ac:	f002 0310 	and.w	r3, r2, #16
 80048b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048b4:	2300      	movs	r3, #0
 80048b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80048ba:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80048be:	460b      	mov	r3, r1
 80048c0:	4313      	orrs	r3, r2
 80048c2:	d01e      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80048c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048d0:	d10c      	bne.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80048d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048d6:	3328      	adds	r3, #40	@ 0x28
 80048d8:	2102      	movs	r1, #2
 80048da:	4618      	mov	r0, r3
 80048dc:	f001 fcf8 	bl	80062d0 <RCCEx_PLL3_Config>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048ec:	4b2a      	ldr	r3, [pc, #168]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80048f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048fc:	4a26      	ldr	r2, [pc, #152]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048fe:	430b      	orrs	r3, r1
 8004900:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004902:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800490e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004912:	2300      	movs	r3, #0
 8004914:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004918:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800491c:	460b      	mov	r3, r1
 800491e:	4313      	orrs	r3, r2
 8004920:	d040      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004922:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004926:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800492a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800492e:	d022      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8004930:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004934:	d81b      	bhi.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800493a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800493e:	d00b      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8004940:	e015      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004942:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004946:	3308      	adds	r3, #8
 8004948:	2100      	movs	r1, #0
 800494a:	4618      	mov	r0, r3
 800494c:	f001 fc0e 	bl	800616c <RCCEx_PLL2_Config>
 8004950:	4603      	mov	r3, r0
 8004952:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004956:	e00f      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004958:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800495c:	3328      	adds	r3, #40	@ 0x28
 800495e:	2102      	movs	r1, #2
 8004960:	4618      	mov	r0, r3
 8004962:	f001 fcb5 	bl	80062d0 <RCCEx_PLL3_Config>
 8004966:	4603      	mov	r3, r0
 8004968:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800496c:	e004      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004974:	e000      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8004976:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004978:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10d      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004980:	4b05      	ldr	r3, [pc, #20]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004984:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004988:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800498c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004990:	4a01      	ldr	r2, [pc, #4]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004992:	430b      	orrs	r3, r1
 8004994:	6593      	str	r3, [r2, #88]	@ 0x58
 8004996:	e005      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004998:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800499c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80049a0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ac:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80049b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049b2:	2300      	movs	r3, #0
 80049b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80049b6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80049ba:	460b      	mov	r3, r1
 80049bc:	4313      	orrs	r3, r2
 80049be:	d03b      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80049c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80049cc:	d01f      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x1056>
 80049ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80049d2:	d818      	bhi.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 80049d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049d8:	d003      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 80049da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049de:	d007      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 80049e0:	e011      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049e2:	4b64      	ldr	r3, [pc, #400]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80049e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e6:	4a63      	ldr	r2, [pc, #396]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80049e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80049ee:	e00f      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049f4:	3328      	adds	r3, #40	@ 0x28
 80049f6:	2101      	movs	r1, #1
 80049f8:	4618      	mov	r0, r3
 80049fa:	f001 fc69 	bl	80062d0 <RCCEx_PLL3_Config>
 80049fe:	4603      	mov	r3, r0
 8004a00:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a04:	e004      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004a0c:	e000      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8004a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a10:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10b      	bne.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a18:	4b56      	ldr	r3, [pc, #344]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004a20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a28:	4a52      	ldr	r2, [pc, #328]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004a2a:	430b      	orrs	r3, r1
 8004a2c:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a2e:	e003      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a30:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004a34:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004a38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a40:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004a44:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a46:	2300      	movs	r3, #0
 8004a48:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a4a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4313      	orrs	r3, r2
 8004a52:	d031      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004a54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8004a5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a62:	d007      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8004a64:	e011      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a66:	4b43      	ldr	r3, [pc, #268]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6a:	4a42      	ldr	r2, [pc, #264]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004a6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004a72:	e00e      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a78:	3308      	adds	r3, #8
 8004a7a:	2102      	movs	r1, #2
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f001 fb75 	bl	800616c <RCCEx_PLL2_Config>
 8004a82:	4603      	mov	r3, r0
 8004a84:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004a88:	e003      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004a90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a92:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10a      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004a9a:	4b36      	ldr	r3, [pc, #216]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a9e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004aa2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa8:	4a32      	ldr	r2, [pc, #200]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004aaa:	430b      	orrs	r3, r1
 8004aac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004aae:	e003      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004ab4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ab8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004ac4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004aca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	d00c      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ad4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ad8:	3328      	adds	r3, #40	@ 0x28
 8004ada:	2102      	movs	r1, #2
 8004adc:	4618      	mov	r0, r3
 8004ade:	f001 fbf7 	bl	80062d0 <RCCEx_PLL3_Config>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004aee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004afa:	663b      	str	r3, [r7, #96]	@ 0x60
 8004afc:	2300      	movs	r3, #0
 8004afe:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b00:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004b04:	460b      	mov	r3, r1
 8004b06:	4313      	orrs	r3, r2
 8004b08:	d03a      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004b0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b16:	d018      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8004b18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b1c:	d811      	bhi.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8004b1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b22:	d014      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8004b24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b28:	d80b      	bhi.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d011      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8004b2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b32:	d106      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b34:	4b0f      	ldr	r3, [pc, #60]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b38:	4a0e      	ldr	r2, [pc, #56]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004b3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004b40:	e008      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004b48:	e004      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8004b4a:	bf00      	nop
 8004b4c:	e002      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8004b4e:	bf00      	nop
 8004b50:	e000      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8004b52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b54:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10d      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b5c:	4b05      	ldr	r3, [pc, #20]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b60:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004b64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b6c:	4a01      	ldr	r2, [pc, #4]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004b6e:	430b      	orrs	r3, r1
 8004b70:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b72:	e005      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8004b74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b78:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004b7c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b88:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004b8c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b8e:	2300      	movs	r3, #0
 8004b90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b92:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004b96:	460b      	mov	r3, r1
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	d009      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b9c:	4baa      	ldr	r3, [pc, #680]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ba0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004ba4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ba8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004baa:	4aa7      	ldr	r2, [pc, #668]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004bac:	430b      	orrs	r3, r1
 8004bae:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004bb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004bbc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bc2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	d00a      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004bcc:	4b9e      	ldr	r3, [pc, #632]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004bd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bd8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004bdc:	4a9a      	ldr	r2, [pc, #616]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004bde:	430b      	orrs	r3, r1
 8004be0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004be2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bea:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004bee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bf4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	d009      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bfe:	4b92      	ldr	r3, [pc, #584]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004c00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c02:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004c06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c0c:	4a8e      	ldr	r2, [pc, #568]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004c0e:	430b      	orrs	r3, r1
 8004c10:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004c12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004c1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c20:	2300      	movs	r3, #0
 8004c22:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c24:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004c28:	460b      	mov	r3, r1
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	d00e      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c2e:	4b86      	ldr	r3, [pc, #536]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	4a85      	ldr	r2, [pc, #532]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004c34:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004c38:	6113      	str	r3, [r2, #16]
 8004c3a:	4b83      	ldr	r3, [pc, #524]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004c3c:	6919      	ldr	r1, [r3, #16]
 8004c3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c42:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004c46:	4a80      	ldr	r2, [pc, #512]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004c48:	430b      	orrs	r3, r1
 8004c4a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004c4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c54:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004c58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c5e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004c62:	460b      	mov	r3, r1
 8004c64:	4313      	orrs	r3, r2
 8004c66:	d009      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004c68:	4b77      	ldr	r3, [pc, #476]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c6c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004c70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c76:	4a74      	ldr	r2, [pc, #464]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004c78:	430b      	orrs	r3, r1
 8004c7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c84:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004c88:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c8e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004c92:	460b      	mov	r3, r1
 8004c94:	4313      	orrs	r3, r2
 8004c96:	d00a      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c98:	4b6b      	ldr	r3, [pc, #428]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c9c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004ca0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ca8:	4a67      	ldr	r2, [pc, #412]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004caa:	430b      	orrs	r3, r1
 8004cac:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004cae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cc0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	d011      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004cce:	3308      	adds	r3, #8
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f001 fa4a 	bl	800616c <RCCEx_PLL2_Config>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004cde:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004cea:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004cee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	6239      	str	r1, [r7, #32]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d00:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004d04:	460b      	mov	r3, r1
 8004d06:	4313      	orrs	r3, r2
 8004d08:	d011      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d0e:	3308      	adds	r3, #8
 8004d10:	2101      	movs	r1, #1
 8004d12:	4618      	mov	r0, r3
 8004d14:	f001 fa2a 	bl	800616c <RCCEx_PLL2_Config>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004d1e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d26:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d2a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004d2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d36:	2100      	movs	r1, #0
 8004d38:	61b9      	str	r1, [r7, #24]
 8004d3a:	f003 0304 	and.w	r3, r3, #4
 8004d3e:	61fb      	str	r3, [r7, #28]
 8004d40:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004d44:	460b      	mov	r3, r1
 8004d46:	4313      	orrs	r3, r2
 8004d48:	d011      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d4e:	3308      	adds	r3, #8
 8004d50:	2102      	movs	r1, #2
 8004d52:	4618      	mov	r0, r3
 8004d54:	f001 fa0a 	bl	800616c <RCCEx_PLL2_Config>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004d5e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d66:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d6a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004d6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d76:	2100      	movs	r1, #0
 8004d78:	6139      	str	r1, [r7, #16]
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004d84:	460b      	mov	r3, r1
 8004d86:	4313      	orrs	r3, r2
 8004d88:	d011      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d8e:	3328      	adds	r3, #40	@ 0x28
 8004d90:	2100      	movs	r1, #0
 8004d92:	4618      	mov	r0, r3
 8004d94:	f001 fa9c 	bl	80062d0 <RCCEx_PLL3_Config>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8004d9e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004daa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004dae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db6:	2100      	movs	r1, #0
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	f003 0310 	and.w	r3, r3, #16
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	d011      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004dca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004dce:	3328      	adds	r3, #40	@ 0x28
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f001 fa7c 	bl	80062d0 <RCCEx_PLL3_Config>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004dde:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004dea:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004dee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df6:	2100      	movs	r1, #0
 8004df8:	6039      	str	r1, [r7, #0]
 8004dfa:	f003 0320 	and.w	r3, r3, #32
 8004dfe:	607b      	str	r3, [r7, #4]
 8004e00:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004e04:	460b      	mov	r3, r1
 8004e06:	4313      	orrs	r3, r2
 8004e08:	d011      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e0e:	3328      	adds	r3, #40	@ 0x28
 8004e10:	2102      	movs	r1, #2
 8004e12:	4618      	mov	r0, r3
 8004e14:	f001 fa5c 	bl	80062d0 <RCCEx_PLL3_Config>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004e1e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e26:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004e2a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8004e2e:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	e000      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8004e42:	46bd      	mov	sp, r7
 8004e44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e48:	58024400 	.word	0x58024400

08004e4c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b090      	sub	sp, #64	@ 0x40
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004e56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e5a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8004e5e:	430b      	orrs	r3, r1
 8004e60:	f040 8094 	bne.w	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004e64:	4b9e      	ldr	r3, [pc, #632]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004e66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e70:	2b04      	cmp	r3, #4
 8004e72:	f200 8087 	bhi.w	8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8004e76:	a201      	add	r2, pc, #4	@ (adr r2, 8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7c:	08004e91 	.word	0x08004e91
 8004e80:	08004eb9 	.word	0x08004eb9
 8004e84:	08004ee1 	.word	0x08004ee1
 8004e88:	08004f7d 	.word	0x08004f7d
 8004e8c:	08004f09 	.word	0x08004f09
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004e90:	4b93      	ldr	r3, [pc, #588]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e9c:	d108      	bne.n	8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f001 f810 	bl	8005ec8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004eac:	f000 bd45 	b.w	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004eb4:	f000 bd41 	b.w	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004eb8:	4b89      	ldr	r3, [pc, #548]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ec0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ec4:	d108      	bne.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ec6:	f107 0318 	add.w	r3, r7, #24
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fd54 	bl	8005978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ed4:	f000 bd31 	b.w	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004edc:	f000 bd2d 	b.w	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ee0:	4b7f      	ldr	r3, [pc, #508]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ee8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004eec:	d108      	bne.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004eee:	f107 030c 	add.w	r3, r7, #12
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 fe94 	bl	8005c20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004efc:	f000 bd1d 	b.w	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004f00:	2300      	movs	r3, #0
 8004f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f04:	f000 bd19 	b.w	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004f08:	4b75      	ldr	r3, [pc, #468]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f0c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004f10:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f12:	4b73      	ldr	r3, [pc, #460]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0304 	and.w	r3, r3, #4
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d10c      	bne.n	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d109      	bne.n	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f24:	4b6e      	ldr	r3, [pc, #440]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	08db      	lsrs	r3, r3, #3
 8004f2a:	f003 0303 	and.w	r3, r3, #3
 8004f2e:	4a6d      	ldr	r2, [pc, #436]	@ (80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004f30:	fa22 f303 	lsr.w	r3, r2, r3
 8004f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f36:	e01f      	b.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f38:	4b69      	ldr	r3, [pc, #420]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f44:	d106      	bne.n	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8004f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f4c:	d102      	bne.n	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004f4e:	4b66      	ldr	r3, [pc, #408]	@ (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f52:	e011      	b.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004f54:	4b62      	ldr	r3, [pc, #392]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f60:	d106      	bne.n	8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8004f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f68:	d102      	bne.n	8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004f6a:	4b60      	ldr	r3, [pc, #384]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f6e:	e003      	b.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004f70:	2300      	movs	r3, #0
 8004f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004f74:	f000 bce1 	b.w	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004f78:	f000 bcdf 	b.w	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004f7c:	4b5c      	ldr	r3, [pc, #368]	@ (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f80:	f000 bcdb 	b.w	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f88:	f000 bcd7 	b.w	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004f8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f90:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8004f94:	430b      	orrs	r3, r1
 8004f96:	f040 80ad 	bne.w	80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8004f9a:	4b51      	ldr	r3, [pc, #324]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f9e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8004fa2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004faa:	d056      	beq.n	800505a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8004fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fb2:	f200 8090 	bhi.w	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb8:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fba:	f000 8088 	beq.w	80050ce <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc0:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fc2:	f200 8088 	bhi.w	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc8:	2b80      	cmp	r3, #128	@ 0x80
 8004fca:	d032      	beq.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8004fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fce:	2b80      	cmp	r3, #128	@ 0x80
 8004fd0:	f200 8081 	bhi.w	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8004fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fdc:	2b40      	cmp	r3, #64	@ 0x40
 8004fde:	d014      	beq.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004fe0:	e079      	b.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004fe2:	4b3f      	ldr	r3, [pc, #252]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fee:	d108      	bne.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ff0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 ff67 	bl	8005ec8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ffe:	f000 bc9c 	b.w	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005002:	2300      	movs	r3, #0
 8005004:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005006:	f000 bc98 	b.w	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800500a:	4b35      	ldr	r3, [pc, #212]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005012:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005016:	d108      	bne.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005018:	f107 0318 	add.w	r3, r7, #24
 800501c:	4618      	mov	r0, r3
 800501e:	f000 fcab 	bl	8005978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005026:	f000 bc88 	b.w	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800502a:	2300      	movs	r3, #0
 800502c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800502e:	f000 bc84 	b.w	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005032:	4b2b      	ldr	r3, [pc, #172]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800503a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800503e:	d108      	bne.n	8005052 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005040:	f107 030c 	add.w	r3, r7, #12
 8005044:	4618      	mov	r0, r3
 8005046:	f000 fdeb 	bl	8005c20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800504e:	f000 bc74 	b.w	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005052:	2300      	movs	r3, #0
 8005054:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005056:	f000 bc70 	b.w	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800505a:	4b21      	ldr	r3, [pc, #132]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800505c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800505e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005062:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005064:	4b1e      	ldr	r3, [pc, #120]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b04      	cmp	r3, #4
 800506e:	d10c      	bne.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8005070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005072:	2b00      	cmp	r3, #0
 8005074:	d109      	bne.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005076:	4b1a      	ldr	r3, [pc, #104]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	08db      	lsrs	r3, r3, #3
 800507c:	f003 0303 	and.w	r3, r3, #3
 8005080:	4a18      	ldr	r2, [pc, #96]	@ (80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005082:	fa22 f303 	lsr.w	r3, r2, r3
 8005086:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005088:	e01f      	b.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800508a:	4b15      	ldr	r3, [pc, #84]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005096:	d106      	bne.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800509a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800509e:	d102      	bne.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80050a0:	4b11      	ldr	r3, [pc, #68]	@ (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80050a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050a4:	e011      	b.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80050a6:	4b0e      	ldr	r3, [pc, #56]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050b2:	d106      	bne.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80050b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050ba:	d102      	bne.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80050bc:	4b0b      	ldr	r3, [pc, #44]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80050be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050c0:	e003      	b.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80050c2:	2300      	movs	r3, #0
 80050c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80050c6:	f000 bc38 	b.w	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80050ca:	f000 bc36 	b.w	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80050ce:	4b08      	ldr	r3, [pc, #32]	@ (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80050d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050d2:	f000 bc32 	b.w	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80050d6:	2300      	movs	r3, #0
 80050d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050da:	f000 bc2e 	b.w	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80050de:	bf00      	nop
 80050e0:	58024400 	.word	0x58024400
 80050e4:	03d09000 	.word	0x03d09000
 80050e8:	003d0900 	.word	0x003d0900
 80050ec:	017d7840 	.word	0x017d7840
 80050f0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80050f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050f8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80050fc:	430b      	orrs	r3, r1
 80050fe:	f040 809c 	bne.w	800523a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005102:	4b9e      	ldr	r3, [pc, #632]	@ (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005106:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800510a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800510c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005112:	d054      	beq.n	80051be <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005116:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800511a:	f200 808b 	bhi.w	8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800511e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005120:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005124:	f000 8083 	beq.w	800522e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8005128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800512e:	f200 8081 	bhi.w	8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005134:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005138:	d02f      	beq.n	800519a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800513a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005140:	d878      	bhi.n	8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005144:	2b00      	cmp	r3, #0
 8005146:	d004      	beq.n	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800514e:	d012      	beq.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8005150:	e070      	b.n	8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005152:	4b8a      	ldr	r3, [pc, #552]	@ (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800515a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800515e:	d107      	bne.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005160:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005164:	4618      	mov	r0, r3
 8005166:	f000 feaf 	bl	8005ec8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800516a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800516c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800516e:	e3e4      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005170:	2300      	movs	r3, #0
 8005172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005174:	e3e1      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005176:	4b81      	ldr	r3, [pc, #516]	@ (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800517e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005182:	d107      	bne.n	8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005184:	f107 0318 	add.w	r3, r7, #24
 8005188:	4618      	mov	r0, r3
 800518a:	f000 fbf5 	bl	8005978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005192:	e3d2      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005194:	2300      	movs	r3, #0
 8005196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005198:	e3cf      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800519a:	4b78      	ldr	r3, [pc, #480]	@ (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051a6:	d107      	bne.n	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051a8:	f107 030c 	add.w	r3, r7, #12
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 fd37 	bl	8005c20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80051b6:	e3c0      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80051b8:	2300      	movs	r3, #0
 80051ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051bc:	e3bd      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80051be:	4b6f      	ldr	r3, [pc, #444]	@ (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80051c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80051c6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80051c8:	4b6c      	ldr	r3, [pc, #432]	@ (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d10c      	bne.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80051d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d109      	bne.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051da:	4b68      	ldr	r3, [pc, #416]	@ (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	08db      	lsrs	r3, r3, #3
 80051e0:	f003 0303 	and.w	r3, r3, #3
 80051e4:	4a66      	ldr	r2, [pc, #408]	@ (8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80051e6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051ec:	e01e      	b.n	800522c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80051ee:	4b63      	ldr	r3, [pc, #396]	@ (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051fa:	d106      	bne.n	800520a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80051fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005202:	d102      	bne.n	800520a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005204:	4b5f      	ldr	r3, [pc, #380]	@ (8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005206:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005208:	e010      	b.n	800522c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800520a:	4b5c      	ldr	r3, [pc, #368]	@ (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005212:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005216:	d106      	bne.n	8005226 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8005218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800521a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800521e:	d102      	bne.n	8005226 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005220:	4b59      	ldr	r3, [pc, #356]	@ (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005222:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005224:	e002      	b.n	800522c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005226:	2300      	movs	r3, #0
 8005228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800522a:	e386      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800522c:	e385      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800522e:	4b57      	ldr	r3, [pc, #348]	@ (800538c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005230:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005232:	e382      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005234:	2300      	movs	r3, #0
 8005236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005238:	e37f      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800523a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800523e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8005242:	430b      	orrs	r3, r1
 8005244:	f040 80a7 	bne.w	8005396 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005248:	4b4c      	ldr	r3, [pc, #304]	@ (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800524a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800524c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005250:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005254:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005258:	d055      	beq.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800525a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005260:	f200 8096 	bhi.w	8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005266:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800526a:	f000 8084 	beq.w	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800526e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005270:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005274:	f200 808c 	bhi.w	8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800527e:	d030      	beq.n	80052e2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8005280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005282:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005286:	f200 8083 	bhi.w	8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800528a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528c:	2b00      	cmp	r3, #0
 800528e:	d004      	beq.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005292:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005296:	d012      	beq.n	80052be <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005298:	e07a      	b.n	8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800529a:	4b38      	ldr	r3, [pc, #224]	@ (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052a6:	d107      	bne.n	80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 fe0b 	bl	8005ec8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80052b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052b6:	e340      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80052b8:	2300      	movs	r3, #0
 80052ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052bc:	e33d      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80052be:	4b2f      	ldr	r3, [pc, #188]	@ (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052ca:	d107      	bne.n	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052cc:	f107 0318 	add.w	r3, r7, #24
 80052d0:	4618      	mov	r0, r3
 80052d2:	f000 fb51 	bl	8005978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052da:	e32e      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80052dc:	2300      	movs	r3, #0
 80052de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052e0:	e32b      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052e2:	4b26      	ldr	r3, [pc, #152]	@ (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052ee:	d107      	bne.n	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052f0:	f107 030c 	add.w	r3, r7, #12
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 fc93 	bl	8005c20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052fe:	e31c      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005300:	2300      	movs	r3, #0
 8005302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005304:	e319      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005306:	4b1d      	ldr	r3, [pc, #116]	@ (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800530a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800530e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005310:	4b1a      	ldr	r3, [pc, #104]	@ (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b04      	cmp	r3, #4
 800531a:	d10c      	bne.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800531c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800531e:	2b00      	cmp	r3, #0
 8005320:	d109      	bne.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005322:	4b16      	ldr	r3, [pc, #88]	@ (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	08db      	lsrs	r3, r3, #3
 8005328:	f003 0303 	and.w	r3, r3, #3
 800532c:	4a14      	ldr	r2, [pc, #80]	@ (8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800532e:	fa22 f303 	lsr.w	r3, r2, r3
 8005332:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005334:	e01e      	b.n	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005336:	4b11      	ldr	r3, [pc, #68]	@ (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800533e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005342:	d106      	bne.n	8005352 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005346:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800534a:	d102      	bne.n	8005352 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800534c:	4b0d      	ldr	r3, [pc, #52]	@ (8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800534e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005350:	e010      	b.n	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005352:	4b0a      	ldr	r3, [pc, #40]	@ (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800535a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800535e:	d106      	bne.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8005360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005362:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005366:	d102      	bne.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005368:	4b07      	ldr	r3, [pc, #28]	@ (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800536a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800536c:	e002      	b.n	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800536e:	2300      	movs	r3, #0
 8005370:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005372:	e2e2      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005374:	e2e1      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005376:	4b05      	ldr	r3, [pc, #20]	@ (800538c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800537a:	e2de      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800537c:	58024400 	.word	0x58024400
 8005380:	03d09000 	.word	0x03d09000
 8005384:	003d0900 	.word	0x003d0900
 8005388:	017d7840 	.word	0x017d7840
 800538c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8005390:	2300      	movs	r3, #0
 8005392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005394:	e2d1      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005396:	e9d7 2300 	ldrd	r2, r3, [r7]
 800539a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800539e:	430b      	orrs	r3, r1
 80053a0:	f040 809c 	bne.w	80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80053a4:	4b93      	ldr	r3, [pc, #588]	@ (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80053a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053a8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80053ac:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80053ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053b4:	d054      	beq.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80053b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053bc:	f200 808b 	bhi.w	80054d6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80053c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80053c6:	f000 8083 	beq.w	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80053ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80053d0:	f200 8081 	bhi.w	80054d6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80053d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053da:	d02f      	beq.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80053dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053e2:	d878      	bhi.n	80054d6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80053e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d004      	beq.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80053ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053f0:	d012      	beq.n	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80053f2:	e070      	b.n	80054d6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80053f4:	4b7f      	ldr	r3, [pc, #508]	@ (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005400:	d107      	bne.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005402:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005406:	4618      	mov	r0, r3
 8005408:	f000 fd5e 	bl	8005ec8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800540c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800540e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005410:	e293      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005412:	2300      	movs	r3, #0
 8005414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005416:	e290      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005418:	4b76      	ldr	r3, [pc, #472]	@ (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005420:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005424:	d107      	bne.n	8005436 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005426:	f107 0318 	add.w	r3, r7, #24
 800542a:	4618      	mov	r0, r3
 800542c:	f000 faa4 	bl	8005978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005434:	e281      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005436:	2300      	movs	r3, #0
 8005438:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800543a:	e27e      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800543c:	4b6d      	ldr	r3, [pc, #436]	@ (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005444:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005448:	d107      	bne.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800544a:	f107 030c 	add.w	r3, r7, #12
 800544e:	4618      	mov	r0, r3
 8005450:	f000 fbe6 	bl	8005c20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005458:	e26f      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800545a:	2300      	movs	r3, #0
 800545c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800545e:	e26c      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005460:	4b64      	ldr	r3, [pc, #400]	@ (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005464:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005468:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800546a:	4b62      	ldr	r3, [pc, #392]	@ (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0304 	and.w	r3, r3, #4
 8005472:	2b04      	cmp	r3, #4
 8005474:	d10c      	bne.n	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8005476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005478:	2b00      	cmp	r3, #0
 800547a:	d109      	bne.n	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800547c:	4b5d      	ldr	r3, [pc, #372]	@ (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	08db      	lsrs	r3, r3, #3
 8005482:	f003 0303 	and.w	r3, r3, #3
 8005486:	4a5c      	ldr	r2, [pc, #368]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005488:	fa22 f303 	lsr.w	r3, r2, r3
 800548c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800548e:	e01e      	b.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005490:	4b58      	ldr	r3, [pc, #352]	@ (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005498:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800549c:	d106      	bne.n	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800549e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054a4:	d102      	bne.n	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80054a6:	4b55      	ldr	r3, [pc, #340]	@ (80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80054a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054aa:	e010      	b.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80054ac:	4b51      	ldr	r3, [pc, #324]	@ (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054b8:	d106      	bne.n	80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80054ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054c0:	d102      	bne.n	80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80054c2:	4b4f      	ldr	r3, [pc, #316]	@ (8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80054c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054c6:	e002      	b.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80054c8:	2300      	movs	r3, #0
 80054ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80054cc:	e235      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80054ce:	e234      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80054d0:	4b4c      	ldr	r3, [pc, #304]	@ (8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80054d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054d4:	e231      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80054d6:	2300      	movs	r3, #0
 80054d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054da:	e22e      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80054dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054e0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80054e4:	430b      	orrs	r3, r1
 80054e6:	f040 808f 	bne.w	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80054ea:	4b42      	ldr	r3, [pc, #264]	@ (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80054ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ee:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80054f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80054f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054fa:	d06b      	beq.n	80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80054fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005502:	d874      	bhi.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005506:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800550a:	d056      	beq.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800550c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800550e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005512:	d86c      	bhi.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005516:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800551a:	d03b      	beq.n	8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800551c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800551e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005522:	d864      	bhi.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005526:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800552a:	d021      	beq.n	8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800552c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800552e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005532:	d85c      	bhi.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005536:	2b00      	cmp	r3, #0
 8005538:	d004      	beq.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800553a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800553c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005540:	d004      	beq.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8005542:	e054      	b.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005544:	f7fe fa22 	bl	800398c <HAL_RCC_GetPCLK1Freq>
 8005548:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800554a:	e1f6      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800554c:	4b29      	ldr	r3, [pc, #164]	@ (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005554:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005558:	d107      	bne.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800555a:	f107 0318 	add.w	r3, r7, #24
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fa0a 	bl	8005978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005568:	e1e7      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800556a:	2300      	movs	r3, #0
 800556c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800556e:	e1e4      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005570:	4b20      	ldr	r3, [pc, #128]	@ (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005578:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800557c:	d107      	bne.n	800558e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800557e:	f107 030c 	add.w	r3, r7, #12
 8005582:	4618      	mov	r0, r3
 8005584:	f000 fb4c 	bl	8005c20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800558c:	e1d5      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800558e:	2300      	movs	r3, #0
 8005590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005592:	e1d2      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005594:	4b17      	ldr	r3, [pc, #92]	@ (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b04      	cmp	r3, #4
 800559e:	d109      	bne.n	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055a0:	4b14      	ldr	r3, [pc, #80]	@ (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	08db      	lsrs	r3, r3, #3
 80055a6:	f003 0303 	and.w	r3, r3, #3
 80055aa:	4a13      	ldr	r2, [pc, #76]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80055ac:	fa22 f303 	lsr.w	r3, r2, r3
 80055b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055b2:	e1c2      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80055b4:	2300      	movs	r3, #0
 80055b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055b8:	e1bf      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80055ba:	4b0e      	ldr	r3, [pc, #56]	@ (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055c6:	d102      	bne.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80055c8:	4b0c      	ldr	r3, [pc, #48]	@ (80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80055ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055cc:	e1b5      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80055ce:	2300      	movs	r3, #0
 80055d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055d2:	e1b2      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80055d4:	4b07      	ldr	r3, [pc, #28]	@ (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055e0:	d102      	bne.n	80055e8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80055e2:	4b07      	ldr	r3, [pc, #28]	@ (8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80055e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055e6:	e1a8      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80055e8:	2300      	movs	r3, #0
 80055ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055ec:	e1a5      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80055ee:	2300      	movs	r3, #0
 80055f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055f2:	e1a2      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80055f4:	58024400 	.word	0x58024400
 80055f8:	03d09000 	.word	0x03d09000
 80055fc:	003d0900 	.word	0x003d0900
 8005600:	017d7840 	.word	0x017d7840
 8005604:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800560c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005610:	430b      	orrs	r3, r1
 8005612:	d173      	bne.n	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005614:	4b9c      	ldr	r3, [pc, #624]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005618:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800561c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800561e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005620:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005624:	d02f      	beq.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005628:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800562c:	d863      	bhi.n	80056f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800562e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005630:	2b00      	cmp	r3, #0
 8005632:	d004      	beq.n	800563e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005636:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800563a:	d012      	beq.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800563c:	e05b      	b.n	80056f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800563e:	4b92      	ldr	r3, [pc, #584]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005646:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800564a:	d107      	bne.n	800565c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800564c:	f107 0318 	add.w	r3, r7, #24
 8005650:	4618      	mov	r0, r3
 8005652:	f000 f991 	bl	8005978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800565a:	e16e      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800565c:	2300      	movs	r3, #0
 800565e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005660:	e16b      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005662:	4b89      	ldr	r3, [pc, #548]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800566a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800566e:	d107      	bne.n	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005670:	f107 030c 	add.w	r3, r7, #12
 8005674:	4618      	mov	r0, r3
 8005676:	f000 fad3 	bl	8005c20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800567e:	e15c      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005680:	2300      	movs	r3, #0
 8005682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005684:	e159      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005686:	4b80      	ldr	r3, [pc, #512]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800568a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800568e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005690:	4b7d      	ldr	r3, [pc, #500]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b04      	cmp	r3, #4
 800569a:	d10c      	bne.n	80056b6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800569c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d109      	bne.n	80056b6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056a2:	4b79      	ldr	r3, [pc, #484]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	08db      	lsrs	r3, r3, #3
 80056a8:	f003 0303 	and.w	r3, r3, #3
 80056ac:	4a77      	ldr	r2, [pc, #476]	@ (800588c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80056ae:	fa22 f303 	lsr.w	r3, r2, r3
 80056b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056b4:	e01e      	b.n	80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80056b6:	4b74      	ldr	r3, [pc, #464]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056c2:	d106      	bne.n	80056d2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80056c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056ca:	d102      	bne.n	80056d2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80056cc:	4b70      	ldr	r3, [pc, #448]	@ (8005890 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80056ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056d0:	e010      	b.n	80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80056d2:	4b6d      	ldr	r3, [pc, #436]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056de:	d106      	bne.n	80056ee <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80056e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056e6:	d102      	bne.n	80056ee <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80056e8:	4b6a      	ldr	r3, [pc, #424]	@ (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80056ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056ec:	e002      	b.n	80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80056ee:	2300      	movs	r3, #0
 80056f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80056f2:	e122      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80056f4:	e121      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80056f6:	2300      	movs	r3, #0
 80056f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056fa:	e11e      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80056fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005700:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005704:	430b      	orrs	r3, r1
 8005706:	d133      	bne.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005708:	4b5f      	ldr	r3, [pc, #380]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800570a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800570c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005710:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005714:	2b00      	cmp	r3, #0
 8005716:	d004      	beq.n	8005722 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800571e:	d012      	beq.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8005720:	e023      	b.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005722:	4b59      	ldr	r3, [pc, #356]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800572a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800572e:	d107      	bne.n	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005730:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005734:	4618      	mov	r0, r3
 8005736:	f000 fbc7 	bl	8005ec8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800573a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800573c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800573e:	e0fc      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005740:	2300      	movs	r3, #0
 8005742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005744:	e0f9      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005746:	4b50      	ldr	r3, [pc, #320]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800574e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005752:	d107      	bne.n	8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005754:	f107 0318 	add.w	r3, r7, #24
 8005758:	4618      	mov	r0, r3
 800575a:	f000 f90d 	bl	8005978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005762:	e0ea      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005764:	2300      	movs	r3, #0
 8005766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005768:	e0e7      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800576a:	2300      	movs	r3, #0
 800576c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800576e:	e0e4      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005770:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005774:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005778:	430b      	orrs	r3, r1
 800577a:	f040 808d 	bne.w	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800577e:	4b42      	ldr	r3, [pc, #264]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005782:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8005786:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800578a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800578e:	d06b      	beq.n	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005792:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005796:	d874      	bhi.n	8005882 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800579a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800579e:	d056      	beq.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80057a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057a6:	d86c      	bhi.n	8005882 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80057a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80057ae:	d03b      	beq.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80057b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80057b6:	d864      	bhi.n	8005882 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80057b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057be:	d021      	beq.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80057c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057c6:	d85c      	bhi.n	8005882 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80057c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d004      	beq.n	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80057ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057d4:	d004      	beq.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80057d6:	e054      	b.n	8005882 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80057d8:	f000 f8b8 	bl	800594c <HAL_RCCEx_GetD3PCLK1Freq>
 80057dc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80057de:	e0ac      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057e0:	4b29      	ldr	r3, [pc, #164]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057ec:	d107      	bne.n	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057ee:	f107 0318 	add.w	r3, r7, #24
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 f8c0 	bl	8005978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057fc:	e09d      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057fe:	2300      	movs	r3, #0
 8005800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005802:	e09a      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005804:	4b20      	ldr	r3, [pc, #128]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800580c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005810:	d107      	bne.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005812:	f107 030c 	add.w	r3, r7, #12
 8005816:	4618      	mov	r0, r3
 8005818:	f000 fa02 	bl	8005c20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005820:	e08b      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005822:	2300      	movs	r3, #0
 8005824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005826:	e088      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005828:	4b17      	ldr	r3, [pc, #92]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0304 	and.w	r3, r3, #4
 8005830:	2b04      	cmp	r3, #4
 8005832:	d109      	bne.n	8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005834:	4b14      	ldr	r3, [pc, #80]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	08db      	lsrs	r3, r3, #3
 800583a:	f003 0303 	and.w	r3, r3, #3
 800583e:	4a13      	ldr	r2, [pc, #76]	@ (800588c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005840:	fa22 f303 	lsr.w	r3, r2, r3
 8005844:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005846:	e078      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005848:	2300      	movs	r3, #0
 800584a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800584c:	e075      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800584e:	4b0e      	ldr	r3, [pc, #56]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005856:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800585a:	d102      	bne.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800585c:	4b0c      	ldr	r3, [pc, #48]	@ (8005890 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800585e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005860:	e06b      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005862:	2300      	movs	r3, #0
 8005864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005866:	e068      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005868:	4b07      	ldr	r3, [pc, #28]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005870:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005874:	d102      	bne.n	800587c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8005876:	4b07      	ldr	r3, [pc, #28]	@ (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800587a:	e05e      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800587c:	2300      	movs	r3, #0
 800587e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005880:	e05b      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005882:	2300      	movs	r3, #0
 8005884:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005886:	e058      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005888:	58024400 	.word	0x58024400
 800588c:	03d09000 	.word	0x03d09000
 8005890:	003d0900 	.word	0x003d0900
 8005894:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800589c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80058a0:	430b      	orrs	r3, r1
 80058a2:	d148      	bne.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80058a4:	4b27      	ldr	r3, [pc, #156]	@ (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80058a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80058ac:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80058ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058b4:	d02a      	beq.n	800590c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80058b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058bc:	d838      	bhi.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80058be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d004      	beq.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80058c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058ca:	d00d      	beq.n	80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80058cc:	e030      	b.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80058ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058da:	d102      	bne.n	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80058dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80058de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058e0:	e02b      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058e2:	2300      	movs	r3, #0
 80058e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058e6:	e028      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80058e8:	4b16      	ldr	r3, [pc, #88]	@ (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058f4:	d107      	bne.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fae4 	bl	8005ec8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005904:	e019      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005906:	2300      	movs	r3, #0
 8005908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800590a:	e016      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800590c:	4b0d      	ldr	r3, [pc, #52]	@ (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005914:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005918:	d107      	bne.n	800592a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800591a:	f107 0318 	add.w	r3, r7, #24
 800591e:	4618      	mov	r0, r3
 8005920:	f000 f82a 	bl	8005978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005928:	e007      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800592a:	2300      	movs	r3, #0
 800592c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800592e:	e004      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005930:	2300      	movs	r3, #0
 8005932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005934:	e001      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8005936:	2300      	movs	r3, #0
 8005938:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800593a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800593c:	4618      	mov	r0, r3
 800593e:	3740      	adds	r7, #64	@ 0x40
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	58024400 	.word	0x58024400
 8005948:	017d7840 	.word	0x017d7840

0800594c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005950:	f7fd ffec 	bl	800392c <HAL_RCC_GetHCLKFreq>
 8005954:	4602      	mov	r2, r0
 8005956:	4b06      	ldr	r3, [pc, #24]	@ (8005970 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	091b      	lsrs	r3, r3, #4
 800595c:	f003 0307 	and.w	r3, r3, #7
 8005960:	4904      	ldr	r1, [pc, #16]	@ (8005974 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005962:	5ccb      	ldrb	r3, [r1, r3]
 8005964:	f003 031f 	and.w	r3, r3, #31
 8005968:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800596c:	4618      	mov	r0, r3
 800596e:	bd80      	pop	{r7, pc}
 8005970:	58024400 	.word	0x58024400
 8005974:	0800827c 	.word	0x0800827c

08005978 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005978:	b480      	push	{r7}
 800597a:	b089      	sub	sp, #36	@ 0x24
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005980:	4ba1      	ldr	r3, [pc, #644]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005984:	f003 0303 	and.w	r3, r3, #3
 8005988:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800598a:	4b9f      	ldr	r3, [pc, #636]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800598c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800598e:	0b1b      	lsrs	r3, r3, #12
 8005990:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005994:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005996:	4b9c      	ldr	r3, [pc, #624]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800599a:	091b      	lsrs	r3, r3, #4
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80059a2:	4b99      	ldr	r3, [pc, #612]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a6:	08db      	lsrs	r3, r3, #3
 80059a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	fb02 f303 	mul.w	r3, r2, r3
 80059b2:	ee07 3a90 	vmov	s15, r3
 80059b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 8111 	beq.w	8005be8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	f000 8083 	beq.w	8005ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	f200 80a1 	bhi.w	8005b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d056      	beq.n	8005a90 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80059e2:	e099      	b.n	8005b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059e4:	4b88      	ldr	r3, [pc, #544]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0320 	and.w	r3, r3, #32
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d02d      	beq.n	8005a4c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059f0:	4b85      	ldr	r3, [pc, #532]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	08db      	lsrs	r3, r3, #3
 80059f6:	f003 0303 	and.w	r3, r3, #3
 80059fa:	4a84      	ldr	r2, [pc, #528]	@ (8005c0c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80059fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005a00:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	ee07 3a90 	vmov	s15, r3
 8005a08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	ee07 3a90 	vmov	s15, r3
 8005a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a1a:	4b7b      	ldr	r3, [pc, #492]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a22:	ee07 3a90 	vmov	s15, r3
 8005a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a2e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005c10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005a4a:	e087      	b.n	8005b5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	ee07 3a90 	vmov	s15, r3
 8005a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a56:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005c14 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a5e:	4b6a      	ldr	r3, [pc, #424]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a66:	ee07 3a90 	vmov	s15, r3
 8005a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a72:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005c10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a8e:	e065      	b.n	8005b5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	ee07 3a90 	vmov	s15, r3
 8005a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a9a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005c18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aa2:	4b59      	ldr	r3, [pc, #356]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aaa:	ee07 3a90 	vmov	s15, r3
 8005aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ab6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005c10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ac2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ace:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ad2:	e043      	b.n	8005b5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	ee07 3a90 	vmov	s15, r3
 8005ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ade:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005c1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ae6:	4b48      	ldr	r3, [pc, #288]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aee:	ee07 3a90 	vmov	s15, r3
 8005af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005afa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005c10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b16:	e021      	b.n	8005b5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	ee07 3a90 	vmov	s15, r3
 8005b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b22:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005c18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b2a:	4b37      	ldr	r3, [pc, #220]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b32:	ee07 3a90 	vmov	s15, r3
 8005b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b3e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005c10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b5a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005b5c:	4b2a      	ldr	r3, [pc, #168]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b60:	0a5b      	lsrs	r3, r3, #9
 8005b62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b66:	ee07 3a90 	vmov	s15, r3
 8005b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b76:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b82:	ee17 2a90 	vmov	r2, s15
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b8e:	0c1b      	lsrs	r3, r3, #16
 8005b90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b94:	ee07 3a90 	vmov	s15, r3
 8005b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ba0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ba4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bb0:	ee17 2a90 	vmov	r2, s15
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005bb8:	4b13      	ldr	r3, [pc, #76]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bbc:	0e1b      	lsrs	r3, r3, #24
 8005bbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bc2:	ee07 3a90 	vmov	s15, r3
 8005bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005bce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bde:	ee17 2a90 	vmov	r2, s15
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005be6:	e008      	b.n	8005bfa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	609a      	str	r2, [r3, #8]
}
 8005bfa:	bf00      	nop
 8005bfc:	3724      	adds	r7, #36	@ 0x24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	58024400 	.word	0x58024400
 8005c0c:	03d09000 	.word	0x03d09000
 8005c10:	46000000 	.word	0x46000000
 8005c14:	4c742400 	.word	0x4c742400
 8005c18:	4a742400 	.word	0x4a742400
 8005c1c:	4bbebc20 	.word	0x4bbebc20

08005c20 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b089      	sub	sp, #36	@ 0x24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c28:	4ba1      	ldr	r3, [pc, #644]	@ (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c2c:	f003 0303 	and.w	r3, r3, #3
 8005c30:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005c32:	4b9f      	ldr	r3, [pc, #636]	@ (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c36:	0d1b      	lsrs	r3, r3, #20
 8005c38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c3c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005c3e:	4b9c      	ldr	r3, [pc, #624]	@ (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c42:	0a1b      	lsrs	r3, r3, #8
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005c4a:	4b99      	ldr	r3, [pc, #612]	@ (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c4e:	08db      	lsrs	r3, r3, #3
 8005c50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	fb02 f303 	mul.w	r3, r2, r3
 8005c5a:	ee07 3a90 	vmov	s15, r3
 8005c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 8111 	beq.w	8005e90 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	f000 8083 	beq.w	8005d7c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	f200 80a1 	bhi.w	8005dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d003      	beq.n	8005c8c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d056      	beq.n	8005d38 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005c8a:	e099      	b.n	8005dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c8c:	4b88      	ldr	r3, [pc, #544]	@ (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0320 	and.w	r3, r3, #32
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d02d      	beq.n	8005cf4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c98:	4b85      	ldr	r3, [pc, #532]	@ (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	08db      	lsrs	r3, r3, #3
 8005c9e:	f003 0303 	and.w	r3, r3, #3
 8005ca2:	4a84      	ldr	r2, [pc, #528]	@ (8005eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	ee07 3a90 	vmov	s15, r3
 8005cb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	ee07 3a90 	vmov	s15, r3
 8005cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cc2:	4b7b      	ldr	r3, [pc, #492]	@ (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cca:	ee07 3a90 	vmov	s15, r3
 8005cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cd6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ce2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005cf2:	e087      	b.n	8005e04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	ee07 3a90 	vmov	s15, r3
 8005cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cfe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d06:	4b6a      	ldr	r3, [pc, #424]	@ (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d0e:	ee07 3a90 	vmov	s15, r3
 8005d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d1a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d36:	e065      	b.n	8005e04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	ee07 3a90 	vmov	s15, r3
 8005d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d42:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d4a:	4b59      	ldr	r3, [pc, #356]	@ (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d52:	ee07 3a90 	vmov	s15, r3
 8005d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d5e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d7a:	e043      	b.n	8005e04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	ee07 3a90 	vmov	s15, r3
 8005d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d86:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d8e:	4b48      	ldr	r3, [pc, #288]	@ (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d96:	ee07 3a90 	vmov	s15, r3
 8005d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005da2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dbe:	e021      	b.n	8005e04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	ee07 3a90 	vmov	s15, r3
 8005dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dd2:	4b37      	ldr	r3, [pc, #220]	@ (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dda:	ee07 3a90 	vmov	s15, r3
 8005dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005de2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005de6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005df2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e02:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005e04:	4b2a      	ldr	r3, [pc, #168]	@ (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e08:	0a5b      	lsrs	r3, r3, #9
 8005e0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e0e:	ee07 3a90 	vmov	s15, r3
 8005e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e2a:	ee17 2a90 	vmov	r2, s15
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005e32:	4b1f      	ldr	r3, [pc, #124]	@ (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e36:	0c1b      	lsrs	r3, r3, #16
 8005e38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e3c:	ee07 3a90 	vmov	s15, r3
 8005e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e58:	ee17 2a90 	vmov	r2, s15
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005e60:	4b13      	ldr	r3, [pc, #76]	@ (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e64:	0e1b      	lsrs	r3, r3, #24
 8005e66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e6a:	ee07 3a90 	vmov	s15, r3
 8005e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e86:	ee17 2a90 	vmov	r2, s15
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	609a      	str	r2, [r3, #8]
}
 8005ea2:	bf00      	nop
 8005ea4:	3724      	adds	r7, #36	@ 0x24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	58024400 	.word	0x58024400
 8005eb4:	03d09000 	.word	0x03d09000
 8005eb8:	46000000 	.word	0x46000000
 8005ebc:	4c742400 	.word	0x4c742400
 8005ec0:	4a742400 	.word	0x4a742400
 8005ec4:	4bbebc20 	.word	0x4bbebc20

08005ec8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b089      	sub	sp, #36	@ 0x24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ed0:	4ba0      	ldr	r3, [pc, #640]	@ (8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed4:	f003 0303 	and.w	r3, r3, #3
 8005ed8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005eda:	4b9e      	ldr	r3, [pc, #632]	@ (8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ede:	091b      	lsrs	r3, r3, #4
 8005ee0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ee4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005ee6:	4b9b      	ldr	r3, [pc, #620]	@ (8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005ef0:	4b98      	ldr	r3, [pc, #608]	@ (8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ef4:	08db      	lsrs	r3, r3, #3
 8005ef6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	fb02 f303 	mul.w	r3, r2, r3
 8005f00:	ee07 3a90 	vmov	s15, r3
 8005f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f08:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 8111 	beq.w	8006136 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	f000 8083 	beq.w	8006022 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	f200 80a1 	bhi.w	8006066 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d056      	beq.n	8005fde <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005f30:	e099      	b.n	8006066 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f32:	4b88      	ldr	r3, [pc, #544]	@ (8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d02d      	beq.n	8005f9a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f3e:	4b85      	ldr	r3, [pc, #532]	@ (8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	08db      	lsrs	r3, r3, #3
 8005f44:	f003 0303 	and.w	r3, r3, #3
 8005f48:	4a83      	ldr	r2, [pc, #524]	@ (8006158 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f4e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	ee07 3a90 	vmov	s15, r3
 8005f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	ee07 3a90 	vmov	s15, r3
 8005f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f68:	4b7a      	ldr	r3, [pc, #488]	@ (8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f70:	ee07 3a90 	vmov	s15, r3
 8005f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f78:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f7c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800615c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005f80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f94:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f98:	e087      	b.n	80060aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	ee07 3a90 	vmov	s15, r3
 8005fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006160 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005fa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fac:	4b69      	ldr	r3, [pc, #420]	@ (8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb4:	ee07 3a90 	vmov	s15, r3
 8005fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fc0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800615c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005fc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fcc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fdc:	e065      	b.n	80060aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	ee07 3a90 	vmov	s15, r3
 8005fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006164 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005fec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ff0:	4b58      	ldr	r3, [pc, #352]	@ (8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ff8:	ee07 3a90 	vmov	s15, r3
 8005ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006000:	ed97 6a03 	vldr	s12, [r7, #12]
 8006004:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800615c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006008:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800600c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006010:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006014:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800601c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006020:	e043      	b.n	80060aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	ee07 3a90 	vmov	s15, r3
 8006028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800602c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006168 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006030:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006034:	4b47      	ldr	r3, [pc, #284]	@ (8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800603c:	ee07 3a90 	vmov	s15, r3
 8006040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006044:	ed97 6a03 	vldr	s12, [r7, #12]
 8006048:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800615c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800604c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006050:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006054:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006058:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800605c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006060:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006064:	e021      	b.n	80060aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	ee07 3a90 	vmov	s15, r3
 800606c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006070:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006160 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006074:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006078:	4b36      	ldr	r3, [pc, #216]	@ (8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800607a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800607c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006080:	ee07 3a90 	vmov	s15, r3
 8006084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006088:	ed97 6a03 	vldr	s12, [r7, #12]
 800608c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800615c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006090:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006094:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006098:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800609c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060a8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80060aa:	4b2a      	ldr	r3, [pc, #168]	@ (8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ae:	0a5b      	lsrs	r3, r3, #9
 80060b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060b4:	ee07 3a90 	vmov	s15, r3
 80060b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80060c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060d0:	ee17 2a90 	vmov	r2, s15
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80060d8:	4b1e      	ldr	r3, [pc, #120]	@ (8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060dc:	0c1b      	lsrs	r3, r3, #16
 80060de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060e2:	ee07 3a90 	vmov	s15, r3
 80060e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80060f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060fe:	ee17 2a90 	vmov	r2, s15
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006106:	4b13      	ldr	r3, [pc, #76]	@ (8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800610a:	0e1b      	lsrs	r3, r3, #24
 800610c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006110:	ee07 3a90 	vmov	s15, r3
 8006114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006118:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800611c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006120:	edd7 6a07 	vldr	s13, [r7, #28]
 8006124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800612c:	ee17 2a90 	vmov	r2, s15
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006134:	e008      	b.n	8006148 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	609a      	str	r2, [r3, #8]
}
 8006148:	bf00      	nop
 800614a:	3724      	adds	r7, #36	@ 0x24
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	58024400 	.word	0x58024400
 8006158:	03d09000 	.word	0x03d09000
 800615c:	46000000 	.word	0x46000000
 8006160:	4c742400 	.word	0x4c742400
 8006164:	4a742400 	.word	0x4a742400
 8006168:	4bbebc20 	.word	0x4bbebc20

0800616c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800617a:	4b53      	ldr	r3, [pc, #332]	@ (80062c8 <RCCEx_PLL2_Config+0x15c>)
 800617c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800617e:	f003 0303 	and.w	r3, r3, #3
 8006182:	2b03      	cmp	r3, #3
 8006184:	d101      	bne.n	800618a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e099      	b.n	80062be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800618a:	4b4f      	ldr	r3, [pc, #316]	@ (80062c8 <RCCEx_PLL2_Config+0x15c>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a4e      	ldr	r2, [pc, #312]	@ (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006190:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006194:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006196:	f7fa fdb1 	bl	8000cfc <HAL_GetTick>
 800619a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800619c:	e008      	b.n	80061b0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800619e:	f7fa fdad 	bl	8000cfc <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d901      	bls.n	80061b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e086      	b.n	80062be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061b0:	4b45      	ldr	r3, [pc, #276]	@ (80062c8 <RCCEx_PLL2_Config+0x15c>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1f0      	bne.n	800619e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80061bc:	4b42      	ldr	r3, [pc, #264]	@ (80062c8 <RCCEx_PLL2_Config+0x15c>)
 80061be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	031b      	lsls	r3, r3, #12
 80061ca:	493f      	ldr	r1, [pc, #252]	@ (80062c8 <RCCEx_PLL2_Config+0x15c>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	628b      	str	r3, [r1, #40]	@ 0x28
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	3b01      	subs	r3, #1
 80061d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	3b01      	subs	r3, #1
 80061e0:	025b      	lsls	r3, r3, #9
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	431a      	orrs	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	3b01      	subs	r3, #1
 80061ec:	041b      	lsls	r3, r3, #16
 80061ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80061f2:	431a      	orrs	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	3b01      	subs	r3, #1
 80061fa:	061b      	lsls	r3, r3, #24
 80061fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006200:	4931      	ldr	r1, [pc, #196]	@ (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006202:	4313      	orrs	r3, r2
 8006204:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006206:	4b30      	ldr	r3, [pc, #192]	@ (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	492d      	ldr	r1, [pc, #180]	@ (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006214:	4313      	orrs	r3, r2
 8006216:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006218:	4b2b      	ldr	r3, [pc, #172]	@ (80062c8 <RCCEx_PLL2_Config+0x15c>)
 800621a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621c:	f023 0220 	bic.w	r2, r3, #32
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	4928      	ldr	r1, [pc, #160]	@ (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006226:	4313      	orrs	r3, r2
 8006228:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800622a:	4b27      	ldr	r3, [pc, #156]	@ (80062c8 <RCCEx_PLL2_Config+0x15c>)
 800622c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800622e:	4a26      	ldr	r2, [pc, #152]	@ (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006230:	f023 0310 	bic.w	r3, r3, #16
 8006234:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006236:	4b24      	ldr	r3, [pc, #144]	@ (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006238:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800623a:	4b24      	ldr	r3, [pc, #144]	@ (80062cc <RCCEx_PLL2_Config+0x160>)
 800623c:	4013      	ands	r3, r2
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	69d2      	ldr	r2, [r2, #28]
 8006242:	00d2      	lsls	r2, r2, #3
 8006244:	4920      	ldr	r1, [pc, #128]	@ (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006246:	4313      	orrs	r3, r2
 8006248:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800624a:	4b1f      	ldr	r3, [pc, #124]	@ (80062c8 <RCCEx_PLL2_Config+0x15c>)
 800624c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800624e:	4a1e      	ldr	r2, [pc, #120]	@ (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006250:	f043 0310 	orr.w	r3, r3, #16
 8006254:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d106      	bne.n	800626a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800625c:	4b1a      	ldr	r3, [pc, #104]	@ (80062c8 <RCCEx_PLL2_Config+0x15c>)
 800625e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006260:	4a19      	ldr	r2, [pc, #100]	@ (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006262:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006266:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006268:	e00f      	b.n	800628a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d106      	bne.n	800627e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006270:	4b15      	ldr	r3, [pc, #84]	@ (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006274:	4a14      	ldr	r2, [pc, #80]	@ (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006276:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800627a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800627c:	e005      	b.n	800628a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800627e:	4b12      	ldr	r3, [pc, #72]	@ (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006282:	4a11      	ldr	r2, [pc, #68]	@ (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006284:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006288:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800628a:	4b0f      	ldr	r3, [pc, #60]	@ (80062c8 <RCCEx_PLL2_Config+0x15c>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a0e      	ldr	r2, [pc, #56]	@ (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006290:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006294:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006296:	f7fa fd31 	bl	8000cfc <HAL_GetTick>
 800629a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800629c:	e008      	b.n	80062b0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800629e:	f7fa fd2d 	bl	8000cfc <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d901      	bls.n	80062b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e006      	b.n	80062be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062b0:	4b05      	ldr	r3, [pc, #20]	@ (80062c8 <RCCEx_PLL2_Config+0x15c>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d0f0      	beq.n	800629e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	58024400 	.word	0x58024400
 80062cc:	ffff0007 	.word	0xffff0007

080062d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80062de:	4b53      	ldr	r3, [pc, #332]	@ (800642c <RCCEx_PLL3_Config+0x15c>)
 80062e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	2b03      	cmp	r3, #3
 80062e8:	d101      	bne.n	80062ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e099      	b.n	8006422 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80062ee:	4b4f      	ldr	r3, [pc, #316]	@ (800642c <RCCEx_PLL3_Config+0x15c>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a4e      	ldr	r2, [pc, #312]	@ (800642c <RCCEx_PLL3_Config+0x15c>)
 80062f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062fa:	f7fa fcff 	bl	8000cfc <HAL_GetTick>
 80062fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006300:	e008      	b.n	8006314 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006302:	f7fa fcfb 	bl	8000cfc <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	d901      	bls.n	8006314 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e086      	b.n	8006422 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006314:	4b45      	ldr	r3, [pc, #276]	@ (800642c <RCCEx_PLL3_Config+0x15c>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1f0      	bne.n	8006302 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006320:	4b42      	ldr	r3, [pc, #264]	@ (800642c <RCCEx_PLL3_Config+0x15c>)
 8006322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006324:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	051b      	lsls	r3, r3, #20
 800632e:	493f      	ldr	r1, [pc, #252]	@ (800642c <RCCEx_PLL3_Config+0x15c>)
 8006330:	4313      	orrs	r3, r2
 8006332:	628b      	str	r3, [r1, #40]	@ 0x28
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	3b01      	subs	r3, #1
 800633a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	3b01      	subs	r3, #1
 8006344:	025b      	lsls	r3, r3, #9
 8006346:	b29b      	uxth	r3, r3
 8006348:	431a      	orrs	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	3b01      	subs	r3, #1
 8006350:	041b      	lsls	r3, r3, #16
 8006352:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006356:	431a      	orrs	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	3b01      	subs	r3, #1
 800635e:	061b      	lsls	r3, r3, #24
 8006360:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006364:	4931      	ldr	r1, [pc, #196]	@ (800642c <RCCEx_PLL3_Config+0x15c>)
 8006366:	4313      	orrs	r3, r2
 8006368:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800636a:	4b30      	ldr	r3, [pc, #192]	@ (800642c <RCCEx_PLL3_Config+0x15c>)
 800636c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800636e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	492d      	ldr	r1, [pc, #180]	@ (800642c <RCCEx_PLL3_Config+0x15c>)
 8006378:	4313      	orrs	r3, r2
 800637a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800637c:	4b2b      	ldr	r3, [pc, #172]	@ (800642c <RCCEx_PLL3_Config+0x15c>)
 800637e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006380:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	4928      	ldr	r1, [pc, #160]	@ (800642c <RCCEx_PLL3_Config+0x15c>)
 800638a:	4313      	orrs	r3, r2
 800638c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800638e:	4b27      	ldr	r3, [pc, #156]	@ (800642c <RCCEx_PLL3_Config+0x15c>)
 8006390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006392:	4a26      	ldr	r2, [pc, #152]	@ (800642c <RCCEx_PLL3_Config+0x15c>)
 8006394:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006398:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800639a:	4b24      	ldr	r3, [pc, #144]	@ (800642c <RCCEx_PLL3_Config+0x15c>)
 800639c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800639e:	4b24      	ldr	r3, [pc, #144]	@ (8006430 <RCCEx_PLL3_Config+0x160>)
 80063a0:	4013      	ands	r3, r2
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	69d2      	ldr	r2, [r2, #28]
 80063a6:	00d2      	lsls	r2, r2, #3
 80063a8:	4920      	ldr	r1, [pc, #128]	@ (800642c <RCCEx_PLL3_Config+0x15c>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80063ae:	4b1f      	ldr	r3, [pc, #124]	@ (800642c <RCCEx_PLL3_Config+0x15c>)
 80063b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b2:	4a1e      	ldr	r2, [pc, #120]	@ (800642c <RCCEx_PLL3_Config+0x15c>)
 80063b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d106      	bne.n	80063ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80063c0:	4b1a      	ldr	r3, [pc, #104]	@ (800642c <RCCEx_PLL3_Config+0x15c>)
 80063c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c4:	4a19      	ldr	r2, [pc, #100]	@ (800642c <RCCEx_PLL3_Config+0x15c>)
 80063c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80063ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80063cc:	e00f      	b.n	80063ee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d106      	bne.n	80063e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80063d4:	4b15      	ldr	r3, [pc, #84]	@ (800642c <RCCEx_PLL3_Config+0x15c>)
 80063d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d8:	4a14      	ldr	r2, [pc, #80]	@ (800642c <RCCEx_PLL3_Config+0x15c>)
 80063da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80063de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80063e0:	e005      	b.n	80063ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80063e2:	4b12      	ldr	r3, [pc, #72]	@ (800642c <RCCEx_PLL3_Config+0x15c>)
 80063e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e6:	4a11      	ldr	r2, [pc, #68]	@ (800642c <RCCEx_PLL3_Config+0x15c>)
 80063e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80063ee:	4b0f      	ldr	r3, [pc, #60]	@ (800642c <RCCEx_PLL3_Config+0x15c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a0e      	ldr	r2, [pc, #56]	@ (800642c <RCCEx_PLL3_Config+0x15c>)
 80063f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063fa:	f7fa fc7f 	bl	8000cfc <HAL_GetTick>
 80063fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006400:	e008      	b.n	8006414 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006402:	f7fa fc7b 	bl	8000cfc <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	2b02      	cmp	r3, #2
 800640e:	d901      	bls.n	8006414 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e006      	b.n	8006422 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006414:	4b05      	ldr	r3, [pc, #20]	@ (800642c <RCCEx_PLL3_Config+0x15c>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d0f0      	beq.n	8006402 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006420:	7bfb      	ldrb	r3, [r7, #15]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	58024400 	.word	0x58024400
 8006430:	ffff0007 	.word	0xffff0007

08006434 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e049      	b.n	80064da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d106      	bne.n	8006460 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7fa fafe 	bl	8000a5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2202      	movs	r2, #2
 8006464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3304      	adds	r3, #4
 8006470:	4619      	mov	r1, r3
 8006472:	4610      	mov	r0, r2
 8006474:	f000 fad6 	bl	8006a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
	...

080064e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d001      	beq.n	80064fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e054      	b.n	80065a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68da      	ldr	r2, [r3, #12]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f042 0201 	orr.w	r2, r2, #1
 8006512:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a26      	ldr	r2, [pc, #152]	@ (80065b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d022      	beq.n	8006564 <HAL_TIM_Base_Start_IT+0x80>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006526:	d01d      	beq.n	8006564 <HAL_TIM_Base_Start_IT+0x80>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a22      	ldr	r2, [pc, #136]	@ (80065b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d018      	beq.n	8006564 <HAL_TIM_Base_Start_IT+0x80>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a21      	ldr	r2, [pc, #132]	@ (80065bc <HAL_TIM_Base_Start_IT+0xd8>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d013      	beq.n	8006564 <HAL_TIM_Base_Start_IT+0x80>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a1f      	ldr	r2, [pc, #124]	@ (80065c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d00e      	beq.n	8006564 <HAL_TIM_Base_Start_IT+0x80>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a1e      	ldr	r2, [pc, #120]	@ (80065c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d009      	beq.n	8006564 <HAL_TIM_Base_Start_IT+0x80>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a1c      	ldr	r2, [pc, #112]	@ (80065c8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d004      	beq.n	8006564 <HAL_TIM_Base_Start_IT+0x80>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a1b      	ldr	r2, [pc, #108]	@ (80065cc <HAL_TIM_Base_Start_IT+0xe8>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d115      	bne.n	8006590 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689a      	ldr	r2, [r3, #8]
 800656a:	4b19      	ldr	r3, [pc, #100]	@ (80065d0 <HAL_TIM_Base_Start_IT+0xec>)
 800656c:	4013      	ands	r3, r2
 800656e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2b06      	cmp	r3, #6
 8006574:	d015      	beq.n	80065a2 <HAL_TIM_Base_Start_IT+0xbe>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800657c:	d011      	beq.n	80065a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f042 0201 	orr.w	r2, r2, #1
 800658c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800658e:	e008      	b.n	80065a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f042 0201 	orr.w	r2, r2, #1
 800659e:	601a      	str	r2, [r3, #0]
 80065a0:	e000      	b.n	80065a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	40010000 	.word	0x40010000
 80065b8:	40000400 	.word	0x40000400
 80065bc:	40000800 	.word	0x40000800
 80065c0:	40000c00 	.word	0x40000c00
 80065c4:	40010400 	.word	0x40010400
 80065c8:	40001800 	.word	0x40001800
 80065cc:	40014000 	.word	0x40014000
 80065d0:	00010007 	.word	0x00010007

080065d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d020      	beq.n	8006638 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f003 0302 	and.w	r3, r3, #2
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d01b      	beq.n	8006638 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f06f 0202 	mvn.w	r2, #2
 8006608:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	f003 0303 	and.w	r3, r3, #3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f9e2 	bl	80069e8 <HAL_TIM_IC_CaptureCallback>
 8006624:	e005      	b.n	8006632 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f9d4 	bl	80069d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f9e5 	bl	80069fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	f003 0304 	and.w	r3, r3, #4
 800663e:	2b00      	cmp	r3, #0
 8006640:	d020      	beq.n	8006684 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f003 0304 	and.w	r3, r3, #4
 8006648:	2b00      	cmp	r3, #0
 800664a:	d01b      	beq.n	8006684 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f06f 0204 	mvn.w	r2, #4
 8006654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2202      	movs	r2, #2
 800665a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f9bc 	bl	80069e8 <HAL_TIM_IC_CaptureCallback>
 8006670:	e005      	b.n	800667e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f9ae 	bl	80069d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f9bf 	bl	80069fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	f003 0308 	and.w	r3, r3, #8
 800668a:	2b00      	cmp	r3, #0
 800668c:	d020      	beq.n	80066d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f003 0308 	and.w	r3, r3, #8
 8006694:	2b00      	cmp	r3, #0
 8006696:	d01b      	beq.n	80066d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f06f 0208 	mvn.w	r2, #8
 80066a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2204      	movs	r2, #4
 80066a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	f003 0303 	and.w	r3, r3, #3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f996 	bl	80069e8 <HAL_TIM_IC_CaptureCallback>
 80066bc:	e005      	b.n	80066ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f988 	bl	80069d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f999 	bl	80069fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f003 0310 	and.w	r3, r3, #16
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d020      	beq.n	800671c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f003 0310 	and.w	r3, r3, #16
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d01b      	beq.n	800671c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f06f 0210 	mvn.w	r2, #16
 80066ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2208      	movs	r2, #8
 80066f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d003      	beq.n	800670a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f970 	bl	80069e8 <HAL_TIM_IC_CaptureCallback>
 8006708:	e005      	b.n	8006716 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f962 	bl	80069d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f973 	bl	80069fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00c      	beq.n	8006740 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b00      	cmp	r3, #0
 800672e:	d007      	beq.n	8006740 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f06f 0201 	mvn.w	r2, #1
 8006738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7f9 feea 	bl	8000514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006746:	2b00      	cmp	r3, #0
 8006748:	d104      	bne.n	8006754 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00c      	beq.n	800676e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800675a:	2b00      	cmp	r3, #0
 800675c:	d007      	beq.n	800676e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fb31 	bl	8006dd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00c      	beq.n	8006792 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800677e:	2b00      	cmp	r3, #0
 8006780:	d007      	beq.n	8006792 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800678a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fb29 	bl	8006de4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00c      	beq.n	80067b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d007      	beq.n	80067b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80067ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f92d 	bl	8006a10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	f003 0320 	and.w	r3, r3, #32
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00c      	beq.n	80067da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f003 0320 	and.w	r3, r3, #32
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d007      	beq.n	80067da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f06f 0220 	mvn.w	r2, #32
 80067d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 faf1 	bl	8006dbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067da:	bf00      	nop
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
	...

080067e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d101      	bne.n	8006800 <HAL_TIM_ConfigClockSource+0x1c>
 80067fc:	2302      	movs	r3, #2
 80067fe:	e0dc      	b.n	80069ba <HAL_TIM_ConfigClockSource+0x1d6>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2202      	movs	r2, #2
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	4b6a      	ldr	r3, [pc, #424]	@ (80069c4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800681c:	4013      	ands	r3, r2
 800681e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006826:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a64      	ldr	r2, [pc, #400]	@ (80069c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006836:	4293      	cmp	r3, r2
 8006838:	f000 80a9 	beq.w	800698e <HAL_TIM_ConfigClockSource+0x1aa>
 800683c:	4a62      	ldr	r2, [pc, #392]	@ (80069c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800683e:	4293      	cmp	r3, r2
 8006840:	f200 80ae 	bhi.w	80069a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006844:	4a61      	ldr	r2, [pc, #388]	@ (80069cc <HAL_TIM_ConfigClockSource+0x1e8>)
 8006846:	4293      	cmp	r3, r2
 8006848:	f000 80a1 	beq.w	800698e <HAL_TIM_ConfigClockSource+0x1aa>
 800684c:	4a5f      	ldr	r2, [pc, #380]	@ (80069cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800684e:	4293      	cmp	r3, r2
 8006850:	f200 80a6 	bhi.w	80069a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006854:	4a5e      	ldr	r2, [pc, #376]	@ (80069d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006856:	4293      	cmp	r3, r2
 8006858:	f000 8099 	beq.w	800698e <HAL_TIM_ConfigClockSource+0x1aa>
 800685c:	4a5c      	ldr	r2, [pc, #368]	@ (80069d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800685e:	4293      	cmp	r3, r2
 8006860:	f200 809e 	bhi.w	80069a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006864:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006868:	f000 8091 	beq.w	800698e <HAL_TIM_ConfigClockSource+0x1aa>
 800686c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006870:	f200 8096 	bhi.w	80069a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006874:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006878:	f000 8089 	beq.w	800698e <HAL_TIM_ConfigClockSource+0x1aa>
 800687c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006880:	f200 808e 	bhi.w	80069a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006884:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006888:	d03e      	beq.n	8006908 <HAL_TIM_ConfigClockSource+0x124>
 800688a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800688e:	f200 8087 	bhi.w	80069a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006896:	f000 8086 	beq.w	80069a6 <HAL_TIM_ConfigClockSource+0x1c2>
 800689a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800689e:	d87f      	bhi.n	80069a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80068a0:	2b70      	cmp	r3, #112	@ 0x70
 80068a2:	d01a      	beq.n	80068da <HAL_TIM_ConfigClockSource+0xf6>
 80068a4:	2b70      	cmp	r3, #112	@ 0x70
 80068a6:	d87b      	bhi.n	80069a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80068a8:	2b60      	cmp	r3, #96	@ 0x60
 80068aa:	d050      	beq.n	800694e <HAL_TIM_ConfigClockSource+0x16a>
 80068ac:	2b60      	cmp	r3, #96	@ 0x60
 80068ae:	d877      	bhi.n	80069a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80068b0:	2b50      	cmp	r3, #80	@ 0x50
 80068b2:	d03c      	beq.n	800692e <HAL_TIM_ConfigClockSource+0x14a>
 80068b4:	2b50      	cmp	r3, #80	@ 0x50
 80068b6:	d873      	bhi.n	80069a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80068b8:	2b40      	cmp	r3, #64	@ 0x40
 80068ba:	d058      	beq.n	800696e <HAL_TIM_ConfigClockSource+0x18a>
 80068bc:	2b40      	cmp	r3, #64	@ 0x40
 80068be:	d86f      	bhi.n	80069a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80068c0:	2b30      	cmp	r3, #48	@ 0x30
 80068c2:	d064      	beq.n	800698e <HAL_TIM_ConfigClockSource+0x1aa>
 80068c4:	2b30      	cmp	r3, #48	@ 0x30
 80068c6:	d86b      	bhi.n	80069a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80068c8:	2b20      	cmp	r3, #32
 80068ca:	d060      	beq.n	800698e <HAL_TIM_ConfigClockSource+0x1aa>
 80068cc:	2b20      	cmp	r3, #32
 80068ce:	d867      	bhi.n	80069a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d05c      	beq.n	800698e <HAL_TIM_ConfigClockSource+0x1aa>
 80068d4:	2b10      	cmp	r3, #16
 80068d6:	d05a      	beq.n	800698e <HAL_TIM_ConfigClockSource+0x1aa>
 80068d8:	e062      	b.n	80069a0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068ea:	f000 f9b9 	bl	8006c60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80068fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	609a      	str	r2, [r3, #8]
      break;
 8006906:	e04f      	b.n	80069a8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006918:	f000 f9a2 	bl	8006c60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689a      	ldr	r2, [r3, #8]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800692a:	609a      	str	r2, [r3, #8]
      break;
 800692c:	e03c      	b.n	80069a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800693a:	461a      	mov	r2, r3
 800693c:	f000 f912 	bl	8006b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2150      	movs	r1, #80	@ 0x50
 8006946:	4618      	mov	r0, r3
 8006948:	f000 f96c 	bl	8006c24 <TIM_ITRx_SetConfig>
      break;
 800694c:	e02c      	b.n	80069a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800695a:	461a      	mov	r2, r3
 800695c:	f000 f931 	bl	8006bc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2160      	movs	r1, #96	@ 0x60
 8006966:	4618      	mov	r0, r3
 8006968:	f000 f95c 	bl	8006c24 <TIM_ITRx_SetConfig>
      break;
 800696c:	e01c      	b.n	80069a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800697a:	461a      	mov	r2, r3
 800697c:	f000 f8f2 	bl	8006b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2140      	movs	r1, #64	@ 0x40
 8006986:	4618      	mov	r0, r3
 8006988:	f000 f94c 	bl	8006c24 <TIM_ITRx_SetConfig>
      break;
 800698c:	e00c      	b.n	80069a8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4619      	mov	r1, r3
 8006998:	4610      	mov	r0, r2
 800699a:	f000 f943 	bl	8006c24 <TIM_ITRx_SetConfig>
      break;
 800699e:	e003      	b.n	80069a8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	73fb      	strb	r3, [r7, #15]
      break;
 80069a4:	e000      	b.n	80069a8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80069a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	ffceff88 	.word	0xffceff88
 80069c8:	00100040 	.word	0x00100040
 80069cc:	00100030 	.word	0x00100030
 80069d0:	00100020 	.word	0x00100020

080069d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a43      	ldr	r2, [pc, #268]	@ (8006b44 <TIM_Base_SetConfig+0x120>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d013      	beq.n	8006a64 <TIM_Base_SetConfig+0x40>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a42:	d00f      	beq.n	8006a64 <TIM_Base_SetConfig+0x40>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a40      	ldr	r2, [pc, #256]	@ (8006b48 <TIM_Base_SetConfig+0x124>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d00b      	beq.n	8006a64 <TIM_Base_SetConfig+0x40>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a3f      	ldr	r2, [pc, #252]	@ (8006b4c <TIM_Base_SetConfig+0x128>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d007      	beq.n	8006a64 <TIM_Base_SetConfig+0x40>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a3e      	ldr	r2, [pc, #248]	@ (8006b50 <TIM_Base_SetConfig+0x12c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d003      	beq.n	8006a64 <TIM_Base_SetConfig+0x40>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a3d      	ldr	r2, [pc, #244]	@ (8006b54 <TIM_Base_SetConfig+0x130>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d108      	bne.n	8006a76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a32      	ldr	r2, [pc, #200]	@ (8006b44 <TIM_Base_SetConfig+0x120>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d01f      	beq.n	8006abe <TIM_Base_SetConfig+0x9a>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a84:	d01b      	beq.n	8006abe <TIM_Base_SetConfig+0x9a>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a2f      	ldr	r2, [pc, #188]	@ (8006b48 <TIM_Base_SetConfig+0x124>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d017      	beq.n	8006abe <TIM_Base_SetConfig+0x9a>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a2e      	ldr	r2, [pc, #184]	@ (8006b4c <TIM_Base_SetConfig+0x128>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d013      	beq.n	8006abe <TIM_Base_SetConfig+0x9a>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a2d      	ldr	r2, [pc, #180]	@ (8006b50 <TIM_Base_SetConfig+0x12c>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d00f      	beq.n	8006abe <TIM_Base_SetConfig+0x9a>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a2c      	ldr	r2, [pc, #176]	@ (8006b54 <TIM_Base_SetConfig+0x130>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d00b      	beq.n	8006abe <TIM_Base_SetConfig+0x9a>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a2b      	ldr	r2, [pc, #172]	@ (8006b58 <TIM_Base_SetConfig+0x134>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d007      	beq.n	8006abe <TIM_Base_SetConfig+0x9a>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a2a      	ldr	r2, [pc, #168]	@ (8006b5c <TIM_Base_SetConfig+0x138>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d003      	beq.n	8006abe <TIM_Base_SetConfig+0x9a>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a29      	ldr	r2, [pc, #164]	@ (8006b60 <TIM_Base_SetConfig+0x13c>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d108      	bne.n	8006ad0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	689a      	ldr	r2, [r3, #8]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a14      	ldr	r2, [pc, #80]	@ (8006b44 <TIM_Base_SetConfig+0x120>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d00f      	beq.n	8006b16 <TIM_Base_SetConfig+0xf2>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a16      	ldr	r2, [pc, #88]	@ (8006b54 <TIM_Base_SetConfig+0x130>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d00b      	beq.n	8006b16 <TIM_Base_SetConfig+0xf2>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a15      	ldr	r2, [pc, #84]	@ (8006b58 <TIM_Base_SetConfig+0x134>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d007      	beq.n	8006b16 <TIM_Base_SetConfig+0xf2>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a14      	ldr	r2, [pc, #80]	@ (8006b5c <TIM_Base_SetConfig+0x138>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d003      	beq.n	8006b16 <TIM_Base_SetConfig+0xf2>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a13      	ldr	r2, [pc, #76]	@ (8006b60 <TIM_Base_SetConfig+0x13c>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d103      	bne.n	8006b1e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	691a      	ldr	r2, [r3, #16]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f043 0204 	orr.w	r2, r3, #4
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	601a      	str	r2, [r3, #0]
}
 8006b36:	bf00      	nop
 8006b38:	3714      	adds	r7, #20
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	40010000 	.word	0x40010000
 8006b48:	40000400 	.word	0x40000400
 8006b4c:	40000800 	.word	0x40000800
 8006b50:	40000c00 	.word	0x40000c00
 8006b54:	40010400 	.word	0x40010400
 8006b58:	40014000 	.word	0x40014000
 8006b5c:	40014400 	.word	0x40014400
 8006b60:	40014800 	.word	0x40014800

08006b64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b087      	sub	sp, #28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6a1b      	ldr	r3, [r3, #32]
 8006b74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	f023 0201 	bic.w	r2, r3, #1
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	011b      	lsls	r3, r3, #4
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f023 030a 	bic.w	r3, r3, #10
 8006ba0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	621a      	str	r2, [r3, #32]
}
 8006bb6:	bf00      	nop
 8006bb8:	371c      	adds	r7, #28
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b087      	sub	sp, #28
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	60f8      	str	r0, [r7, #12]
 8006bca:	60b9      	str	r1, [r7, #8]
 8006bcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	f023 0210 	bic.w	r2, r3, #16
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006bec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	031b      	lsls	r3, r3, #12
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006bfe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	621a      	str	r2, [r3, #32]
}
 8006c16:	bf00      	nop
 8006c18:	371c      	adds	r7, #28
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
	...

08006c24 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	4b09      	ldr	r3, [pc, #36]	@ (8006c5c <TIM_ITRx_SetConfig+0x38>)
 8006c38:	4013      	ands	r3, r2
 8006c3a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	f043 0307 	orr.w	r3, r3, #7
 8006c46:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	609a      	str	r2, [r3, #8]
}
 8006c4e:	bf00      	nop
 8006c50:	3714      	adds	r7, #20
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	ffcfff8f 	.word	0xffcfff8f

08006c60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b087      	sub	sp, #28
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
 8006c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	021a      	lsls	r2, r3, #8
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	431a      	orrs	r2, r3
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	609a      	str	r2, [r3, #8]
}
 8006c94:	bf00      	nop
 8006c96:	371c      	adds	r7, #28
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d101      	bne.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	e06d      	b.n	8006d94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a30      	ldr	r2, [pc, #192]	@ (8006da0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d004      	beq.n	8006cec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a2f      	ldr	r2, [pc, #188]	@ (8006da4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d108      	bne.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006cf2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a20      	ldr	r2, [pc, #128]	@ (8006da0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d022      	beq.n	8006d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d2a:	d01d      	beq.n	8006d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a1d      	ldr	r2, [pc, #116]	@ (8006da8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d018      	beq.n	8006d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a1c      	ldr	r2, [pc, #112]	@ (8006dac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d013      	beq.n	8006d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a1a      	ldr	r2, [pc, #104]	@ (8006db0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d00e      	beq.n	8006d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a15      	ldr	r2, [pc, #84]	@ (8006da4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d009      	beq.n	8006d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a16      	ldr	r2, [pc, #88]	@ (8006db4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d004      	beq.n	8006d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a15      	ldr	r2, [pc, #84]	@ (8006db8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d10c      	bne.n	8006d82 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	40010000 	.word	0x40010000
 8006da4:	40010400 	.word	0x40010400
 8006da8:	40000400 	.word	0x40000400
 8006dac:	40000800 	.word	0x40000800
 8006db0:	40000c00 	.word	0x40000c00
 8006db4:	40001800 	.word	0x40001800
 8006db8:	40014000 	.word	0x40014000

08006dbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <findslot>:
 8006df8:	4b0a      	ldr	r3, [pc, #40]	@ (8006e24 <findslot+0x2c>)
 8006dfa:	b510      	push	{r4, lr}
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	6818      	ldr	r0, [r3, #0]
 8006e00:	b118      	cbz	r0, 8006e0a <findslot+0x12>
 8006e02:	6a03      	ldr	r3, [r0, #32]
 8006e04:	b90b      	cbnz	r3, 8006e0a <findslot+0x12>
 8006e06:	f000 fb19 	bl	800743c <__sinit>
 8006e0a:	2c13      	cmp	r4, #19
 8006e0c:	d807      	bhi.n	8006e1e <findslot+0x26>
 8006e0e:	4806      	ldr	r0, [pc, #24]	@ (8006e28 <findslot+0x30>)
 8006e10:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8006e14:	3201      	adds	r2, #1
 8006e16:	d002      	beq.n	8006e1e <findslot+0x26>
 8006e18:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8006e1c:	bd10      	pop	{r4, pc}
 8006e1e:	2000      	movs	r0, #0
 8006e20:	e7fc      	b.n	8006e1c <findslot+0x24>
 8006e22:	bf00      	nop
 8006e24:	24000024 	.word	0x24000024
 8006e28:	24000164 	.word	0x24000164

08006e2c <error>:
 8006e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2e:	4604      	mov	r4, r0
 8006e30:	f000 fcd0 	bl	80077d4 <__errno>
 8006e34:	2613      	movs	r6, #19
 8006e36:	4605      	mov	r5, r0
 8006e38:	2700      	movs	r7, #0
 8006e3a:	4630      	mov	r0, r6
 8006e3c:	4639      	mov	r1, r7
 8006e3e:	beab      	bkpt	0x00ab
 8006e40:	4606      	mov	r6, r0
 8006e42:	602e      	str	r6, [r5, #0]
 8006e44:	4620      	mov	r0, r4
 8006e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006e48 <checkerror>:
 8006e48:	1c43      	adds	r3, r0, #1
 8006e4a:	d101      	bne.n	8006e50 <checkerror+0x8>
 8006e4c:	f7ff bfee 	b.w	8006e2c <error>
 8006e50:	4770      	bx	lr

08006e52 <_swiread>:
 8006e52:	b530      	push	{r4, r5, lr}
 8006e54:	b085      	sub	sp, #20
 8006e56:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006e5a:	9203      	str	r2, [sp, #12]
 8006e5c:	2406      	movs	r4, #6
 8006e5e:	ad01      	add	r5, sp, #4
 8006e60:	4620      	mov	r0, r4
 8006e62:	4629      	mov	r1, r5
 8006e64:	beab      	bkpt	0x00ab
 8006e66:	4604      	mov	r4, r0
 8006e68:	4620      	mov	r0, r4
 8006e6a:	f7ff ffed 	bl	8006e48 <checkerror>
 8006e6e:	b005      	add	sp, #20
 8006e70:	bd30      	pop	{r4, r5, pc}

08006e72 <_read>:
 8006e72:	b570      	push	{r4, r5, r6, lr}
 8006e74:	460e      	mov	r6, r1
 8006e76:	4614      	mov	r4, r2
 8006e78:	f7ff ffbe 	bl	8006df8 <findslot>
 8006e7c:	4605      	mov	r5, r0
 8006e7e:	b930      	cbnz	r0, 8006e8e <_read+0x1c>
 8006e80:	f000 fca8 	bl	80077d4 <__errno>
 8006e84:	2309      	movs	r3, #9
 8006e86:	6003      	str	r3, [r0, #0]
 8006e88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e8c:	bd70      	pop	{r4, r5, r6, pc}
 8006e8e:	6800      	ldr	r0, [r0, #0]
 8006e90:	4622      	mov	r2, r4
 8006e92:	4631      	mov	r1, r6
 8006e94:	f7ff ffdd 	bl	8006e52 <_swiread>
 8006e98:	1c43      	adds	r3, r0, #1
 8006e9a:	d0f5      	beq.n	8006e88 <_read+0x16>
 8006e9c:	686b      	ldr	r3, [r5, #4]
 8006e9e:	1a20      	subs	r0, r4, r0
 8006ea0:	4403      	add	r3, r0
 8006ea2:	606b      	str	r3, [r5, #4]
 8006ea4:	e7f2      	b.n	8006e8c <_read+0x1a>

08006ea6 <_swilseek>:
 8006ea6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ea8:	460c      	mov	r4, r1
 8006eaa:	4616      	mov	r6, r2
 8006eac:	f7ff ffa4 	bl	8006df8 <findslot>
 8006eb0:	4605      	mov	r5, r0
 8006eb2:	b940      	cbnz	r0, 8006ec6 <_swilseek+0x20>
 8006eb4:	f000 fc8e 	bl	80077d4 <__errno>
 8006eb8:	2309      	movs	r3, #9
 8006eba:	6003      	str	r3, [r0, #0]
 8006ebc:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	b003      	add	sp, #12
 8006ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ec6:	2e02      	cmp	r6, #2
 8006ec8:	d903      	bls.n	8006ed2 <_swilseek+0x2c>
 8006eca:	f000 fc83 	bl	80077d4 <__errno>
 8006ece:	2316      	movs	r3, #22
 8006ed0:	e7f3      	b.n	8006eba <_swilseek+0x14>
 8006ed2:	2e01      	cmp	r6, #1
 8006ed4:	d112      	bne.n	8006efc <_swilseek+0x56>
 8006ed6:	6843      	ldr	r3, [r0, #4]
 8006ed8:	18e4      	adds	r4, r4, r3
 8006eda:	d4f6      	bmi.n	8006eca <_swilseek+0x24>
 8006edc:	682b      	ldr	r3, [r5, #0]
 8006ede:	260a      	movs	r6, #10
 8006ee0:	e9cd 3400 	strd	r3, r4, [sp]
 8006ee4:	466f      	mov	r7, sp
 8006ee6:	4630      	mov	r0, r6
 8006ee8:	4639      	mov	r1, r7
 8006eea:	beab      	bkpt	0x00ab
 8006eec:	4606      	mov	r6, r0
 8006eee:	4630      	mov	r0, r6
 8006ef0:	f7ff ffaa 	bl	8006e48 <checkerror>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	dbe1      	blt.n	8006ebc <_swilseek+0x16>
 8006ef8:	606c      	str	r4, [r5, #4]
 8006efa:	e7e1      	b.n	8006ec0 <_swilseek+0x1a>
 8006efc:	2e02      	cmp	r6, #2
 8006efe:	6803      	ldr	r3, [r0, #0]
 8006f00:	d1ec      	bne.n	8006edc <_swilseek+0x36>
 8006f02:	9300      	str	r3, [sp, #0]
 8006f04:	260c      	movs	r6, #12
 8006f06:	466f      	mov	r7, sp
 8006f08:	4630      	mov	r0, r6
 8006f0a:	4639      	mov	r1, r7
 8006f0c:	beab      	bkpt	0x00ab
 8006f0e:	4606      	mov	r6, r0
 8006f10:	4630      	mov	r0, r6
 8006f12:	f7ff ff99 	bl	8006e48 <checkerror>
 8006f16:	1c43      	adds	r3, r0, #1
 8006f18:	d0d0      	beq.n	8006ebc <_swilseek+0x16>
 8006f1a:	4404      	add	r4, r0
 8006f1c:	e7de      	b.n	8006edc <_swilseek+0x36>

08006f1e <_lseek>:
 8006f1e:	f7ff bfc2 	b.w	8006ea6 <_swilseek>

08006f22 <_swiwrite>:
 8006f22:	b530      	push	{r4, r5, lr}
 8006f24:	b085      	sub	sp, #20
 8006f26:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006f2a:	9203      	str	r2, [sp, #12]
 8006f2c:	2405      	movs	r4, #5
 8006f2e:	ad01      	add	r5, sp, #4
 8006f30:	4620      	mov	r0, r4
 8006f32:	4629      	mov	r1, r5
 8006f34:	beab      	bkpt	0x00ab
 8006f36:	4604      	mov	r4, r0
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f7ff ff85 	bl	8006e48 <checkerror>
 8006f3e:	b005      	add	sp, #20
 8006f40:	bd30      	pop	{r4, r5, pc}

08006f42 <_write>:
 8006f42:	b570      	push	{r4, r5, r6, lr}
 8006f44:	460e      	mov	r6, r1
 8006f46:	4615      	mov	r5, r2
 8006f48:	f7ff ff56 	bl	8006df8 <findslot>
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	b930      	cbnz	r0, 8006f5e <_write+0x1c>
 8006f50:	f000 fc40 	bl	80077d4 <__errno>
 8006f54:	2309      	movs	r3, #9
 8006f56:	6003      	str	r3, [r0, #0]
 8006f58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f5c:	bd70      	pop	{r4, r5, r6, pc}
 8006f5e:	6800      	ldr	r0, [r0, #0]
 8006f60:	462a      	mov	r2, r5
 8006f62:	4631      	mov	r1, r6
 8006f64:	f7ff ffdd 	bl	8006f22 <_swiwrite>
 8006f68:	1e03      	subs	r3, r0, #0
 8006f6a:	dbf5      	blt.n	8006f58 <_write+0x16>
 8006f6c:	6862      	ldr	r2, [r4, #4]
 8006f6e:	1ae8      	subs	r0, r5, r3
 8006f70:	4402      	add	r2, r0
 8006f72:	42ab      	cmp	r3, r5
 8006f74:	6062      	str	r2, [r4, #4]
 8006f76:	d1f1      	bne.n	8006f5c <_write+0x1a>
 8006f78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006f7c:	2000      	movs	r0, #0
 8006f7e:	f7ff bf55 	b.w	8006e2c <error>

08006f82 <_swiclose>:
 8006f82:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f84:	2402      	movs	r4, #2
 8006f86:	9001      	str	r0, [sp, #4]
 8006f88:	ad01      	add	r5, sp, #4
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	4629      	mov	r1, r5
 8006f8e:	beab      	bkpt	0x00ab
 8006f90:	4604      	mov	r4, r0
 8006f92:	4620      	mov	r0, r4
 8006f94:	f7ff ff58 	bl	8006e48 <checkerror>
 8006f98:	b003      	add	sp, #12
 8006f9a:	bd30      	pop	{r4, r5, pc}

08006f9c <_close>:
 8006f9c:	b538      	push	{r3, r4, r5, lr}
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	f7ff ff2a 	bl	8006df8 <findslot>
 8006fa4:	4604      	mov	r4, r0
 8006fa6:	b930      	cbnz	r0, 8006fb6 <_close+0x1a>
 8006fa8:	f000 fc14 	bl	80077d4 <__errno>
 8006fac:	2309      	movs	r3, #9
 8006fae:	6003      	str	r3, [r0, #0]
 8006fb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006fb4:	bd38      	pop	{r3, r4, r5, pc}
 8006fb6:	3d01      	subs	r5, #1
 8006fb8:	2d01      	cmp	r5, #1
 8006fba:	d809      	bhi.n	8006fd0 <_close+0x34>
 8006fbc:	4b07      	ldr	r3, [pc, #28]	@ (8006fdc <_close+0x40>)
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d104      	bne.n	8006fd0 <_close+0x34>
 8006fc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006fca:	6023      	str	r3, [r4, #0]
 8006fcc:	2000      	movs	r0, #0
 8006fce:	e7f1      	b.n	8006fb4 <_close+0x18>
 8006fd0:	6820      	ldr	r0, [r4, #0]
 8006fd2:	f7ff ffd6 	bl	8006f82 <_swiclose>
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	d0f5      	beq.n	8006fc6 <_close+0x2a>
 8006fda:	e7eb      	b.n	8006fb4 <_close+0x18>
 8006fdc:	24000164 	.word	0x24000164

08006fe0 <_swistat>:
 8006fe0:	b570      	push	{r4, r5, r6, lr}
 8006fe2:	460c      	mov	r4, r1
 8006fe4:	f7ff ff08 	bl	8006df8 <findslot>
 8006fe8:	4605      	mov	r5, r0
 8006fea:	b930      	cbnz	r0, 8006ffa <_swistat+0x1a>
 8006fec:	f000 fbf2 	bl	80077d4 <__errno>
 8006ff0:	2309      	movs	r3, #9
 8006ff2:	6003      	str	r3, [r0, #0]
 8006ff4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ff8:	bd70      	pop	{r4, r5, r6, pc}
 8006ffa:	6863      	ldr	r3, [r4, #4]
 8006ffc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007000:	6063      	str	r3, [r4, #4]
 8007002:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007006:	64a3      	str	r3, [r4, #72]	@ 0x48
 8007008:	260c      	movs	r6, #12
 800700a:	4630      	mov	r0, r6
 800700c:	4629      	mov	r1, r5
 800700e:	beab      	bkpt	0x00ab
 8007010:	4605      	mov	r5, r0
 8007012:	4628      	mov	r0, r5
 8007014:	f7ff ff18 	bl	8006e48 <checkerror>
 8007018:	1c43      	adds	r3, r0, #1
 800701a:	d0eb      	beq.n	8006ff4 <_swistat+0x14>
 800701c:	6120      	str	r0, [r4, #16]
 800701e:	2000      	movs	r0, #0
 8007020:	e7ea      	b.n	8006ff8 <_swistat+0x18>

08007022 <_fstat>:
 8007022:	460b      	mov	r3, r1
 8007024:	b510      	push	{r4, lr}
 8007026:	2100      	movs	r1, #0
 8007028:	4604      	mov	r4, r0
 800702a:	2258      	movs	r2, #88	@ 0x58
 800702c:	4618      	mov	r0, r3
 800702e:	f000 fb83 	bl	8007738 <memset>
 8007032:	4601      	mov	r1, r0
 8007034:	4620      	mov	r0, r4
 8007036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800703a:	f7ff bfd1 	b.w	8006fe0 <_swistat>

0800703e <_stat>:
 800703e:	b538      	push	{r3, r4, r5, lr}
 8007040:	460d      	mov	r5, r1
 8007042:	4604      	mov	r4, r0
 8007044:	2258      	movs	r2, #88	@ 0x58
 8007046:	2100      	movs	r1, #0
 8007048:	4628      	mov	r0, r5
 800704a:	f000 fb75 	bl	8007738 <memset>
 800704e:	4620      	mov	r0, r4
 8007050:	2100      	movs	r1, #0
 8007052:	f000 f811 	bl	8007078 <_swiopen>
 8007056:	1c43      	adds	r3, r0, #1
 8007058:	4604      	mov	r4, r0
 800705a:	d00b      	beq.n	8007074 <_stat+0x36>
 800705c:	686b      	ldr	r3, [r5, #4]
 800705e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007062:	606b      	str	r3, [r5, #4]
 8007064:	4629      	mov	r1, r5
 8007066:	f7ff ffbb 	bl	8006fe0 <_swistat>
 800706a:	4605      	mov	r5, r0
 800706c:	4620      	mov	r0, r4
 800706e:	f7ff ff95 	bl	8006f9c <_close>
 8007072:	462c      	mov	r4, r5
 8007074:	4620      	mov	r0, r4
 8007076:	bd38      	pop	{r3, r4, r5, pc}

08007078 <_swiopen>:
 8007078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800707c:	4f29      	ldr	r7, [pc, #164]	@ (8007124 <_swiopen+0xac>)
 800707e:	b096      	sub	sp, #88	@ 0x58
 8007080:	4682      	mov	sl, r0
 8007082:	460e      	mov	r6, r1
 8007084:	2400      	movs	r4, #0
 8007086:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 800708a:	3301      	adds	r3, #1
 800708c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8007090:	d00c      	beq.n	80070ac <_swiopen+0x34>
 8007092:	3401      	adds	r4, #1
 8007094:	2c14      	cmp	r4, #20
 8007096:	d1f6      	bne.n	8007086 <_swiopen+0xe>
 8007098:	f000 fb9c 	bl	80077d4 <__errno>
 800709c:	2318      	movs	r3, #24
 800709e:	6003      	str	r3, [r0, #0]
 80070a0:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80070a4:	4620      	mov	r0, r4
 80070a6:	b016      	add	sp, #88	@ 0x58
 80070a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ac:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80070b0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80070b4:	46e9      	mov	r9, sp
 80070b6:	d109      	bne.n	80070cc <_swiopen+0x54>
 80070b8:	4649      	mov	r1, r9
 80070ba:	4650      	mov	r0, sl
 80070bc:	f7ff ffbf 	bl	800703e <_stat>
 80070c0:	3001      	adds	r0, #1
 80070c2:	d003      	beq.n	80070cc <_swiopen+0x54>
 80070c4:	f000 fb86 	bl	80077d4 <__errno>
 80070c8:	2311      	movs	r3, #17
 80070ca:	e7e8      	b.n	800709e <_swiopen+0x26>
 80070cc:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80070d0:	f240 6301 	movw	r3, #1537	@ 0x601
 80070d4:	07b2      	lsls	r2, r6, #30
 80070d6:	bf48      	it	mi
 80070d8:	f045 0502 	orrmi.w	r5, r5, #2
 80070dc:	421e      	tst	r6, r3
 80070de:	bf18      	it	ne
 80070e0:	f045 0504 	orrne.w	r5, r5, #4
 80070e4:	0733      	lsls	r3, r6, #28
 80070e6:	bf48      	it	mi
 80070e8:	f025 0504 	bicmi.w	r5, r5, #4
 80070ec:	4650      	mov	r0, sl
 80070ee:	bf48      	it	mi
 80070f0:	f045 0508 	orrmi.w	r5, r5, #8
 80070f4:	f8cd a000 	str.w	sl, [sp]
 80070f8:	f7f9 f8f2 	bl	80002e0 <strlen>
 80070fc:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8007100:	2501      	movs	r5, #1
 8007102:	4628      	mov	r0, r5
 8007104:	4649      	mov	r1, r9
 8007106:	beab      	bkpt	0x00ab
 8007108:	4605      	mov	r5, r0
 800710a:	2d00      	cmp	r5, #0
 800710c:	db05      	blt.n	800711a <_swiopen+0xa2>
 800710e:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8007112:	4447      	add	r7, r8
 8007114:	2300      	movs	r3, #0
 8007116:	607b      	str	r3, [r7, #4]
 8007118:	e7c4      	b.n	80070a4 <_swiopen+0x2c>
 800711a:	4628      	mov	r0, r5
 800711c:	f7ff fe86 	bl	8006e2c <error>
 8007120:	4604      	mov	r4, r0
 8007122:	e7bf      	b.n	80070a4 <_swiopen+0x2c>
 8007124:	24000164 	.word	0x24000164

08007128 <_get_semihosting_exts>:
 8007128:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800712c:	4606      	mov	r6, r0
 800712e:	460f      	mov	r7, r1
 8007130:	4829      	ldr	r0, [pc, #164]	@ (80071d8 <_get_semihosting_exts+0xb0>)
 8007132:	2100      	movs	r1, #0
 8007134:	4615      	mov	r5, r2
 8007136:	f7ff ff9f 	bl	8007078 <_swiopen>
 800713a:	462a      	mov	r2, r5
 800713c:	4604      	mov	r4, r0
 800713e:	2100      	movs	r1, #0
 8007140:	4630      	mov	r0, r6
 8007142:	f000 faf9 	bl	8007738 <memset>
 8007146:	1c63      	adds	r3, r4, #1
 8007148:	d014      	beq.n	8007174 <_get_semihosting_exts+0x4c>
 800714a:	4620      	mov	r0, r4
 800714c:	f7ff fe54 	bl	8006df8 <findslot>
 8007150:	f04f 080c 	mov.w	r8, #12
 8007154:	4681      	mov	r9, r0
 8007156:	4640      	mov	r0, r8
 8007158:	4649      	mov	r1, r9
 800715a:	beab      	bkpt	0x00ab
 800715c:	4680      	mov	r8, r0
 800715e:	4640      	mov	r0, r8
 8007160:	f7ff fe72 	bl	8006e48 <checkerror>
 8007164:	2803      	cmp	r0, #3
 8007166:	dd02      	ble.n	800716e <_get_semihosting_exts+0x46>
 8007168:	1ec3      	subs	r3, r0, #3
 800716a:	42ab      	cmp	r3, r5
 800716c:	dc07      	bgt.n	800717e <_get_semihosting_exts+0x56>
 800716e:	4620      	mov	r0, r4
 8007170:	f7ff ff14 	bl	8006f9c <_close>
 8007174:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007178:	b003      	add	sp, #12
 800717a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800717e:	2204      	movs	r2, #4
 8007180:	eb0d 0102 	add.w	r1, sp, r2
 8007184:	4620      	mov	r0, r4
 8007186:	f7ff fe74 	bl	8006e72 <_read>
 800718a:	2803      	cmp	r0, #3
 800718c:	ddef      	ble.n	800716e <_get_semihosting_exts+0x46>
 800718e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007192:	2b53      	cmp	r3, #83	@ 0x53
 8007194:	d1eb      	bne.n	800716e <_get_semihosting_exts+0x46>
 8007196:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800719a:	2b48      	cmp	r3, #72	@ 0x48
 800719c:	d1e7      	bne.n	800716e <_get_semihosting_exts+0x46>
 800719e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80071a2:	2b46      	cmp	r3, #70	@ 0x46
 80071a4:	d1e3      	bne.n	800716e <_get_semihosting_exts+0x46>
 80071a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80071aa:	2b42      	cmp	r3, #66	@ 0x42
 80071ac:	d1df      	bne.n	800716e <_get_semihosting_exts+0x46>
 80071ae:	2201      	movs	r2, #1
 80071b0:	4639      	mov	r1, r7
 80071b2:	4620      	mov	r0, r4
 80071b4:	f7ff fe77 	bl	8006ea6 <_swilseek>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	dbd8      	blt.n	800716e <_get_semihosting_exts+0x46>
 80071bc:	462a      	mov	r2, r5
 80071be:	4631      	mov	r1, r6
 80071c0:	4620      	mov	r0, r4
 80071c2:	f7ff fe56 	bl	8006e72 <_read>
 80071c6:	4605      	mov	r5, r0
 80071c8:	4620      	mov	r0, r4
 80071ca:	f7ff fee7 	bl	8006f9c <_close>
 80071ce:	4628      	mov	r0, r5
 80071d0:	f7ff fe3a 	bl	8006e48 <checkerror>
 80071d4:	e7d0      	b.n	8007178 <_get_semihosting_exts+0x50>
 80071d6:	bf00      	nop
 80071d8:	0800828c 	.word	0x0800828c

080071dc <initialise_semihosting_exts>:
 80071dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071de:	4d0a      	ldr	r5, [pc, #40]	@ (8007208 <initialise_semihosting_exts+0x2c>)
 80071e0:	4c0a      	ldr	r4, [pc, #40]	@ (800720c <initialise_semihosting_exts+0x30>)
 80071e2:	2100      	movs	r1, #0
 80071e4:	2201      	movs	r2, #1
 80071e6:	a801      	add	r0, sp, #4
 80071e8:	6029      	str	r1, [r5, #0]
 80071ea:	6022      	str	r2, [r4, #0]
 80071ec:	f7ff ff9c 	bl	8007128 <_get_semihosting_exts>
 80071f0:	2800      	cmp	r0, #0
 80071f2:	dd07      	ble.n	8007204 <initialise_semihosting_exts+0x28>
 80071f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80071f8:	f003 0201 	and.w	r2, r3, #1
 80071fc:	f003 0302 	and.w	r3, r3, #2
 8007200:	602a      	str	r2, [r5, #0]
 8007202:	6023      	str	r3, [r4, #0]
 8007204:	b003      	add	sp, #12
 8007206:	bd30      	pop	{r4, r5, pc}
 8007208:	24000014 	.word	0x24000014
 800720c:	24000010 	.word	0x24000010

08007210 <_has_ext_stdout_stderr>:
 8007210:	b510      	push	{r4, lr}
 8007212:	4c04      	ldr	r4, [pc, #16]	@ (8007224 <_has_ext_stdout_stderr+0x14>)
 8007214:	6823      	ldr	r3, [r4, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	da01      	bge.n	800721e <_has_ext_stdout_stderr+0xe>
 800721a:	f7ff ffdf 	bl	80071dc <initialise_semihosting_exts>
 800721e:	6820      	ldr	r0, [r4, #0]
 8007220:	bd10      	pop	{r4, pc}
 8007222:	bf00      	nop
 8007224:	24000010 	.word	0x24000010

08007228 <initialise_monitor_handles>:
 8007228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800722c:	b085      	sub	sp, #20
 800722e:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 80072e0 <initialise_monitor_handles+0xb8>
 8007232:	f8cd 9004 	str.w	r9, [sp, #4]
 8007236:	2303      	movs	r3, #3
 8007238:	2400      	movs	r4, #0
 800723a:	9303      	str	r3, [sp, #12]
 800723c:	af01      	add	r7, sp, #4
 800723e:	9402      	str	r4, [sp, #8]
 8007240:	2501      	movs	r5, #1
 8007242:	4628      	mov	r0, r5
 8007244:	4639      	mov	r1, r7
 8007246:	beab      	bkpt	0x00ab
 8007248:	4605      	mov	r5, r0
 800724a:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80072e4 <initialise_monitor_handles+0xbc>
 800724e:	4623      	mov	r3, r4
 8007250:	4c20      	ldr	r4, [pc, #128]	@ (80072d4 <initialise_monitor_handles+0xac>)
 8007252:	f8c8 5000 	str.w	r5, [r8]
 8007256:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800725a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800725e:	3301      	adds	r3, #1
 8007260:	2b14      	cmp	r3, #20
 8007262:	d1fa      	bne.n	800725a <initialise_monitor_handles+0x32>
 8007264:	f7ff ffd4 	bl	8007210 <_has_ext_stdout_stderr>
 8007268:	4d1b      	ldr	r5, [pc, #108]	@ (80072d8 <initialise_monitor_handles+0xb0>)
 800726a:	b1d0      	cbz	r0, 80072a2 <initialise_monitor_handles+0x7a>
 800726c:	f04f 0a03 	mov.w	sl, #3
 8007270:	2304      	movs	r3, #4
 8007272:	f8cd 9004 	str.w	r9, [sp, #4]
 8007276:	2601      	movs	r6, #1
 8007278:	f8cd a00c 	str.w	sl, [sp, #12]
 800727c:	9302      	str	r3, [sp, #8]
 800727e:	4630      	mov	r0, r6
 8007280:	4639      	mov	r1, r7
 8007282:	beab      	bkpt	0x00ab
 8007284:	4683      	mov	fp, r0
 8007286:	4b15      	ldr	r3, [pc, #84]	@ (80072dc <initialise_monitor_handles+0xb4>)
 8007288:	f8cd 9004 	str.w	r9, [sp, #4]
 800728c:	f8c3 b000 	str.w	fp, [r3]
 8007290:	2308      	movs	r3, #8
 8007292:	f8cd a00c 	str.w	sl, [sp, #12]
 8007296:	9302      	str	r3, [sp, #8]
 8007298:	4630      	mov	r0, r6
 800729a:	4639      	mov	r1, r7
 800729c:	beab      	bkpt	0x00ab
 800729e:	4606      	mov	r6, r0
 80072a0:	602e      	str	r6, [r5, #0]
 80072a2:	682b      	ldr	r3, [r5, #0]
 80072a4:	3301      	adds	r3, #1
 80072a6:	bf02      	ittt	eq
 80072a8:	4b0c      	ldreq	r3, [pc, #48]	@ (80072dc <initialise_monitor_handles+0xb4>)
 80072aa:	681b      	ldreq	r3, [r3, #0]
 80072ac:	602b      	streq	r3, [r5, #0]
 80072ae:	2600      	movs	r6, #0
 80072b0:	f8d8 3000 	ldr.w	r3, [r8]
 80072b4:	6023      	str	r3, [r4, #0]
 80072b6:	6066      	str	r6, [r4, #4]
 80072b8:	f7ff ffaa 	bl	8007210 <_has_ext_stdout_stderr>
 80072bc:	b130      	cbz	r0, 80072cc <initialise_monitor_handles+0xa4>
 80072be:	4b07      	ldr	r3, [pc, #28]	@ (80072dc <initialise_monitor_handles+0xb4>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80072c6:	682b      	ldr	r3, [r5, #0]
 80072c8:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80072cc:	b005      	add	sp, #20
 80072ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d2:	bf00      	nop
 80072d4:	24000164 	.word	0x24000164
 80072d8:	24000158 	.word	0x24000158
 80072dc:	2400015c 	.word	0x2400015c
 80072e0:	080082a2 	.word	0x080082a2
 80072e4:	24000160 	.word	0x24000160

080072e8 <_isatty>:
 80072e8:	b570      	push	{r4, r5, r6, lr}
 80072ea:	f7ff fd85 	bl	8006df8 <findslot>
 80072ee:	2409      	movs	r4, #9
 80072f0:	4605      	mov	r5, r0
 80072f2:	b920      	cbnz	r0, 80072fe <_isatty+0x16>
 80072f4:	f000 fa6e 	bl	80077d4 <__errno>
 80072f8:	6004      	str	r4, [r0, #0]
 80072fa:	2000      	movs	r0, #0
 80072fc:	bd70      	pop	{r4, r5, r6, pc}
 80072fe:	4620      	mov	r0, r4
 8007300:	4629      	mov	r1, r5
 8007302:	beab      	bkpt	0x00ab
 8007304:	4604      	mov	r4, r0
 8007306:	2c01      	cmp	r4, #1
 8007308:	4620      	mov	r0, r4
 800730a:	d0f7      	beq.n	80072fc <_isatty+0x14>
 800730c:	f000 fa62 	bl	80077d4 <__errno>
 8007310:	2513      	movs	r5, #19
 8007312:	4604      	mov	r4, r0
 8007314:	2600      	movs	r6, #0
 8007316:	4628      	mov	r0, r5
 8007318:	4631      	mov	r1, r6
 800731a:	beab      	bkpt	0x00ab
 800731c:	4605      	mov	r5, r0
 800731e:	6025      	str	r5, [r4, #0]
 8007320:	e7eb      	b.n	80072fa <_isatty+0x12>
	...

08007324 <std>:
 8007324:	2300      	movs	r3, #0
 8007326:	b510      	push	{r4, lr}
 8007328:	4604      	mov	r4, r0
 800732a:	e9c0 3300 	strd	r3, r3, [r0]
 800732e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007332:	6083      	str	r3, [r0, #8]
 8007334:	8181      	strh	r1, [r0, #12]
 8007336:	6643      	str	r3, [r0, #100]	@ 0x64
 8007338:	81c2      	strh	r2, [r0, #14]
 800733a:	6183      	str	r3, [r0, #24]
 800733c:	4619      	mov	r1, r3
 800733e:	2208      	movs	r2, #8
 8007340:	305c      	adds	r0, #92	@ 0x5c
 8007342:	f000 f9f9 	bl	8007738 <memset>
 8007346:	4b0d      	ldr	r3, [pc, #52]	@ (800737c <std+0x58>)
 8007348:	6263      	str	r3, [r4, #36]	@ 0x24
 800734a:	4b0d      	ldr	r3, [pc, #52]	@ (8007380 <std+0x5c>)
 800734c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800734e:	4b0d      	ldr	r3, [pc, #52]	@ (8007384 <std+0x60>)
 8007350:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007352:	4b0d      	ldr	r3, [pc, #52]	@ (8007388 <std+0x64>)
 8007354:	6323      	str	r3, [r4, #48]	@ 0x30
 8007356:	4b0d      	ldr	r3, [pc, #52]	@ (800738c <std+0x68>)
 8007358:	6224      	str	r4, [r4, #32]
 800735a:	429c      	cmp	r4, r3
 800735c:	d006      	beq.n	800736c <std+0x48>
 800735e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007362:	4294      	cmp	r4, r2
 8007364:	d002      	beq.n	800736c <std+0x48>
 8007366:	33d0      	adds	r3, #208	@ 0xd0
 8007368:	429c      	cmp	r4, r3
 800736a:	d105      	bne.n	8007378 <std+0x54>
 800736c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007374:	f000 ba58 	b.w	8007828 <__retarget_lock_init_recursive>
 8007378:	bd10      	pop	{r4, pc}
 800737a:	bf00      	nop
 800737c:	08007589 	.word	0x08007589
 8007380:	080075ab 	.word	0x080075ab
 8007384:	080075e3 	.word	0x080075e3
 8007388:	08007607 	.word	0x08007607
 800738c:	24000204 	.word	0x24000204

08007390 <stdio_exit_handler>:
 8007390:	4a02      	ldr	r2, [pc, #8]	@ (800739c <stdio_exit_handler+0xc>)
 8007392:	4903      	ldr	r1, [pc, #12]	@ (80073a0 <stdio_exit_handler+0x10>)
 8007394:	4803      	ldr	r0, [pc, #12]	@ (80073a4 <stdio_exit_handler+0x14>)
 8007396:	f000 b869 	b.w	800746c <_fwalk_sglue>
 800739a:	bf00      	nop
 800739c:	24000018 	.word	0x24000018
 80073a0:	080080c9 	.word	0x080080c9
 80073a4:	24000028 	.word	0x24000028

080073a8 <cleanup_stdio>:
 80073a8:	6841      	ldr	r1, [r0, #4]
 80073aa:	4b0c      	ldr	r3, [pc, #48]	@ (80073dc <cleanup_stdio+0x34>)
 80073ac:	4299      	cmp	r1, r3
 80073ae:	b510      	push	{r4, lr}
 80073b0:	4604      	mov	r4, r0
 80073b2:	d001      	beq.n	80073b8 <cleanup_stdio+0x10>
 80073b4:	f000 fe88 	bl	80080c8 <_fflush_r>
 80073b8:	68a1      	ldr	r1, [r4, #8]
 80073ba:	4b09      	ldr	r3, [pc, #36]	@ (80073e0 <cleanup_stdio+0x38>)
 80073bc:	4299      	cmp	r1, r3
 80073be:	d002      	beq.n	80073c6 <cleanup_stdio+0x1e>
 80073c0:	4620      	mov	r0, r4
 80073c2:	f000 fe81 	bl	80080c8 <_fflush_r>
 80073c6:	68e1      	ldr	r1, [r4, #12]
 80073c8:	4b06      	ldr	r3, [pc, #24]	@ (80073e4 <cleanup_stdio+0x3c>)
 80073ca:	4299      	cmp	r1, r3
 80073cc:	d004      	beq.n	80073d8 <cleanup_stdio+0x30>
 80073ce:	4620      	mov	r0, r4
 80073d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073d4:	f000 be78 	b.w	80080c8 <_fflush_r>
 80073d8:	bd10      	pop	{r4, pc}
 80073da:	bf00      	nop
 80073dc:	24000204 	.word	0x24000204
 80073e0:	2400026c 	.word	0x2400026c
 80073e4:	240002d4 	.word	0x240002d4

080073e8 <global_stdio_init.part.0>:
 80073e8:	b510      	push	{r4, lr}
 80073ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007418 <global_stdio_init.part.0+0x30>)
 80073ec:	4c0b      	ldr	r4, [pc, #44]	@ (800741c <global_stdio_init.part.0+0x34>)
 80073ee:	4a0c      	ldr	r2, [pc, #48]	@ (8007420 <global_stdio_init.part.0+0x38>)
 80073f0:	601a      	str	r2, [r3, #0]
 80073f2:	4620      	mov	r0, r4
 80073f4:	2200      	movs	r2, #0
 80073f6:	2104      	movs	r1, #4
 80073f8:	f7ff ff94 	bl	8007324 <std>
 80073fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007400:	2201      	movs	r2, #1
 8007402:	2109      	movs	r1, #9
 8007404:	f7ff ff8e 	bl	8007324 <std>
 8007408:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800740c:	2202      	movs	r2, #2
 800740e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007412:	2112      	movs	r1, #18
 8007414:	f7ff bf86 	b.w	8007324 <std>
 8007418:	2400033c 	.word	0x2400033c
 800741c:	24000204 	.word	0x24000204
 8007420:	08007391 	.word	0x08007391

08007424 <__sfp_lock_acquire>:
 8007424:	4801      	ldr	r0, [pc, #4]	@ (800742c <__sfp_lock_acquire+0x8>)
 8007426:	f000 ba00 	b.w	800782a <__retarget_lock_acquire_recursive>
 800742a:	bf00      	nop
 800742c:	24000345 	.word	0x24000345

08007430 <__sfp_lock_release>:
 8007430:	4801      	ldr	r0, [pc, #4]	@ (8007438 <__sfp_lock_release+0x8>)
 8007432:	f000 b9fb 	b.w	800782c <__retarget_lock_release_recursive>
 8007436:	bf00      	nop
 8007438:	24000345 	.word	0x24000345

0800743c <__sinit>:
 800743c:	b510      	push	{r4, lr}
 800743e:	4604      	mov	r4, r0
 8007440:	f7ff fff0 	bl	8007424 <__sfp_lock_acquire>
 8007444:	6a23      	ldr	r3, [r4, #32]
 8007446:	b11b      	cbz	r3, 8007450 <__sinit+0x14>
 8007448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800744c:	f7ff bff0 	b.w	8007430 <__sfp_lock_release>
 8007450:	4b04      	ldr	r3, [pc, #16]	@ (8007464 <__sinit+0x28>)
 8007452:	6223      	str	r3, [r4, #32]
 8007454:	4b04      	ldr	r3, [pc, #16]	@ (8007468 <__sinit+0x2c>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1f5      	bne.n	8007448 <__sinit+0xc>
 800745c:	f7ff ffc4 	bl	80073e8 <global_stdio_init.part.0>
 8007460:	e7f2      	b.n	8007448 <__sinit+0xc>
 8007462:	bf00      	nop
 8007464:	080073a9 	.word	0x080073a9
 8007468:	2400033c 	.word	0x2400033c

0800746c <_fwalk_sglue>:
 800746c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007470:	4607      	mov	r7, r0
 8007472:	4688      	mov	r8, r1
 8007474:	4614      	mov	r4, r2
 8007476:	2600      	movs	r6, #0
 8007478:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800747c:	f1b9 0901 	subs.w	r9, r9, #1
 8007480:	d505      	bpl.n	800748e <_fwalk_sglue+0x22>
 8007482:	6824      	ldr	r4, [r4, #0]
 8007484:	2c00      	cmp	r4, #0
 8007486:	d1f7      	bne.n	8007478 <_fwalk_sglue+0xc>
 8007488:	4630      	mov	r0, r6
 800748a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800748e:	89ab      	ldrh	r3, [r5, #12]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d907      	bls.n	80074a4 <_fwalk_sglue+0x38>
 8007494:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007498:	3301      	adds	r3, #1
 800749a:	d003      	beq.n	80074a4 <_fwalk_sglue+0x38>
 800749c:	4629      	mov	r1, r5
 800749e:	4638      	mov	r0, r7
 80074a0:	47c0      	blx	r8
 80074a2:	4306      	orrs	r6, r0
 80074a4:	3568      	adds	r5, #104	@ 0x68
 80074a6:	e7e9      	b.n	800747c <_fwalk_sglue+0x10>

080074a8 <iprintf>:
 80074a8:	b40f      	push	{r0, r1, r2, r3}
 80074aa:	b507      	push	{r0, r1, r2, lr}
 80074ac:	4906      	ldr	r1, [pc, #24]	@ (80074c8 <iprintf+0x20>)
 80074ae:	ab04      	add	r3, sp, #16
 80074b0:	6808      	ldr	r0, [r1, #0]
 80074b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80074b6:	6881      	ldr	r1, [r0, #8]
 80074b8:	9301      	str	r3, [sp, #4]
 80074ba:	f000 fadb 	bl	8007a74 <_vfiprintf_r>
 80074be:	b003      	add	sp, #12
 80074c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80074c4:	b004      	add	sp, #16
 80074c6:	4770      	bx	lr
 80074c8:	24000024 	.word	0x24000024

080074cc <_puts_r>:
 80074cc:	6a03      	ldr	r3, [r0, #32]
 80074ce:	b570      	push	{r4, r5, r6, lr}
 80074d0:	6884      	ldr	r4, [r0, #8]
 80074d2:	4605      	mov	r5, r0
 80074d4:	460e      	mov	r6, r1
 80074d6:	b90b      	cbnz	r3, 80074dc <_puts_r+0x10>
 80074d8:	f7ff ffb0 	bl	800743c <__sinit>
 80074dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80074de:	07db      	lsls	r3, r3, #31
 80074e0:	d405      	bmi.n	80074ee <_puts_r+0x22>
 80074e2:	89a3      	ldrh	r3, [r4, #12]
 80074e4:	0598      	lsls	r0, r3, #22
 80074e6:	d402      	bmi.n	80074ee <_puts_r+0x22>
 80074e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074ea:	f000 f99e 	bl	800782a <__retarget_lock_acquire_recursive>
 80074ee:	89a3      	ldrh	r3, [r4, #12]
 80074f0:	0719      	lsls	r1, r3, #28
 80074f2:	d502      	bpl.n	80074fa <_puts_r+0x2e>
 80074f4:	6923      	ldr	r3, [r4, #16]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d135      	bne.n	8007566 <_puts_r+0x9a>
 80074fa:	4621      	mov	r1, r4
 80074fc:	4628      	mov	r0, r5
 80074fe:	f000 f8c5 	bl	800768c <__swsetup_r>
 8007502:	b380      	cbz	r0, 8007566 <_puts_r+0x9a>
 8007504:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007508:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800750a:	07da      	lsls	r2, r3, #31
 800750c:	d405      	bmi.n	800751a <_puts_r+0x4e>
 800750e:	89a3      	ldrh	r3, [r4, #12]
 8007510:	059b      	lsls	r3, r3, #22
 8007512:	d402      	bmi.n	800751a <_puts_r+0x4e>
 8007514:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007516:	f000 f989 	bl	800782c <__retarget_lock_release_recursive>
 800751a:	4628      	mov	r0, r5
 800751c:	bd70      	pop	{r4, r5, r6, pc}
 800751e:	2b00      	cmp	r3, #0
 8007520:	da04      	bge.n	800752c <_puts_r+0x60>
 8007522:	69a2      	ldr	r2, [r4, #24]
 8007524:	429a      	cmp	r2, r3
 8007526:	dc17      	bgt.n	8007558 <_puts_r+0x8c>
 8007528:	290a      	cmp	r1, #10
 800752a:	d015      	beq.n	8007558 <_puts_r+0x8c>
 800752c:	6823      	ldr	r3, [r4, #0]
 800752e:	1c5a      	adds	r2, r3, #1
 8007530:	6022      	str	r2, [r4, #0]
 8007532:	7019      	strb	r1, [r3, #0]
 8007534:	68a3      	ldr	r3, [r4, #8]
 8007536:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800753a:	3b01      	subs	r3, #1
 800753c:	60a3      	str	r3, [r4, #8]
 800753e:	2900      	cmp	r1, #0
 8007540:	d1ed      	bne.n	800751e <_puts_r+0x52>
 8007542:	2b00      	cmp	r3, #0
 8007544:	da11      	bge.n	800756a <_puts_r+0x9e>
 8007546:	4622      	mov	r2, r4
 8007548:	210a      	movs	r1, #10
 800754a:	4628      	mov	r0, r5
 800754c:	f000 f85f 	bl	800760e <__swbuf_r>
 8007550:	3001      	adds	r0, #1
 8007552:	d0d7      	beq.n	8007504 <_puts_r+0x38>
 8007554:	250a      	movs	r5, #10
 8007556:	e7d7      	b.n	8007508 <_puts_r+0x3c>
 8007558:	4622      	mov	r2, r4
 800755a:	4628      	mov	r0, r5
 800755c:	f000 f857 	bl	800760e <__swbuf_r>
 8007560:	3001      	adds	r0, #1
 8007562:	d1e7      	bne.n	8007534 <_puts_r+0x68>
 8007564:	e7ce      	b.n	8007504 <_puts_r+0x38>
 8007566:	3e01      	subs	r6, #1
 8007568:	e7e4      	b.n	8007534 <_puts_r+0x68>
 800756a:	6823      	ldr	r3, [r4, #0]
 800756c:	1c5a      	adds	r2, r3, #1
 800756e:	6022      	str	r2, [r4, #0]
 8007570:	220a      	movs	r2, #10
 8007572:	701a      	strb	r2, [r3, #0]
 8007574:	e7ee      	b.n	8007554 <_puts_r+0x88>
	...

08007578 <puts>:
 8007578:	4b02      	ldr	r3, [pc, #8]	@ (8007584 <puts+0xc>)
 800757a:	4601      	mov	r1, r0
 800757c:	6818      	ldr	r0, [r3, #0]
 800757e:	f7ff bfa5 	b.w	80074cc <_puts_r>
 8007582:	bf00      	nop
 8007584:	24000024 	.word	0x24000024

08007588 <__sread>:
 8007588:	b510      	push	{r4, lr}
 800758a:	460c      	mov	r4, r1
 800758c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007590:	f000 f8fc 	bl	800778c <_read_r>
 8007594:	2800      	cmp	r0, #0
 8007596:	bfab      	itete	ge
 8007598:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800759a:	89a3      	ldrhlt	r3, [r4, #12]
 800759c:	181b      	addge	r3, r3, r0
 800759e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80075a2:	bfac      	ite	ge
 80075a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80075a6:	81a3      	strhlt	r3, [r4, #12]
 80075a8:	bd10      	pop	{r4, pc}

080075aa <__swrite>:
 80075aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ae:	461f      	mov	r7, r3
 80075b0:	898b      	ldrh	r3, [r1, #12]
 80075b2:	05db      	lsls	r3, r3, #23
 80075b4:	4605      	mov	r5, r0
 80075b6:	460c      	mov	r4, r1
 80075b8:	4616      	mov	r6, r2
 80075ba:	d505      	bpl.n	80075c8 <__swrite+0x1e>
 80075bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075c0:	2302      	movs	r3, #2
 80075c2:	2200      	movs	r2, #0
 80075c4:	f000 f8d0 	bl	8007768 <_lseek_r>
 80075c8:	89a3      	ldrh	r3, [r4, #12]
 80075ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80075d2:	81a3      	strh	r3, [r4, #12]
 80075d4:	4632      	mov	r2, r6
 80075d6:	463b      	mov	r3, r7
 80075d8:	4628      	mov	r0, r5
 80075da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075de:	f000 b8e7 	b.w	80077b0 <_write_r>

080075e2 <__sseek>:
 80075e2:	b510      	push	{r4, lr}
 80075e4:	460c      	mov	r4, r1
 80075e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075ea:	f000 f8bd 	bl	8007768 <_lseek_r>
 80075ee:	1c43      	adds	r3, r0, #1
 80075f0:	89a3      	ldrh	r3, [r4, #12]
 80075f2:	bf15      	itete	ne
 80075f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80075f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80075fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80075fe:	81a3      	strheq	r3, [r4, #12]
 8007600:	bf18      	it	ne
 8007602:	81a3      	strhne	r3, [r4, #12]
 8007604:	bd10      	pop	{r4, pc}

08007606 <__sclose>:
 8007606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800760a:	f000 b89d 	b.w	8007748 <_close_r>

0800760e <__swbuf_r>:
 800760e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007610:	460e      	mov	r6, r1
 8007612:	4614      	mov	r4, r2
 8007614:	4605      	mov	r5, r0
 8007616:	b118      	cbz	r0, 8007620 <__swbuf_r+0x12>
 8007618:	6a03      	ldr	r3, [r0, #32]
 800761a:	b90b      	cbnz	r3, 8007620 <__swbuf_r+0x12>
 800761c:	f7ff ff0e 	bl	800743c <__sinit>
 8007620:	69a3      	ldr	r3, [r4, #24]
 8007622:	60a3      	str	r3, [r4, #8]
 8007624:	89a3      	ldrh	r3, [r4, #12]
 8007626:	071a      	lsls	r2, r3, #28
 8007628:	d501      	bpl.n	800762e <__swbuf_r+0x20>
 800762a:	6923      	ldr	r3, [r4, #16]
 800762c:	b943      	cbnz	r3, 8007640 <__swbuf_r+0x32>
 800762e:	4621      	mov	r1, r4
 8007630:	4628      	mov	r0, r5
 8007632:	f000 f82b 	bl	800768c <__swsetup_r>
 8007636:	b118      	cbz	r0, 8007640 <__swbuf_r+0x32>
 8007638:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800763c:	4638      	mov	r0, r7
 800763e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007640:	6823      	ldr	r3, [r4, #0]
 8007642:	6922      	ldr	r2, [r4, #16]
 8007644:	1a98      	subs	r0, r3, r2
 8007646:	6963      	ldr	r3, [r4, #20]
 8007648:	b2f6      	uxtb	r6, r6
 800764a:	4283      	cmp	r3, r0
 800764c:	4637      	mov	r7, r6
 800764e:	dc05      	bgt.n	800765c <__swbuf_r+0x4e>
 8007650:	4621      	mov	r1, r4
 8007652:	4628      	mov	r0, r5
 8007654:	f000 fd38 	bl	80080c8 <_fflush_r>
 8007658:	2800      	cmp	r0, #0
 800765a:	d1ed      	bne.n	8007638 <__swbuf_r+0x2a>
 800765c:	68a3      	ldr	r3, [r4, #8]
 800765e:	3b01      	subs	r3, #1
 8007660:	60a3      	str	r3, [r4, #8]
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	1c5a      	adds	r2, r3, #1
 8007666:	6022      	str	r2, [r4, #0]
 8007668:	701e      	strb	r6, [r3, #0]
 800766a:	6962      	ldr	r2, [r4, #20]
 800766c:	1c43      	adds	r3, r0, #1
 800766e:	429a      	cmp	r2, r3
 8007670:	d004      	beq.n	800767c <__swbuf_r+0x6e>
 8007672:	89a3      	ldrh	r3, [r4, #12]
 8007674:	07db      	lsls	r3, r3, #31
 8007676:	d5e1      	bpl.n	800763c <__swbuf_r+0x2e>
 8007678:	2e0a      	cmp	r6, #10
 800767a:	d1df      	bne.n	800763c <__swbuf_r+0x2e>
 800767c:	4621      	mov	r1, r4
 800767e:	4628      	mov	r0, r5
 8007680:	f000 fd22 	bl	80080c8 <_fflush_r>
 8007684:	2800      	cmp	r0, #0
 8007686:	d0d9      	beq.n	800763c <__swbuf_r+0x2e>
 8007688:	e7d6      	b.n	8007638 <__swbuf_r+0x2a>
	...

0800768c <__swsetup_r>:
 800768c:	b538      	push	{r3, r4, r5, lr}
 800768e:	4b29      	ldr	r3, [pc, #164]	@ (8007734 <__swsetup_r+0xa8>)
 8007690:	4605      	mov	r5, r0
 8007692:	6818      	ldr	r0, [r3, #0]
 8007694:	460c      	mov	r4, r1
 8007696:	b118      	cbz	r0, 80076a0 <__swsetup_r+0x14>
 8007698:	6a03      	ldr	r3, [r0, #32]
 800769a:	b90b      	cbnz	r3, 80076a0 <__swsetup_r+0x14>
 800769c:	f7ff fece 	bl	800743c <__sinit>
 80076a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076a4:	0719      	lsls	r1, r3, #28
 80076a6:	d422      	bmi.n	80076ee <__swsetup_r+0x62>
 80076a8:	06da      	lsls	r2, r3, #27
 80076aa:	d407      	bmi.n	80076bc <__swsetup_r+0x30>
 80076ac:	2209      	movs	r2, #9
 80076ae:	602a      	str	r2, [r5, #0]
 80076b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076b4:	81a3      	strh	r3, [r4, #12]
 80076b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076ba:	e033      	b.n	8007724 <__swsetup_r+0x98>
 80076bc:	0758      	lsls	r0, r3, #29
 80076be:	d512      	bpl.n	80076e6 <__swsetup_r+0x5a>
 80076c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80076c2:	b141      	cbz	r1, 80076d6 <__swsetup_r+0x4a>
 80076c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80076c8:	4299      	cmp	r1, r3
 80076ca:	d002      	beq.n	80076d2 <__swsetup_r+0x46>
 80076cc:	4628      	mov	r0, r5
 80076ce:	f000 f8af 	bl	8007830 <_free_r>
 80076d2:	2300      	movs	r3, #0
 80076d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80076d6:	89a3      	ldrh	r3, [r4, #12]
 80076d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80076dc:	81a3      	strh	r3, [r4, #12]
 80076de:	2300      	movs	r3, #0
 80076e0:	6063      	str	r3, [r4, #4]
 80076e2:	6923      	ldr	r3, [r4, #16]
 80076e4:	6023      	str	r3, [r4, #0]
 80076e6:	89a3      	ldrh	r3, [r4, #12]
 80076e8:	f043 0308 	orr.w	r3, r3, #8
 80076ec:	81a3      	strh	r3, [r4, #12]
 80076ee:	6923      	ldr	r3, [r4, #16]
 80076f0:	b94b      	cbnz	r3, 8007706 <__swsetup_r+0x7a>
 80076f2:	89a3      	ldrh	r3, [r4, #12]
 80076f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80076f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076fc:	d003      	beq.n	8007706 <__swsetup_r+0x7a>
 80076fe:	4621      	mov	r1, r4
 8007700:	4628      	mov	r0, r5
 8007702:	f000 fd2f 	bl	8008164 <__smakebuf_r>
 8007706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800770a:	f013 0201 	ands.w	r2, r3, #1
 800770e:	d00a      	beq.n	8007726 <__swsetup_r+0x9a>
 8007710:	2200      	movs	r2, #0
 8007712:	60a2      	str	r2, [r4, #8]
 8007714:	6962      	ldr	r2, [r4, #20]
 8007716:	4252      	negs	r2, r2
 8007718:	61a2      	str	r2, [r4, #24]
 800771a:	6922      	ldr	r2, [r4, #16]
 800771c:	b942      	cbnz	r2, 8007730 <__swsetup_r+0xa4>
 800771e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007722:	d1c5      	bne.n	80076b0 <__swsetup_r+0x24>
 8007724:	bd38      	pop	{r3, r4, r5, pc}
 8007726:	0799      	lsls	r1, r3, #30
 8007728:	bf58      	it	pl
 800772a:	6962      	ldrpl	r2, [r4, #20]
 800772c:	60a2      	str	r2, [r4, #8]
 800772e:	e7f4      	b.n	800771a <__swsetup_r+0x8e>
 8007730:	2000      	movs	r0, #0
 8007732:	e7f7      	b.n	8007724 <__swsetup_r+0x98>
 8007734:	24000024 	.word	0x24000024

08007738 <memset>:
 8007738:	4402      	add	r2, r0
 800773a:	4603      	mov	r3, r0
 800773c:	4293      	cmp	r3, r2
 800773e:	d100      	bne.n	8007742 <memset+0xa>
 8007740:	4770      	bx	lr
 8007742:	f803 1b01 	strb.w	r1, [r3], #1
 8007746:	e7f9      	b.n	800773c <memset+0x4>

08007748 <_close_r>:
 8007748:	b538      	push	{r3, r4, r5, lr}
 800774a:	4d06      	ldr	r5, [pc, #24]	@ (8007764 <_close_r+0x1c>)
 800774c:	2300      	movs	r3, #0
 800774e:	4604      	mov	r4, r0
 8007750:	4608      	mov	r0, r1
 8007752:	602b      	str	r3, [r5, #0]
 8007754:	f7ff fc22 	bl	8006f9c <_close>
 8007758:	1c43      	adds	r3, r0, #1
 800775a:	d102      	bne.n	8007762 <_close_r+0x1a>
 800775c:	682b      	ldr	r3, [r5, #0]
 800775e:	b103      	cbz	r3, 8007762 <_close_r+0x1a>
 8007760:	6023      	str	r3, [r4, #0]
 8007762:	bd38      	pop	{r3, r4, r5, pc}
 8007764:	24000340 	.word	0x24000340

08007768 <_lseek_r>:
 8007768:	b538      	push	{r3, r4, r5, lr}
 800776a:	4d07      	ldr	r5, [pc, #28]	@ (8007788 <_lseek_r+0x20>)
 800776c:	4604      	mov	r4, r0
 800776e:	4608      	mov	r0, r1
 8007770:	4611      	mov	r1, r2
 8007772:	2200      	movs	r2, #0
 8007774:	602a      	str	r2, [r5, #0]
 8007776:	461a      	mov	r2, r3
 8007778:	f7ff fbd1 	bl	8006f1e <_lseek>
 800777c:	1c43      	adds	r3, r0, #1
 800777e:	d102      	bne.n	8007786 <_lseek_r+0x1e>
 8007780:	682b      	ldr	r3, [r5, #0]
 8007782:	b103      	cbz	r3, 8007786 <_lseek_r+0x1e>
 8007784:	6023      	str	r3, [r4, #0]
 8007786:	bd38      	pop	{r3, r4, r5, pc}
 8007788:	24000340 	.word	0x24000340

0800778c <_read_r>:
 800778c:	b538      	push	{r3, r4, r5, lr}
 800778e:	4d07      	ldr	r5, [pc, #28]	@ (80077ac <_read_r+0x20>)
 8007790:	4604      	mov	r4, r0
 8007792:	4608      	mov	r0, r1
 8007794:	4611      	mov	r1, r2
 8007796:	2200      	movs	r2, #0
 8007798:	602a      	str	r2, [r5, #0]
 800779a:	461a      	mov	r2, r3
 800779c:	f7ff fb69 	bl	8006e72 <_read>
 80077a0:	1c43      	adds	r3, r0, #1
 80077a2:	d102      	bne.n	80077aa <_read_r+0x1e>
 80077a4:	682b      	ldr	r3, [r5, #0]
 80077a6:	b103      	cbz	r3, 80077aa <_read_r+0x1e>
 80077a8:	6023      	str	r3, [r4, #0]
 80077aa:	bd38      	pop	{r3, r4, r5, pc}
 80077ac:	24000340 	.word	0x24000340

080077b0 <_write_r>:
 80077b0:	b538      	push	{r3, r4, r5, lr}
 80077b2:	4d07      	ldr	r5, [pc, #28]	@ (80077d0 <_write_r+0x20>)
 80077b4:	4604      	mov	r4, r0
 80077b6:	4608      	mov	r0, r1
 80077b8:	4611      	mov	r1, r2
 80077ba:	2200      	movs	r2, #0
 80077bc:	602a      	str	r2, [r5, #0]
 80077be:	461a      	mov	r2, r3
 80077c0:	f7ff fbbf 	bl	8006f42 <_write>
 80077c4:	1c43      	adds	r3, r0, #1
 80077c6:	d102      	bne.n	80077ce <_write_r+0x1e>
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	b103      	cbz	r3, 80077ce <_write_r+0x1e>
 80077cc:	6023      	str	r3, [r4, #0]
 80077ce:	bd38      	pop	{r3, r4, r5, pc}
 80077d0:	24000340 	.word	0x24000340

080077d4 <__errno>:
 80077d4:	4b01      	ldr	r3, [pc, #4]	@ (80077dc <__errno+0x8>)
 80077d6:	6818      	ldr	r0, [r3, #0]
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	24000024 	.word	0x24000024

080077e0 <__libc_init_array>:
 80077e0:	b570      	push	{r4, r5, r6, lr}
 80077e2:	4d0d      	ldr	r5, [pc, #52]	@ (8007818 <__libc_init_array+0x38>)
 80077e4:	4c0d      	ldr	r4, [pc, #52]	@ (800781c <__libc_init_array+0x3c>)
 80077e6:	1b64      	subs	r4, r4, r5
 80077e8:	10a4      	asrs	r4, r4, #2
 80077ea:	2600      	movs	r6, #0
 80077ec:	42a6      	cmp	r6, r4
 80077ee:	d109      	bne.n	8007804 <__libc_init_array+0x24>
 80077f0:	4d0b      	ldr	r5, [pc, #44]	@ (8007820 <__libc_init_array+0x40>)
 80077f2:	4c0c      	ldr	r4, [pc, #48]	@ (8007824 <__libc_init_array+0x44>)
 80077f4:	f000 fd24 	bl	8008240 <_init>
 80077f8:	1b64      	subs	r4, r4, r5
 80077fa:	10a4      	asrs	r4, r4, #2
 80077fc:	2600      	movs	r6, #0
 80077fe:	42a6      	cmp	r6, r4
 8007800:	d105      	bne.n	800780e <__libc_init_array+0x2e>
 8007802:	bd70      	pop	{r4, r5, r6, pc}
 8007804:	f855 3b04 	ldr.w	r3, [r5], #4
 8007808:	4798      	blx	r3
 800780a:	3601      	adds	r6, #1
 800780c:	e7ee      	b.n	80077ec <__libc_init_array+0xc>
 800780e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007812:	4798      	blx	r3
 8007814:	3601      	adds	r6, #1
 8007816:	e7f2      	b.n	80077fe <__libc_init_array+0x1e>
 8007818:	080082e4 	.word	0x080082e4
 800781c:	080082e4 	.word	0x080082e4
 8007820:	080082e4 	.word	0x080082e4
 8007824:	080082e8 	.word	0x080082e8

08007828 <__retarget_lock_init_recursive>:
 8007828:	4770      	bx	lr

0800782a <__retarget_lock_acquire_recursive>:
 800782a:	4770      	bx	lr

0800782c <__retarget_lock_release_recursive>:
 800782c:	4770      	bx	lr
	...

08007830 <_free_r>:
 8007830:	b538      	push	{r3, r4, r5, lr}
 8007832:	4605      	mov	r5, r0
 8007834:	2900      	cmp	r1, #0
 8007836:	d041      	beq.n	80078bc <_free_r+0x8c>
 8007838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800783c:	1f0c      	subs	r4, r1, #4
 800783e:	2b00      	cmp	r3, #0
 8007840:	bfb8      	it	lt
 8007842:	18e4      	addlt	r4, r4, r3
 8007844:	f000 f8e0 	bl	8007a08 <__malloc_lock>
 8007848:	4a1d      	ldr	r2, [pc, #116]	@ (80078c0 <_free_r+0x90>)
 800784a:	6813      	ldr	r3, [r2, #0]
 800784c:	b933      	cbnz	r3, 800785c <_free_r+0x2c>
 800784e:	6063      	str	r3, [r4, #4]
 8007850:	6014      	str	r4, [r2, #0]
 8007852:	4628      	mov	r0, r5
 8007854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007858:	f000 b8dc 	b.w	8007a14 <__malloc_unlock>
 800785c:	42a3      	cmp	r3, r4
 800785e:	d908      	bls.n	8007872 <_free_r+0x42>
 8007860:	6820      	ldr	r0, [r4, #0]
 8007862:	1821      	adds	r1, r4, r0
 8007864:	428b      	cmp	r3, r1
 8007866:	bf01      	itttt	eq
 8007868:	6819      	ldreq	r1, [r3, #0]
 800786a:	685b      	ldreq	r3, [r3, #4]
 800786c:	1809      	addeq	r1, r1, r0
 800786e:	6021      	streq	r1, [r4, #0]
 8007870:	e7ed      	b.n	800784e <_free_r+0x1e>
 8007872:	461a      	mov	r2, r3
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	b10b      	cbz	r3, 800787c <_free_r+0x4c>
 8007878:	42a3      	cmp	r3, r4
 800787a:	d9fa      	bls.n	8007872 <_free_r+0x42>
 800787c:	6811      	ldr	r1, [r2, #0]
 800787e:	1850      	adds	r0, r2, r1
 8007880:	42a0      	cmp	r0, r4
 8007882:	d10b      	bne.n	800789c <_free_r+0x6c>
 8007884:	6820      	ldr	r0, [r4, #0]
 8007886:	4401      	add	r1, r0
 8007888:	1850      	adds	r0, r2, r1
 800788a:	4283      	cmp	r3, r0
 800788c:	6011      	str	r1, [r2, #0]
 800788e:	d1e0      	bne.n	8007852 <_free_r+0x22>
 8007890:	6818      	ldr	r0, [r3, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	6053      	str	r3, [r2, #4]
 8007896:	4408      	add	r0, r1
 8007898:	6010      	str	r0, [r2, #0]
 800789a:	e7da      	b.n	8007852 <_free_r+0x22>
 800789c:	d902      	bls.n	80078a4 <_free_r+0x74>
 800789e:	230c      	movs	r3, #12
 80078a0:	602b      	str	r3, [r5, #0]
 80078a2:	e7d6      	b.n	8007852 <_free_r+0x22>
 80078a4:	6820      	ldr	r0, [r4, #0]
 80078a6:	1821      	adds	r1, r4, r0
 80078a8:	428b      	cmp	r3, r1
 80078aa:	bf04      	itt	eq
 80078ac:	6819      	ldreq	r1, [r3, #0]
 80078ae:	685b      	ldreq	r3, [r3, #4]
 80078b0:	6063      	str	r3, [r4, #4]
 80078b2:	bf04      	itt	eq
 80078b4:	1809      	addeq	r1, r1, r0
 80078b6:	6021      	streq	r1, [r4, #0]
 80078b8:	6054      	str	r4, [r2, #4]
 80078ba:	e7ca      	b.n	8007852 <_free_r+0x22>
 80078bc:	bd38      	pop	{r3, r4, r5, pc}
 80078be:	bf00      	nop
 80078c0:	2400034c 	.word	0x2400034c

080078c4 <sbrk_aligned>:
 80078c4:	b570      	push	{r4, r5, r6, lr}
 80078c6:	4e0f      	ldr	r6, [pc, #60]	@ (8007904 <sbrk_aligned+0x40>)
 80078c8:	460c      	mov	r4, r1
 80078ca:	6831      	ldr	r1, [r6, #0]
 80078cc:	4605      	mov	r5, r0
 80078ce:	b911      	cbnz	r1, 80078d6 <sbrk_aligned+0x12>
 80078d0:	f000 fca6 	bl	8008220 <_sbrk_r>
 80078d4:	6030      	str	r0, [r6, #0]
 80078d6:	4621      	mov	r1, r4
 80078d8:	4628      	mov	r0, r5
 80078da:	f000 fca1 	bl	8008220 <_sbrk_r>
 80078de:	1c43      	adds	r3, r0, #1
 80078e0:	d103      	bne.n	80078ea <sbrk_aligned+0x26>
 80078e2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80078e6:	4620      	mov	r0, r4
 80078e8:	bd70      	pop	{r4, r5, r6, pc}
 80078ea:	1cc4      	adds	r4, r0, #3
 80078ec:	f024 0403 	bic.w	r4, r4, #3
 80078f0:	42a0      	cmp	r0, r4
 80078f2:	d0f8      	beq.n	80078e6 <sbrk_aligned+0x22>
 80078f4:	1a21      	subs	r1, r4, r0
 80078f6:	4628      	mov	r0, r5
 80078f8:	f000 fc92 	bl	8008220 <_sbrk_r>
 80078fc:	3001      	adds	r0, #1
 80078fe:	d1f2      	bne.n	80078e6 <sbrk_aligned+0x22>
 8007900:	e7ef      	b.n	80078e2 <sbrk_aligned+0x1e>
 8007902:	bf00      	nop
 8007904:	24000348 	.word	0x24000348

08007908 <_malloc_r>:
 8007908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800790c:	1ccd      	adds	r5, r1, #3
 800790e:	f025 0503 	bic.w	r5, r5, #3
 8007912:	3508      	adds	r5, #8
 8007914:	2d0c      	cmp	r5, #12
 8007916:	bf38      	it	cc
 8007918:	250c      	movcc	r5, #12
 800791a:	2d00      	cmp	r5, #0
 800791c:	4606      	mov	r6, r0
 800791e:	db01      	blt.n	8007924 <_malloc_r+0x1c>
 8007920:	42a9      	cmp	r1, r5
 8007922:	d904      	bls.n	800792e <_malloc_r+0x26>
 8007924:	230c      	movs	r3, #12
 8007926:	6033      	str	r3, [r6, #0]
 8007928:	2000      	movs	r0, #0
 800792a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800792e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a04 <_malloc_r+0xfc>
 8007932:	f000 f869 	bl	8007a08 <__malloc_lock>
 8007936:	f8d8 3000 	ldr.w	r3, [r8]
 800793a:	461c      	mov	r4, r3
 800793c:	bb44      	cbnz	r4, 8007990 <_malloc_r+0x88>
 800793e:	4629      	mov	r1, r5
 8007940:	4630      	mov	r0, r6
 8007942:	f7ff ffbf 	bl	80078c4 <sbrk_aligned>
 8007946:	1c43      	adds	r3, r0, #1
 8007948:	4604      	mov	r4, r0
 800794a:	d158      	bne.n	80079fe <_malloc_r+0xf6>
 800794c:	f8d8 4000 	ldr.w	r4, [r8]
 8007950:	4627      	mov	r7, r4
 8007952:	2f00      	cmp	r7, #0
 8007954:	d143      	bne.n	80079de <_malloc_r+0xd6>
 8007956:	2c00      	cmp	r4, #0
 8007958:	d04b      	beq.n	80079f2 <_malloc_r+0xea>
 800795a:	6823      	ldr	r3, [r4, #0]
 800795c:	4639      	mov	r1, r7
 800795e:	4630      	mov	r0, r6
 8007960:	eb04 0903 	add.w	r9, r4, r3
 8007964:	f000 fc5c 	bl	8008220 <_sbrk_r>
 8007968:	4581      	cmp	r9, r0
 800796a:	d142      	bne.n	80079f2 <_malloc_r+0xea>
 800796c:	6821      	ldr	r1, [r4, #0]
 800796e:	1a6d      	subs	r5, r5, r1
 8007970:	4629      	mov	r1, r5
 8007972:	4630      	mov	r0, r6
 8007974:	f7ff ffa6 	bl	80078c4 <sbrk_aligned>
 8007978:	3001      	adds	r0, #1
 800797a:	d03a      	beq.n	80079f2 <_malloc_r+0xea>
 800797c:	6823      	ldr	r3, [r4, #0]
 800797e:	442b      	add	r3, r5
 8007980:	6023      	str	r3, [r4, #0]
 8007982:	f8d8 3000 	ldr.w	r3, [r8]
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	bb62      	cbnz	r2, 80079e4 <_malloc_r+0xdc>
 800798a:	f8c8 7000 	str.w	r7, [r8]
 800798e:	e00f      	b.n	80079b0 <_malloc_r+0xa8>
 8007990:	6822      	ldr	r2, [r4, #0]
 8007992:	1b52      	subs	r2, r2, r5
 8007994:	d420      	bmi.n	80079d8 <_malloc_r+0xd0>
 8007996:	2a0b      	cmp	r2, #11
 8007998:	d917      	bls.n	80079ca <_malloc_r+0xc2>
 800799a:	1961      	adds	r1, r4, r5
 800799c:	42a3      	cmp	r3, r4
 800799e:	6025      	str	r5, [r4, #0]
 80079a0:	bf18      	it	ne
 80079a2:	6059      	strne	r1, [r3, #4]
 80079a4:	6863      	ldr	r3, [r4, #4]
 80079a6:	bf08      	it	eq
 80079a8:	f8c8 1000 	streq.w	r1, [r8]
 80079ac:	5162      	str	r2, [r4, r5]
 80079ae:	604b      	str	r3, [r1, #4]
 80079b0:	4630      	mov	r0, r6
 80079b2:	f000 f82f 	bl	8007a14 <__malloc_unlock>
 80079b6:	f104 000b 	add.w	r0, r4, #11
 80079ba:	1d23      	adds	r3, r4, #4
 80079bc:	f020 0007 	bic.w	r0, r0, #7
 80079c0:	1ac2      	subs	r2, r0, r3
 80079c2:	bf1c      	itt	ne
 80079c4:	1a1b      	subne	r3, r3, r0
 80079c6:	50a3      	strne	r3, [r4, r2]
 80079c8:	e7af      	b.n	800792a <_malloc_r+0x22>
 80079ca:	6862      	ldr	r2, [r4, #4]
 80079cc:	42a3      	cmp	r3, r4
 80079ce:	bf0c      	ite	eq
 80079d0:	f8c8 2000 	streq.w	r2, [r8]
 80079d4:	605a      	strne	r2, [r3, #4]
 80079d6:	e7eb      	b.n	80079b0 <_malloc_r+0xa8>
 80079d8:	4623      	mov	r3, r4
 80079da:	6864      	ldr	r4, [r4, #4]
 80079dc:	e7ae      	b.n	800793c <_malloc_r+0x34>
 80079de:	463c      	mov	r4, r7
 80079e0:	687f      	ldr	r7, [r7, #4]
 80079e2:	e7b6      	b.n	8007952 <_malloc_r+0x4a>
 80079e4:	461a      	mov	r2, r3
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	42a3      	cmp	r3, r4
 80079ea:	d1fb      	bne.n	80079e4 <_malloc_r+0xdc>
 80079ec:	2300      	movs	r3, #0
 80079ee:	6053      	str	r3, [r2, #4]
 80079f0:	e7de      	b.n	80079b0 <_malloc_r+0xa8>
 80079f2:	230c      	movs	r3, #12
 80079f4:	6033      	str	r3, [r6, #0]
 80079f6:	4630      	mov	r0, r6
 80079f8:	f000 f80c 	bl	8007a14 <__malloc_unlock>
 80079fc:	e794      	b.n	8007928 <_malloc_r+0x20>
 80079fe:	6005      	str	r5, [r0, #0]
 8007a00:	e7d6      	b.n	80079b0 <_malloc_r+0xa8>
 8007a02:	bf00      	nop
 8007a04:	2400034c 	.word	0x2400034c

08007a08 <__malloc_lock>:
 8007a08:	4801      	ldr	r0, [pc, #4]	@ (8007a10 <__malloc_lock+0x8>)
 8007a0a:	f7ff bf0e 	b.w	800782a <__retarget_lock_acquire_recursive>
 8007a0e:	bf00      	nop
 8007a10:	24000344 	.word	0x24000344

08007a14 <__malloc_unlock>:
 8007a14:	4801      	ldr	r0, [pc, #4]	@ (8007a1c <__malloc_unlock+0x8>)
 8007a16:	f7ff bf09 	b.w	800782c <__retarget_lock_release_recursive>
 8007a1a:	bf00      	nop
 8007a1c:	24000344 	.word	0x24000344

08007a20 <__sfputc_r>:
 8007a20:	6893      	ldr	r3, [r2, #8]
 8007a22:	3b01      	subs	r3, #1
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	b410      	push	{r4}
 8007a28:	6093      	str	r3, [r2, #8]
 8007a2a:	da08      	bge.n	8007a3e <__sfputc_r+0x1e>
 8007a2c:	6994      	ldr	r4, [r2, #24]
 8007a2e:	42a3      	cmp	r3, r4
 8007a30:	db01      	blt.n	8007a36 <__sfputc_r+0x16>
 8007a32:	290a      	cmp	r1, #10
 8007a34:	d103      	bne.n	8007a3e <__sfputc_r+0x1e>
 8007a36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a3a:	f7ff bde8 	b.w	800760e <__swbuf_r>
 8007a3e:	6813      	ldr	r3, [r2, #0]
 8007a40:	1c58      	adds	r0, r3, #1
 8007a42:	6010      	str	r0, [r2, #0]
 8007a44:	7019      	strb	r1, [r3, #0]
 8007a46:	4608      	mov	r0, r1
 8007a48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <__sfputs_r>:
 8007a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a50:	4606      	mov	r6, r0
 8007a52:	460f      	mov	r7, r1
 8007a54:	4614      	mov	r4, r2
 8007a56:	18d5      	adds	r5, r2, r3
 8007a58:	42ac      	cmp	r4, r5
 8007a5a:	d101      	bne.n	8007a60 <__sfputs_r+0x12>
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	e007      	b.n	8007a70 <__sfputs_r+0x22>
 8007a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a64:	463a      	mov	r2, r7
 8007a66:	4630      	mov	r0, r6
 8007a68:	f7ff ffda 	bl	8007a20 <__sfputc_r>
 8007a6c:	1c43      	adds	r3, r0, #1
 8007a6e:	d1f3      	bne.n	8007a58 <__sfputs_r+0xa>
 8007a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a74 <_vfiprintf_r>:
 8007a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a78:	460d      	mov	r5, r1
 8007a7a:	b09d      	sub	sp, #116	@ 0x74
 8007a7c:	4614      	mov	r4, r2
 8007a7e:	4698      	mov	r8, r3
 8007a80:	4606      	mov	r6, r0
 8007a82:	b118      	cbz	r0, 8007a8c <_vfiprintf_r+0x18>
 8007a84:	6a03      	ldr	r3, [r0, #32]
 8007a86:	b90b      	cbnz	r3, 8007a8c <_vfiprintf_r+0x18>
 8007a88:	f7ff fcd8 	bl	800743c <__sinit>
 8007a8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a8e:	07d9      	lsls	r1, r3, #31
 8007a90:	d405      	bmi.n	8007a9e <_vfiprintf_r+0x2a>
 8007a92:	89ab      	ldrh	r3, [r5, #12]
 8007a94:	059a      	lsls	r2, r3, #22
 8007a96:	d402      	bmi.n	8007a9e <_vfiprintf_r+0x2a>
 8007a98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a9a:	f7ff fec6 	bl	800782a <__retarget_lock_acquire_recursive>
 8007a9e:	89ab      	ldrh	r3, [r5, #12]
 8007aa0:	071b      	lsls	r3, r3, #28
 8007aa2:	d501      	bpl.n	8007aa8 <_vfiprintf_r+0x34>
 8007aa4:	692b      	ldr	r3, [r5, #16]
 8007aa6:	b99b      	cbnz	r3, 8007ad0 <_vfiprintf_r+0x5c>
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	4630      	mov	r0, r6
 8007aac:	f7ff fdee 	bl	800768c <__swsetup_r>
 8007ab0:	b170      	cbz	r0, 8007ad0 <_vfiprintf_r+0x5c>
 8007ab2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ab4:	07dc      	lsls	r4, r3, #31
 8007ab6:	d504      	bpl.n	8007ac2 <_vfiprintf_r+0x4e>
 8007ab8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007abc:	b01d      	add	sp, #116	@ 0x74
 8007abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac2:	89ab      	ldrh	r3, [r5, #12]
 8007ac4:	0598      	lsls	r0, r3, #22
 8007ac6:	d4f7      	bmi.n	8007ab8 <_vfiprintf_r+0x44>
 8007ac8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007aca:	f7ff feaf 	bl	800782c <__retarget_lock_release_recursive>
 8007ace:	e7f3      	b.n	8007ab8 <_vfiprintf_r+0x44>
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ad4:	2320      	movs	r3, #32
 8007ad6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ada:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ade:	2330      	movs	r3, #48	@ 0x30
 8007ae0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007c90 <_vfiprintf_r+0x21c>
 8007ae4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ae8:	f04f 0901 	mov.w	r9, #1
 8007aec:	4623      	mov	r3, r4
 8007aee:	469a      	mov	sl, r3
 8007af0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007af4:	b10a      	cbz	r2, 8007afa <_vfiprintf_r+0x86>
 8007af6:	2a25      	cmp	r2, #37	@ 0x25
 8007af8:	d1f9      	bne.n	8007aee <_vfiprintf_r+0x7a>
 8007afa:	ebba 0b04 	subs.w	fp, sl, r4
 8007afe:	d00b      	beq.n	8007b18 <_vfiprintf_r+0xa4>
 8007b00:	465b      	mov	r3, fp
 8007b02:	4622      	mov	r2, r4
 8007b04:	4629      	mov	r1, r5
 8007b06:	4630      	mov	r0, r6
 8007b08:	f7ff ffa1 	bl	8007a4e <__sfputs_r>
 8007b0c:	3001      	adds	r0, #1
 8007b0e:	f000 80a7 	beq.w	8007c60 <_vfiprintf_r+0x1ec>
 8007b12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b14:	445a      	add	r2, fp
 8007b16:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b18:	f89a 3000 	ldrb.w	r3, [sl]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f000 809f 	beq.w	8007c60 <_vfiprintf_r+0x1ec>
 8007b22:	2300      	movs	r3, #0
 8007b24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007b28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b2c:	f10a 0a01 	add.w	sl, sl, #1
 8007b30:	9304      	str	r3, [sp, #16]
 8007b32:	9307      	str	r3, [sp, #28]
 8007b34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b38:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b3a:	4654      	mov	r4, sl
 8007b3c:	2205      	movs	r2, #5
 8007b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b42:	4853      	ldr	r0, [pc, #332]	@ (8007c90 <_vfiprintf_r+0x21c>)
 8007b44:	f7f8 fbd4 	bl	80002f0 <memchr>
 8007b48:	9a04      	ldr	r2, [sp, #16]
 8007b4a:	b9d8      	cbnz	r0, 8007b84 <_vfiprintf_r+0x110>
 8007b4c:	06d1      	lsls	r1, r2, #27
 8007b4e:	bf44      	itt	mi
 8007b50:	2320      	movmi	r3, #32
 8007b52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b56:	0713      	lsls	r3, r2, #28
 8007b58:	bf44      	itt	mi
 8007b5a:	232b      	movmi	r3, #43	@ 0x2b
 8007b5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b60:	f89a 3000 	ldrb.w	r3, [sl]
 8007b64:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b66:	d015      	beq.n	8007b94 <_vfiprintf_r+0x120>
 8007b68:	9a07      	ldr	r2, [sp, #28]
 8007b6a:	4654      	mov	r4, sl
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	f04f 0c0a 	mov.w	ip, #10
 8007b72:	4621      	mov	r1, r4
 8007b74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b78:	3b30      	subs	r3, #48	@ 0x30
 8007b7a:	2b09      	cmp	r3, #9
 8007b7c:	d94b      	bls.n	8007c16 <_vfiprintf_r+0x1a2>
 8007b7e:	b1b0      	cbz	r0, 8007bae <_vfiprintf_r+0x13a>
 8007b80:	9207      	str	r2, [sp, #28]
 8007b82:	e014      	b.n	8007bae <_vfiprintf_r+0x13a>
 8007b84:	eba0 0308 	sub.w	r3, r0, r8
 8007b88:	fa09 f303 	lsl.w	r3, r9, r3
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	9304      	str	r3, [sp, #16]
 8007b90:	46a2      	mov	sl, r4
 8007b92:	e7d2      	b.n	8007b3a <_vfiprintf_r+0xc6>
 8007b94:	9b03      	ldr	r3, [sp, #12]
 8007b96:	1d19      	adds	r1, r3, #4
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	9103      	str	r1, [sp, #12]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	bfbb      	ittet	lt
 8007ba0:	425b      	neglt	r3, r3
 8007ba2:	f042 0202 	orrlt.w	r2, r2, #2
 8007ba6:	9307      	strge	r3, [sp, #28]
 8007ba8:	9307      	strlt	r3, [sp, #28]
 8007baa:	bfb8      	it	lt
 8007bac:	9204      	strlt	r2, [sp, #16]
 8007bae:	7823      	ldrb	r3, [r4, #0]
 8007bb0:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bb2:	d10a      	bne.n	8007bca <_vfiprintf_r+0x156>
 8007bb4:	7863      	ldrb	r3, [r4, #1]
 8007bb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bb8:	d132      	bne.n	8007c20 <_vfiprintf_r+0x1ac>
 8007bba:	9b03      	ldr	r3, [sp, #12]
 8007bbc:	1d1a      	adds	r2, r3, #4
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	9203      	str	r2, [sp, #12]
 8007bc2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007bc6:	3402      	adds	r4, #2
 8007bc8:	9305      	str	r3, [sp, #20]
 8007bca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007ca0 <_vfiprintf_r+0x22c>
 8007bce:	7821      	ldrb	r1, [r4, #0]
 8007bd0:	2203      	movs	r2, #3
 8007bd2:	4650      	mov	r0, sl
 8007bd4:	f7f8 fb8c 	bl	80002f0 <memchr>
 8007bd8:	b138      	cbz	r0, 8007bea <_vfiprintf_r+0x176>
 8007bda:	9b04      	ldr	r3, [sp, #16]
 8007bdc:	eba0 000a 	sub.w	r0, r0, sl
 8007be0:	2240      	movs	r2, #64	@ 0x40
 8007be2:	4082      	lsls	r2, r0
 8007be4:	4313      	orrs	r3, r2
 8007be6:	3401      	adds	r4, #1
 8007be8:	9304      	str	r3, [sp, #16]
 8007bea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bee:	4829      	ldr	r0, [pc, #164]	@ (8007c94 <_vfiprintf_r+0x220>)
 8007bf0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007bf4:	2206      	movs	r2, #6
 8007bf6:	f7f8 fb7b 	bl	80002f0 <memchr>
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	d03f      	beq.n	8007c7e <_vfiprintf_r+0x20a>
 8007bfe:	4b26      	ldr	r3, [pc, #152]	@ (8007c98 <_vfiprintf_r+0x224>)
 8007c00:	bb1b      	cbnz	r3, 8007c4a <_vfiprintf_r+0x1d6>
 8007c02:	9b03      	ldr	r3, [sp, #12]
 8007c04:	3307      	adds	r3, #7
 8007c06:	f023 0307 	bic.w	r3, r3, #7
 8007c0a:	3308      	adds	r3, #8
 8007c0c:	9303      	str	r3, [sp, #12]
 8007c0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c10:	443b      	add	r3, r7
 8007c12:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c14:	e76a      	b.n	8007aec <_vfiprintf_r+0x78>
 8007c16:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c1a:	460c      	mov	r4, r1
 8007c1c:	2001      	movs	r0, #1
 8007c1e:	e7a8      	b.n	8007b72 <_vfiprintf_r+0xfe>
 8007c20:	2300      	movs	r3, #0
 8007c22:	3401      	adds	r4, #1
 8007c24:	9305      	str	r3, [sp, #20]
 8007c26:	4619      	mov	r1, r3
 8007c28:	f04f 0c0a 	mov.w	ip, #10
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c32:	3a30      	subs	r2, #48	@ 0x30
 8007c34:	2a09      	cmp	r2, #9
 8007c36:	d903      	bls.n	8007c40 <_vfiprintf_r+0x1cc>
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d0c6      	beq.n	8007bca <_vfiprintf_r+0x156>
 8007c3c:	9105      	str	r1, [sp, #20]
 8007c3e:	e7c4      	b.n	8007bca <_vfiprintf_r+0x156>
 8007c40:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c44:	4604      	mov	r4, r0
 8007c46:	2301      	movs	r3, #1
 8007c48:	e7f0      	b.n	8007c2c <_vfiprintf_r+0x1b8>
 8007c4a:	ab03      	add	r3, sp, #12
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	462a      	mov	r2, r5
 8007c50:	4b12      	ldr	r3, [pc, #72]	@ (8007c9c <_vfiprintf_r+0x228>)
 8007c52:	a904      	add	r1, sp, #16
 8007c54:	4630      	mov	r0, r6
 8007c56:	f3af 8000 	nop.w
 8007c5a:	4607      	mov	r7, r0
 8007c5c:	1c78      	adds	r0, r7, #1
 8007c5e:	d1d6      	bne.n	8007c0e <_vfiprintf_r+0x19a>
 8007c60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c62:	07d9      	lsls	r1, r3, #31
 8007c64:	d405      	bmi.n	8007c72 <_vfiprintf_r+0x1fe>
 8007c66:	89ab      	ldrh	r3, [r5, #12]
 8007c68:	059a      	lsls	r2, r3, #22
 8007c6a:	d402      	bmi.n	8007c72 <_vfiprintf_r+0x1fe>
 8007c6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c6e:	f7ff fddd 	bl	800782c <__retarget_lock_release_recursive>
 8007c72:	89ab      	ldrh	r3, [r5, #12]
 8007c74:	065b      	lsls	r3, r3, #25
 8007c76:	f53f af1f 	bmi.w	8007ab8 <_vfiprintf_r+0x44>
 8007c7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c7c:	e71e      	b.n	8007abc <_vfiprintf_r+0x48>
 8007c7e:	ab03      	add	r3, sp, #12
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	462a      	mov	r2, r5
 8007c84:	4b05      	ldr	r3, [pc, #20]	@ (8007c9c <_vfiprintf_r+0x228>)
 8007c86:	a904      	add	r1, sp, #16
 8007c88:	4630      	mov	r0, r6
 8007c8a:	f000 f879 	bl	8007d80 <_printf_i>
 8007c8e:	e7e4      	b.n	8007c5a <_vfiprintf_r+0x1e6>
 8007c90:	080082a6 	.word	0x080082a6
 8007c94:	080082b0 	.word	0x080082b0
 8007c98:	00000000 	.word	0x00000000
 8007c9c:	08007a4f 	.word	0x08007a4f
 8007ca0:	080082ac 	.word	0x080082ac

08007ca4 <_printf_common>:
 8007ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ca8:	4616      	mov	r6, r2
 8007caa:	4698      	mov	r8, r3
 8007cac:	688a      	ldr	r2, [r1, #8]
 8007cae:	690b      	ldr	r3, [r1, #16]
 8007cb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	bfb8      	it	lt
 8007cb8:	4613      	movlt	r3, r2
 8007cba:	6033      	str	r3, [r6, #0]
 8007cbc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007cc0:	4607      	mov	r7, r0
 8007cc2:	460c      	mov	r4, r1
 8007cc4:	b10a      	cbz	r2, 8007cca <_printf_common+0x26>
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	6033      	str	r3, [r6, #0]
 8007cca:	6823      	ldr	r3, [r4, #0]
 8007ccc:	0699      	lsls	r1, r3, #26
 8007cce:	bf42      	ittt	mi
 8007cd0:	6833      	ldrmi	r3, [r6, #0]
 8007cd2:	3302      	addmi	r3, #2
 8007cd4:	6033      	strmi	r3, [r6, #0]
 8007cd6:	6825      	ldr	r5, [r4, #0]
 8007cd8:	f015 0506 	ands.w	r5, r5, #6
 8007cdc:	d106      	bne.n	8007cec <_printf_common+0x48>
 8007cde:	f104 0a19 	add.w	sl, r4, #25
 8007ce2:	68e3      	ldr	r3, [r4, #12]
 8007ce4:	6832      	ldr	r2, [r6, #0]
 8007ce6:	1a9b      	subs	r3, r3, r2
 8007ce8:	42ab      	cmp	r3, r5
 8007cea:	dc26      	bgt.n	8007d3a <_printf_common+0x96>
 8007cec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007cf0:	6822      	ldr	r2, [r4, #0]
 8007cf2:	3b00      	subs	r3, #0
 8007cf4:	bf18      	it	ne
 8007cf6:	2301      	movne	r3, #1
 8007cf8:	0692      	lsls	r2, r2, #26
 8007cfa:	d42b      	bmi.n	8007d54 <_printf_common+0xb0>
 8007cfc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007d00:	4641      	mov	r1, r8
 8007d02:	4638      	mov	r0, r7
 8007d04:	47c8      	blx	r9
 8007d06:	3001      	adds	r0, #1
 8007d08:	d01e      	beq.n	8007d48 <_printf_common+0xa4>
 8007d0a:	6823      	ldr	r3, [r4, #0]
 8007d0c:	6922      	ldr	r2, [r4, #16]
 8007d0e:	f003 0306 	and.w	r3, r3, #6
 8007d12:	2b04      	cmp	r3, #4
 8007d14:	bf02      	ittt	eq
 8007d16:	68e5      	ldreq	r5, [r4, #12]
 8007d18:	6833      	ldreq	r3, [r6, #0]
 8007d1a:	1aed      	subeq	r5, r5, r3
 8007d1c:	68a3      	ldr	r3, [r4, #8]
 8007d1e:	bf0c      	ite	eq
 8007d20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d24:	2500      	movne	r5, #0
 8007d26:	4293      	cmp	r3, r2
 8007d28:	bfc4      	itt	gt
 8007d2a:	1a9b      	subgt	r3, r3, r2
 8007d2c:	18ed      	addgt	r5, r5, r3
 8007d2e:	2600      	movs	r6, #0
 8007d30:	341a      	adds	r4, #26
 8007d32:	42b5      	cmp	r5, r6
 8007d34:	d11a      	bne.n	8007d6c <_printf_common+0xc8>
 8007d36:	2000      	movs	r0, #0
 8007d38:	e008      	b.n	8007d4c <_printf_common+0xa8>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	4652      	mov	r2, sl
 8007d3e:	4641      	mov	r1, r8
 8007d40:	4638      	mov	r0, r7
 8007d42:	47c8      	blx	r9
 8007d44:	3001      	adds	r0, #1
 8007d46:	d103      	bne.n	8007d50 <_printf_common+0xac>
 8007d48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d50:	3501      	adds	r5, #1
 8007d52:	e7c6      	b.n	8007ce2 <_printf_common+0x3e>
 8007d54:	18e1      	adds	r1, r4, r3
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	2030      	movs	r0, #48	@ 0x30
 8007d5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d5e:	4422      	add	r2, r4
 8007d60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d68:	3302      	adds	r3, #2
 8007d6a:	e7c7      	b.n	8007cfc <_printf_common+0x58>
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	4622      	mov	r2, r4
 8007d70:	4641      	mov	r1, r8
 8007d72:	4638      	mov	r0, r7
 8007d74:	47c8      	blx	r9
 8007d76:	3001      	adds	r0, #1
 8007d78:	d0e6      	beq.n	8007d48 <_printf_common+0xa4>
 8007d7a:	3601      	adds	r6, #1
 8007d7c:	e7d9      	b.n	8007d32 <_printf_common+0x8e>
	...

08007d80 <_printf_i>:
 8007d80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d84:	7e0f      	ldrb	r7, [r1, #24]
 8007d86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d88:	2f78      	cmp	r7, #120	@ 0x78
 8007d8a:	4691      	mov	r9, r2
 8007d8c:	4680      	mov	r8, r0
 8007d8e:	460c      	mov	r4, r1
 8007d90:	469a      	mov	sl, r3
 8007d92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d96:	d807      	bhi.n	8007da8 <_printf_i+0x28>
 8007d98:	2f62      	cmp	r7, #98	@ 0x62
 8007d9a:	d80a      	bhi.n	8007db2 <_printf_i+0x32>
 8007d9c:	2f00      	cmp	r7, #0
 8007d9e:	f000 80d2 	beq.w	8007f46 <_printf_i+0x1c6>
 8007da2:	2f58      	cmp	r7, #88	@ 0x58
 8007da4:	f000 80b9 	beq.w	8007f1a <_printf_i+0x19a>
 8007da8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007dac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007db0:	e03a      	b.n	8007e28 <_printf_i+0xa8>
 8007db2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007db6:	2b15      	cmp	r3, #21
 8007db8:	d8f6      	bhi.n	8007da8 <_printf_i+0x28>
 8007dba:	a101      	add	r1, pc, #4	@ (adr r1, 8007dc0 <_printf_i+0x40>)
 8007dbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007dc0:	08007e19 	.word	0x08007e19
 8007dc4:	08007e2d 	.word	0x08007e2d
 8007dc8:	08007da9 	.word	0x08007da9
 8007dcc:	08007da9 	.word	0x08007da9
 8007dd0:	08007da9 	.word	0x08007da9
 8007dd4:	08007da9 	.word	0x08007da9
 8007dd8:	08007e2d 	.word	0x08007e2d
 8007ddc:	08007da9 	.word	0x08007da9
 8007de0:	08007da9 	.word	0x08007da9
 8007de4:	08007da9 	.word	0x08007da9
 8007de8:	08007da9 	.word	0x08007da9
 8007dec:	08007f2d 	.word	0x08007f2d
 8007df0:	08007e57 	.word	0x08007e57
 8007df4:	08007ee7 	.word	0x08007ee7
 8007df8:	08007da9 	.word	0x08007da9
 8007dfc:	08007da9 	.word	0x08007da9
 8007e00:	08007f4f 	.word	0x08007f4f
 8007e04:	08007da9 	.word	0x08007da9
 8007e08:	08007e57 	.word	0x08007e57
 8007e0c:	08007da9 	.word	0x08007da9
 8007e10:	08007da9 	.word	0x08007da9
 8007e14:	08007eef 	.word	0x08007eef
 8007e18:	6833      	ldr	r3, [r6, #0]
 8007e1a:	1d1a      	adds	r2, r3, #4
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6032      	str	r2, [r6, #0]
 8007e20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e09d      	b.n	8007f68 <_printf_i+0x1e8>
 8007e2c:	6833      	ldr	r3, [r6, #0]
 8007e2e:	6820      	ldr	r0, [r4, #0]
 8007e30:	1d19      	adds	r1, r3, #4
 8007e32:	6031      	str	r1, [r6, #0]
 8007e34:	0606      	lsls	r6, r0, #24
 8007e36:	d501      	bpl.n	8007e3c <_printf_i+0xbc>
 8007e38:	681d      	ldr	r5, [r3, #0]
 8007e3a:	e003      	b.n	8007e44 <_printf_i+0xc4>
 8007e3c:	0645      	lsls	r5, r0, #25
 8007e3e:	d5fb      	bpl.n	8007e38 <_printf_i+0xb8>
 8007e40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e44:	2d00      	cmp	r5, #0
 8007e46:	da03      	bge.n	8007e50 <_printf_i+0xd0>
 8007e48:	232d      	movs	r3, #45	@ 0x2d
 8007e4a:	426d      	negs	r5, r5
 8007e4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e50:	4859      	ldr	r0, [pc, #356]	@ (8007fb8 <_printf_i+0x238>)
 8007e52:	230a      	movs	r3, #10
 8007e54:	e011      	b.n	8007e7a <_printf_i+0xfa>
 8007e56:	6821      	ldr	r1, [r4, #0]
 8007e58:	6833      	ldr	r3, [r6, #0]
 8007e5a:	0608      	lsls	r0, r1, #24
 8007e5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e60:	d402      	bmi.n	8007e68 <_printf_i+0xe8>
 8007e62:	0649      	lsls	r1, r1, #25
 8007e64:	bf48      	it	mi
 8007e66:	b2ad      	uxthmi	r5, r5
 8007e68:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e6a:	4853      	ldr	r0, [pc, #332]	@ (8007fb8 <_printf_i+0x238>)
 8007e6c:	6033      	str	r3, [r6, #0]
 8007e6e:	bf14      	ite	ne
 8007e70:	230a      	movne	r3, #10
 8007e72:	2308      	moveq	r3, #8
 8007e74:	2100      	movs	r1, #0
 8007e76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e7a:	6866      	ldr	r6, [r4, #4]
 8007e7c:	60a6      	str	r6, [r4, #8]
 8007e7e:	2e00      	cmp	r6, #0
 8007e80:	bfa2      	ittt	ge
 8007e82:	6821      	ldrge	r1, [r4, #0]
 8007e84:	f021 0104 	bicge.w	r1, r1, #4
 8007e88:	6021      	strge	r1, [r4, #0]
 8007e8a:	b90d      	cbnz	r5, 8007e90 <_printf_i+0x110>
 8007e8c:	2e00      	cmp	r6, #0
 8007e8e:	d04b      	beq.n	8007f28 <_printf_i+0x1a8>
 8007e90:	4616      	mov	r6, r2
 8007e92:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e96:	fb03 5711 	mls	r7, r3, r1, r5
 8007e9a:	5dc7      	ldrb	r7, [r0, r7]
 8007e9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ea0:	462f      	mov	r7, r5
 8007ea2:	42bb      	cmp	r3, r7
 8007ea4:	460d      	mov	r5, r1
 8007ea6:	d9f4      	bls.n	8007e92 <_printf_i+0x112>
 8007ea8:	2b08      	cmp	r3, #8
 8007eaa:	d10b      	bne.n	8007ec4 <_printf_i+0x144>
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	07df      	lsls	r7, r3, #31
 8007eb0:	d508      	bpl.n	8007ec4 <_printf_i+0x144>
 8007eb2:	6923      	ldr	r3, [r4, #16]
 8007eb4:	6861      	ldr	r1, [r4, #4]
 8007eb6:	4299      	cmp	r1, r3
 8007eb8:	bfde      	ittt	le
 8007eba:	2330      	movle	r3, #48	@ 0x30
 8007ebc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ec0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007ec4:	1b92      	subs	r2, r2, r6
 8007ec6:	6122      	str	r2, [r4, #16]
 8007ec8:	f8cd a000 	str.w	sl, [sp]
 8007ecc:	464b      	mov	r3, r9
 8007ece:	aa03      	add	r2, sp, #12
 8007ed0:	4621      	mov	r1, r4
 8007ed2:	4640      	mov	r0, r8
 8007ed4:	f7ff fee6 	bl	8007ca4 <_printf_common>
 8007ed8:	3001      	adds	r0, #1
 8007eda:	d14a      	bne.n	8007f72 <_printf_i+0x1f2>
 8007edc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ee0:	b004      	add	sp, #16
 8007ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ee6:	6823      	ldr	r3, [r4, #0]
 8007ee8:	f043 0320 	orr.w	r3, r3, #32
 8007eec:	6023      	str	r3, [r4, #0]
 8007eee:	4833      	ldr	r0, [pc, #204]	@ (8007fbc <_printf_i+0x23c>)
 8007ef0:	2778      	movs	r7, #120	@ 0x78
 8007ef2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ef6:	6823      	ldr	r3, [r4, #0]
 8007ef8:	6831      	ldr	r1, [r6, #0]
 8007efa:	061f      	lsls	r7, r3, #24
 8007efc:	f851 5b04 	ldr.w	r5, [r1], #4
 8007f00:	d402      	bmi.n	8007f08 <_printf_i+0x188>
 8007f02:	065f      	lsls	r7, r3, #25
 8007f04:	bf48      	it	mi
 8007f06:	b2ad      	uxthmi	r5, r5
 8007f08:	6031      	str	r1, [r6, #0]
 8007f0a:	07d9      	lsls	r1, r3, #31
 8007f0c:	bf44      	itt	mi
 8007f0e:	f043 0320 	orrmi.w	r3, r3, #32
 8007f12:	6023      	strmi	r3, [r4, #0]
 8007f14:	b11d      	cbz	r5, 8007f1e <_printf_i+0x19e>
 8007f16:	2310      	movs	r3, #16
 8007f18:	e7ac      	b.n	8007e74 <_printf_i+0xf4>
 8007f1a:	4827      	ldr	r0, [pc, #156]	@ (8007fb8 <_printf_i+0x238>)
 8007f1c:	e7e9      	b.n	8007ef2 <_printf_i+0x172>
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	f023 0320 	bic.w	r3, r3, #32
 8007f24:	6023      	str	r3, [r4, #0]
 8007f26:	e7f6      	b.n	8007f16 <_printf_i+0x196>
 8007f28:	4616      	mov	r6, r2
 8007f2a:	e7bd      	b.n	8007ea8 <_printf_i+0x128>
 8007f2c:	6833      	ldr	r3, [r6, #0]
 8007f2e:	6825      	ldr	r5, [r4, #0]
 8007f30:	6961      	ldr	r1, [r4, #20]
 8007f32:	1d18      	adds	r0, r3, #4
 8007f34:	6030      	str	r0, [r6, #0]
 8007f36:	062e      	lsls	r6, r5, #24
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	d501      	bpl.n	8007f40 <_printf_i+0x1c0>
 8007f3c:	6019      	str	r1, [r3, #0]
 8007f3e:	e002      	b.n	8007f46 <_printf_i+0x1c6>
 8007f40:	0668      	lsls	r0, r5, #25
 8007f42:	d5fb      	bpl.n	8007f3c <_printf_i+0x1bc>
 8007f44:	8019      	strh	r1, [r3, #0]
 8007f46:	2300      	movs	r3, #0
 8007f48:	6123      	str	r3, [r4, #16]
 8007f4a:	4616      	mov	r6, r2
 8007f4c:	e7bc      	b.n	8007ec8 <_printf_i+0x148>
 8007f4e:	6833      	ldr	r3, [r6, #0]
 8007f50:	1d1a      	adds	r2, r3, #4
 8007f52:	6032      	str	r2, [r6, #0]
 8007f54:	681e      	ldr	r6, [r3, #0]
 8007f56:	6862      	ldr	r2, [r4, #4]
 8007f58:	2100      	movs	r1, #0
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	f7f8 f9c8 	bl	80002f0 <memchr>
 8007f60:	b108      	cbz	r0, 8007f66 <_printf_i+0x1e6>
 8007f62:	1b80      	subs	r0, r0, r6
 8007f64:	6060      	str	r0, [r4, #4]
 8007f66:	6863      	ldr	r3, [r4, #4]
 8007f68:	6123      	str	r3, [r4, #16]
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f70:	e7aa      	b.n	8007ec8 <_printf_i+0x148>
 8007f72:	6923      	ldr	r3, [r4, #16]
 8007f74:	4632      	mov	r2, r6
 8007f76:	4649      	mov	r1, r9
 8007f78:	4640      	mov	r0, r8
 8007f7a:	47d0      	blx	sl
 8007f7c:	3001      	adds	r0, #1
 8007f7e:	d0ad      	beq.n	8007edc <_printf_i+0x15c>
 8007f80:	6823      	ldr	r3, [r4, #0]
 8007f82:	079b      	lsls	r3, r3, #30
 8007f84:	d413      	bmi.n	8007fae <_printf_i+0x22e>
 8007f86:	68e0      	ldr	r0, [r4, #12]
 8007f88:	9b03      	ldr	r3, [sp, #12]
 8007f8a:	4298      	cmp	r0, r3
 8007f8c:	bfb8      	it	lt
 8007f8e:	4618      	movlt	r0, r3
 8007f90:	e7a6      	b.n	8007ee0 <_printf_i+0x160>
 8007f92:	2301      	movs	r3, #1
 8007f94:	4632      	mov	r2, r6
 8007f96:	4649      	mov	r1, r9
 8007f98:	4640      	mov	r0, r8
 8007f9a:	47d0      	blx	sl
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	d09d      	beq.n	8007edc <_printf_i+0x15c>
 8007fa0:	3501      	adds	r5, #1
 8007fa2:	68e3      	ldr	r3, [r4, #12]
 8007fa4:	9903      	ldr	r1, [sp, #12]
 8007fa6:	1a5b      	subs	r3, r3, r1
 8007fa8:	42ab      	cmp	r3, r5
 8007faa:	dcf2      	bgt.n	8007f92 <_printf_i+0x212>
 8007fac:	e7eb      	b.n	8007f86 <_printf_i+0x206>
 8007fae:	2500      	movs	r5, #0
 8007fb0:	f104 0619 	add.w	r6, r4, #25
 8007fb4:	e7f5      	b.n	8007fa2 <_printf_i+0x222>
 8007fb6:	bf00      	nop
 8007fb8:	080082b7 	.word	0x080082b7
 8007fbc:	080082c8 	.word	0x080082c8

08007fc0 <__sflush_r>:
 8007fc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fc8:	0716      	lsls	r6, r2, #28
 8007fca:	4605      	mov	r5, r0
 8007fcc:	460c      	mov	r4, r1
 8007fce:	d454      	bmi.n	800807a <__sflush_r+0xba>
 8007fd0:	684b      	ldr	r3, [r1, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	dc02      	bgt.n	8007fdc <__sflush_r+0x1c>
 8007fd6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	dd48      	ble.n	800806e <__sflush_r+0xae>
 8007fdc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007fde:	2e00      	cmp	r6, #0
 8007fe0:	d045      	beq.n	800806e <__sflush_r+0xae>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007fe8:	682f      	ldr	r7, [r5, #0]
 8007fea:	6a21      	ldr	r1, [r4, #32]
 8007fec:	602b      	str	r3, [r5, #0]
 8007fee:	d030      	beq.n	8008052 <__sflush_r+0x92>
 8007ff0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ff2:	89a3      	ldrh	r3, [r4, #12]
 8007ff4:	0759      	lsls	r1, r3, #29
 8007ff6:	d505      	bpl.n	8008004 <__sflush_r+0x44>
 8007ff8:	6863      	ldr	r3, [r4, #4]
 8007ffa:	1ad2      	subs	r2, r2, r3
 8007ffc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007ffe:	b10b      	cbz	r3, 8008004 <__sflush_r+0x44>
 8008000:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008002:	1ad2      	subs	r2, r2, r3
 8008004:	2300      	movs	r3, #0
 8008006:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008008:	6a21      	ldr	r1, [r4, #32]
 800800a:	4628      	mov	r0, r5
 800800c:	47b0      	blx	r6
 800800e:	1c43      	adds	r3, r0, #1
 8008010:	89a3      	ldrh	r3, [r4, #12]
 8008012:	d106      	bne.n	8008022 <__sflush_r+0x62>
 8008014:	6829      	ldr	r1, [r5, #0]
 8008016:	291d      	cmp	r1, #29
 8008018:	d82b      	bhi.n	8008072 <__sflush_r+0xb2>
 800801a:	4a2a      	ldr	r2, [pc, #168]	@ (80080c4 <__sflush_r+0x104>)
 800801c:	410a      	asrs	r2, r1
 800801e:	07d6      	lsls	r6, r2, #31
 8008020:	d427      	bmi.n	8008072 <__sflush_r+0xb2>
 8008022:	2200      	movs	r2, #0
 8008024:	6062      	str	r2, [r4, #4]
 8008026:	04d9      	lsls	r1, r3, #19
 8008028:	6922      	ldr	r2, [r4, #16]
 800802a:	6022      	str	r2, [r4, #0]
 800802c:	d504      	bpl.n	8008038 <__sflush_r+0x78>
 800802e:	1c42      	adds	r2, r0, #1
 8008030:	d101      	bne.n	8008036 <__sflush_r+0x76>
 8008032:	682b      	ldr	r3, [r5, #0]
 8008034:	b903      	cbnz	r3, 8008038 <__sflush_r+0x78>
 8008036:	6560      	str	r0, [r4, #84]	@ 0x54
 8008038:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800803a:	602f      	str	r7, [r5, #0]
 800803c:	b1b9      	cbz	r1, 800806e <__sflush_r+0xae>
 800803e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008042:	4299      	cmp	r1, r3
 8008044:	d002      	beq.n	800804c <__sflush_r+0x8c>
 8008046:	4628      	mov	r0, r5
 8008048:	f7ff fbf2 	bl	8007830 <_free_r>
 800804c:	2300      	movs	r3, #0
 800804e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008050:	e00d      	b.n	800806e <__sflush_r+0xae>
 8008052:	2301      	movs	r3, #1
 8008054:	4628      	mov	r0, r5
 8008056:	47b0      	blx	r6
 8008058:	4602      	mov	r2, r0
 800805a:	1c50      	adds	r0, r2, #1
 800805c:	d1c9      	bne.n	8007ff2 <__sflush_r+0x32>
 800805e:	682b      	ldr	r3, [r5, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d0c6      	beq.n	8007ff2 <__sflush_r+0x32>
 8008064:	2b1d      	cmp	r3, #29
 8008066:	d001      	beq.n	800806c <__sflush_r+0xac>
 8008068:	2b16      	cmp	r3, #22
 800806a:	d11e      	bne.n	80080aa <__sflush_r+0xea>
 800806c:	602f      	str	r7, [r5, #0]
 800806e:	2000      	movs	r0, #0
 8008070:	e022      	b.n	80080b8 <__sflush_r+0xf8>
 8008072:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008076:	b21b      	sxth	r3, r3
 8008078:	e01b      	b.n	80080b2 <__sflush_r+0xf2>
 800807a:	690f      	ldr	r7, [r1, #16]
 800807c:	2f00      	cmp	r7, #0
 800807e:	d0f6      	beq.n	800806e <__sflush_r+0xae>
 8008080:	0793      	lsls	r3, r2, #30
 8008082:	680e      	ldr	r6, [r1, #0]
 8008084:	bf08      	it	eq
 8008086:	694b      	ldreq	r3, [r1, #20]
 8008088:	600f      	str	r7, [r1, #0]
 800808a:	bf18      	it	ne
 800808c:	2300      	movne	r3, #0
 800808e:	eba6 0807 	sub.w	r8, r6, r7
 8008092:	608b      	str	r3, [r1, #8]
 8008094:	f1b8 0f00 	cmp.w	r8, #0
 8008098:	dde9      	ble.n	800806e <__sflush_r+0xae>
 800809a:	6a21      	ldr	r1, [r4, #32]
 800809c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800809e:	4643      	mov	r3, r8
 80080a0:	463a      	mov	r2, r7
 80080a2:	4628      	mov	r0, r5
 80080a4:	47b0      	blx	r6
 80080a6:	2800      	cmp	r0, #0
 80080a8:	dc08      	bgt.n	80080bc <__sflush_r+0xfc>
 80080aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080b2:	81a3      	strh	r3, [r4, #12]
 80080b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80080b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080bc:	4407      	add	r7, r0
 80080be:	eba8 0800 	sub.w	r8, r8, r0
 80080c2:	e7e7      	b.n	8008094 <__sflush_r+0xd4>
 80080c4:	dfbffffe 	.word	0xdfbffffe

080080c8 <_fflush_r>:
 80080c8:	b538      	push	{r3, r4, r5, lr}
 80080ca:	690b      	ldr	r3, [r1, #16]
 80080cc:	4605      	mov	r5, r0
 80080ce:	460c      	mov	r4, r1
 80080d0:	b913      	cbnz	r3, 80080d8 <_fflush_r+0x10>
 80080d2:	2500      	movs	r5, #0
 80080d4:	4628      	mov	r0, r5
 80080d6:	bd38      	pop	{r3, r4, r5, pc}
 80080d8:	b118      	cbz	r0, 80080e2 <_fflush_r+0x1a>
 80080da:	6a03      	ldr	r3, [r0, #32]
 80080dc:	b90b      	cbnz	r3, 80080e2 <_fflush_r+0x1a>
 80080de:	f7ff f9ad 	bl	800743c <__sinit>
 80080e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d0f3      	beq.n	80080d2 <_fflush_r+0xa>
 80080ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80080ec:	07d0      	lsls	r0, r2, #31
 80080ee:	d404      	bmi.n	80080fa <_fflush_r+0x32>
 80080f0:	0599      	lsls	r1, r3, #22
 80080f2:	d402      	bmi.n	80080fa <_fflush_r+0x32>
 80080f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080f6:	f7ff fb98 	bl	800782a <__retarget_lock_acquire_recursive>
 80080fa:	4628      	mov	r0, r5
 80080fc:	4621      	mov	r1, r4
 80080fe:	f7ff ff5f 	bl	8007fc0 <__sflush_r>
 8008102:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008104:	07da      	lsls	r2, r3, #31
 8008106:	4605      	mov	r5, r0
 8008108:	d4e4      	bmi.n	80080d4 <_fflush_r+0xc>
 800810a:	89a3      	ldrh	r3, [r4, #12]
 800810c:	059b      	lsls	r3, r3, #22
 800810e:	d4e1      	bmi.n	80080d4 <_fflush_r+0xc>
 8008110:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008112:	f7ff fb8b 	bl	800782c <__retarget_lock_release_recursive>
 8008116:	e7dd      	b.n	80080d4 <_fflush_r+0xc>

08008118 <__swhatbuf_r>:
 8008118:	b570      	push	{r4, r5, r6, lr}
 800811a:	460c      	mov	r4, r1
 800811c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008120:	2900      	cmp	r1, #0
 8008122:	b096      	sub	sp, #88	@ 0x58
 8008124:	4615      	mov	r5, r2
 8008126:	461e      	mov	r6, r3
 8008128:	da0d      	bge.n	8008146 <__swhatbuf_r+0x2e>
 800812a:	89a3      	ldrh	r3, [r4, #12]
 800812c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008130:	f04f 0100 	mov.w	r1, #0
 8008134:	bf14      	ite	ne
 8008136:	2340      	movne	r3, #64	@ 0x40
 8008138:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800813c:	2000      	movs	r0, #0
 800813e:	6031      	str	r1, [r6, #0]
 8008140:	602b      	str	r3, [r5, #0]
 8008142:	b016      	add	sp, #88	@ 0x58
 8008144:	bd70      	pop	{r4, r5, r6, pc}
 8008146:	466a      	mov	r2, sp
 8008148:	f000 f848 	bl	80081dc <_fstat_r>
 800814c:	2800      	cmp	r0, #0
 800814e:	dbec      	blt.n	800812a <__swhatbuf_r+0x12>
 8008150:	9901      	ldr	r1, [sp, #4]
 8008152:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008156:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800815a:	4259      	negs	r1, r3
 800815c:	4159      	adcs	r1, r3
 800815e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008162:	e7eb      	b.n	800813c <__swhatbuf_r+0x24>

08008164 <__smakebuf_r>:
 8008164:	898b      	ldrh	r3, [r1, #12]
 8008166:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008168:	079d      	lsls	r5, r3, #30
 800816a:	4606      	mov	r6, r0
 800816c:	460c      	mov	r4, r1
 800816e:	d507      	bpl.n	8008180 <__smakebuf_r+0x1c>
 8008170:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008174:	6023      	str	r3, [r4, #0]
 8008176:	6123      	str	r3, [r4, #16]
 8008178:	2301      	movs	r3, #1
 800817a:	6163      	str	r3, [r4, #20]
 800817c:	b003      	add	sp, #12
 800817e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008180:	ab01      	add	r3, sp, #4
 8008182:	466a      	mov	r2, sp
 8008184:	f7ff ffc8 	bl	8008118 <__swhatbuf_r>
 8008188:	9f00      	ldr	r7, [sp, #0]
 800818a:	4605      	mov	r5, r0
 800818c:	4639      	mov	r1, r7
 800818e:	4630      	mov	r0, r6
 8008190:	f7ff fbba 	bl	8007908 <_malloc_r>
 8008194:	b948      	cbnz	r0, 80081aa <__smakebuf_r+0x46>
 8008196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800819a:	059a      	lsls	r2, r3, #22
 800819c:	d4ee      	bmi.n	800817c <__smakebuf_r+0x18>
 800819e:	f023 0303 	bic.w	r3, r3, #3
 80081a2:	f043 0302 	orr.w	r3, r3, #2
 80081a6:	81a3      	strh	r3, [r4, #12]
 80081a8:	e7e2      	b.n	8008170 <__smakebuf_r+0xc>
 80081aa:	89a3      	ldrh	r3, [r4, #12]
 80081ac:	6020      	str	r0, [r4, #0]
 80081ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081b2:	81a3      	strh	r3, [r4, #12]
 80081b4:	9b01      	ldr	r3, [sp, #4]
 80081b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80081ba:	b15b      	cbz	r3, 80081d4 <__smakebuf_r+0x70>
 80081bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081c0:	4630      	mov	r0, r6
 80081c2:	f000 f81d 	bl	8008200 <_isatty_r>
 80081c6:	b128      	cbz	r0, 80081d4 <__smakebuf_r+0x70>
 80081c8:	89a3      	ldrh	r3, [r4, #12]
 80081ca:	f023 0303 	bic.w	r3, r3, #3
 80081ce:	f043 0301 	orr.w	r3, r3, #1
 80081d2:	81a3      	strh	r3, [r4, #12]
 80081d4:	89a3      	ldrh	r3, [r4, #12]
 80081d6:	431d      	orrs	r5, r3
 80081d8:	81a5      	strh	r5, [r4, #12]
 80081da:	e7cf      	b.n	800817c <__smakebuf_r+0x18>

080081dc <_fstat_r>:
 80081dc:	b538      	push	{r3, r4, r5, lr}
 80081de:	4d07      	ldr	r5, [pc, #28]	@ (80081fc <_fstat_r+0x20>)
 80081e0:	2300      	movs	r3, #0
 80081e2:	4604      	mov	r4, r0
 80081e4:	4608      	mov	r0, r1
 80081e6:	4611      	mov	r1, r2
 80081e8:	602b      	str	r3, [r5, #0]
 80081ea:	f7fe ff1a 	bl	8007022 <_fstat>
 80081ee:	1c43      	adds	r3, r0, #1
 80081f0:	d102      	bne.n	80081f8 <_fstat_r+0x1c>
 80081f2:	682b      	ldr	r3, [r5, #0]
 80081f4:	b103      	cbz	r3, 80081f8 <_fstat_r+0x1c>
 80081f6:	6023      	str	r3, [r4, #0]
 80081f8:	bd38      	pop	{r3, r4, r5, pc}
 80081fa:	bf00      	nop
 80081fc:	24000340 	.word	0x24000340

08008200 <_isatty_r>:
 8008200:	b538      	push	{r3, r4, r5, lr}
 8008202:	4d06      	ldr	r5, [pc, #24]	@ (800821c <_isatty_r+0x1c>)
 8008204:	2300      	movs	r3, #0
 8008206:	4604      	mov	r4, r0
 8008208:	4608      	mov	r0, r1
 800820a:	602b      	str	r3, [r5, #0]
 800820c:	f7ff f86c 	bl	80072e8 <_isatty>
 8008210:	1c43      	adds	r3, r0, #1
 8008212:	d102      	bne.n	800821a <_isatty_r+0x1a>
 8008214:	682b      	ldr	r3, [r5, #0]
 8008216:	b103      	cbz	r3, 800821a <_isatty_r+0x1a>
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	bd38      	pop	{r3, r4, r5, pc}
 800821c:	24000340 	.word	0x24000340

08008220 <_sbrk_r>:
 8008220:	b538      	push	{r3, r4, r5, lr}
 8008222:	4d06      	ldr	r5, [pc, #24]	@ (800823c <_sbrk_r+0x1c>)
 8008224:	2300      	movs	r3, #0
 8008226:	4604      	mov	r4, r0
 8008228:	4608      	mov	r0, r1
 800822a:	602b      	str	r3, [r5, #0]
 800822c:	f7f8 fc7e 	bl	8000b2c <_sbrk>
 8008230:	1c43      	adds	r3, r0, #1
 8008232:	d102      	bne.n	800823a <_sbrk_r+0x1a>
 8008234:	682b      	ldr	r3, [r5, #0]
 8008236:	b103      	cbz	r3, 800823a <_sbrk_r+0x1a>
 8008238:	6023      	str	r3, [r4, #0]
 800823a:	bd38      	pop	{r3, r4, r5, pc}
 800823c:	24000340 	.word	0x24000340

08008240 <_init>:
 8008240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008242:	bf00      	nop
 8008244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008246:	bc08      	pop	{r3}
 8008248:	469e      	mov	lr, r3
 800824a:	4770      	bx	lr

0800824c <_fini>:
 800824c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824e:	bf00      	nop
 8008250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008252:	bc08      	pop	{r3}
 8008254:	469e      	mov	lr, r3
 8008256:	4770      	bx	lr
