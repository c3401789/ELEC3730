
ELEC3730_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7fc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800aa9c  0800aa9c  0000ba9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab24  0800ab24  0000c074  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab24  0800ab24  0000bb24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab2c  0800ab2c  0000c074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab2c  0800ab2c  0000bb2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ab30  0800ab30  0000bb30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  24000000  0800ab34  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  24000074  0800aba8  0000c074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000410  0800aba8  0000c410  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b77  00000000  00000000  0000c0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002622  00000000  00000000  00020c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  00023240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e21  00000000  00000000  00024488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00041331  00000000  00000000  000252a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016156  00000000  00000000  000665da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001afed0  00000000  00000000  0007c730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0022c600  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005970  00000000  00000000  0022c644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00231fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800aa84 	.word	0x0800aa84

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	0800aa84 	.word	0x0800aa84

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000394:	4b3d      	ldr	r3, [pc, #244]	@ (800048c <SystemInit+0xfc>)
 8000396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800039a:	4a3c      	ldr	r2, [pc, #240]	@ (800048c <SystemInit+0xfc>)
 800039c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80003a4:	4b39      	ldr	r3, [pc, #228]	@ (800048c <SystemInit+0xfc>)
 80003a6:	691b      	ldr	r3, [r3, #16]
 80003a8:	4a38      	ldr	r2, [pc, #224]	@ (800048c <SystemInit+0xfc>)
 80003aa:	f043 0310 	orr.w	r3, r3, #16
 80003ae:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003b0:	4b37      	ldr	r3, [pc, #220]	@ (8000490 <SystemInit+0x100>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f003 030f 	and.w	r3, r3, #15
 80003b8:	2b06      	cmp	r3, #6
 80003ba:	d807      	bhi.n	80003cc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003bc:	4b34      	ldr	r3, [pc, #208]	@ (8000490 <SystemInit+0x100>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f023 030f 	bic.w	r3, r3, #15
 80003c4:	4a32      	ldr	r2, [pc, #200]	@ (8000490 <SystemInit+0x100>)
 80003c6:	f043 0307 	orr.w	r3, r3, #7
 80003ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003cc:	4b31      	ldr	r3, [pc, #196]	@ (8000494 <SystemInit+0x104>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a30      	ldr	r2, [pc, #192]	@ (8000494 <SystemInit+0x104>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003d8:	4b2e      	ldr	r3, [pc, #184]	@ (8000494 <SystemInit+0x104>)
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003de:	4b2d      	ldr	r3, [pc, #180]	@ (8000494 <SystemInit+0x104>)
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	492c      	ldr	r1, [pc, #176]	@ (8000494 <SystemInit+0x104>)
 80003e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000498 <SystemInit+0x108>)
 80003e6:	4013      	ands	r3, r2
 80003e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003ea:	4b29      	ldr	r3, [pc, #164]	@ (8000490 <SystemInit+0x100>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f003 0308 	and.w	r3, r3, #8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d007      	beq.n	8000406 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003f6:	4b26      	ldr	r3, [pc, #152]	@ (8000490 <SystemInit+0x100>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f023 030f 	bic.w	r3, r3, #15
 80003fe:	4a24      	ldr	r2, [pc, #144]	@ (8000490 <SystemInit+0x100>)
 8000400:	f043 0307 	orr.w	r3, r3, #7
 8000404:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000406:	4b23      	ldr	r3, [pc, #140]	@ (8000494 <SystemInit+0x104>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800040c:	4b21      	ldr	r3, [pc, #132]	@ (8000494 <SystemInit+0x104>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000412:	4b20      	ldr	r3, [pc, #128]	@ (8000494 <SystemInit+0x104>)
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000418:	4b1e      	ldr	r3, [pc, #120]	@ (8000494 <SystemInit+0x104>)
 800041a:	4a20      	ldr	r2, [pc, #128]	@ (800049c <SystemInit+0x10c>)
 800041c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800041e:	4b1d      	ldr	r3, [pc, #116]	@ (8000494 <SystemInit+0x104>)
 8000420:	4a1f      	ldr	r2, [pc, #124]	@ (80004a0 <SystemInit+0x110>)
 8000422:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000424:	4b1b      	ldr	r3, [pc, #108]	@ (8000494 <SystemInit+0x104>)
 8000426:	4a1f      	ldr	r2, [pc, #124]	@ (80004a4 <SystemInit+0x114>)
 8000428:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800042a:	4b1a      	ldr	r3, [pc, #104]	@ (8000494 <SystemInit+0x104>)
 800042c:	2200      	movs	r2, #0
 800042e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000430:	4b18      	ldr	r3, [pc, #96]	@ (8000494 <SystemInit+0x104>)
 8000432:	4a1c      	ldr	r2, [pc, #112]	@ (80004a4 <SystemInit+0x114>)
 8000434:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000436:	4b17      	ldr	r3, [pc, #92]	@ (8000494 <SystemInit+0x104>)
 8000438:	2200      	movs	r2, #0
 800043a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800043c:	4b15      	ldr	r3, [pc, #84]	@ (8000494 <SystemInit+0x104>)
 800043e:	4a19      	ldr	r2, [pc, #100]	@ (80004a4 <SystemInit+0x114>)
 8000440:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000442:	4b14      	ldr	r3, [pc, #80]	@ (8000494 <SystemInit+0x104>)
 8000444:	2200      	movs	r2, #0
 8000446:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000448:	4b12      	ldr	r3, [pc, #72]	@ (8000494 <SystemInit+0x104>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a11      	ldr	r2, [pc, #68]	@ (8000494 <SystemInit+0x104>)
 800044e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000452:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000454:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <SystemInit+0x104>)
 8000456:	2200      	movs	r2, #0
 8000458:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800045a:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <SystemInit+0x118>)
 800045c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800045e:	4a12      	ldr	r2, [pc, #72]	@ (80004a8 <SystemInit+0x118>)
 8000460:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000464:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000466:	4b11      	ldr	r3, [pc, #68]	@ (80004ac <SystemInit+0x11c>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	4b11      	ldr	r3, [pc, #68]	@ (80004b0 <SystemInit+0x120>)
 800046c:	4013      	ands	r3, r2
 800046e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000472:	d202      	bcs.n	800047a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000474:	4b0f      	ldr	r3, [pc, #60]	@ (80004b4 <SystemInit+0x124>)
 8000476:	2201      	movs	r2, #1
 8000478:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800047a:	4b0f      	ldr	r3, [pc, #60]	@ (80004b8 <SystemInit+0x128>)
 800047c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000480:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	e000ed00 	.word	0xe000ed00
 8000490:	52002000 	.word	0x52002000
 8000494:	58024400 	.word	0x58024400
 8000498:	eaf6ed7f 	.word	0xeaf6ed7f
 800049c:	02020200 	.word	0x02020200
 80004a0:	01ff0000 	.word	0x01ff0000
 80004a4:	01010280 	.word	0x01010280
 80004a8:	580000c0 	.word	0x580000c0
 80004ac:	5c001000 	.word	0x5c001000
 80004b0:	ffff0000 	.word	0xffff0000
 80004b4:	51008108 	.word	0x51008108
 80004b8:	52004000 	.word	0x52004000

080004bc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 80004c0:	4b09      	ldr	r3, [pc, #36]	@ (80004e8 <ExitRun0Mode+0x2c>)
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	4a08      	ldr	r2, [pc, #32]	@ (80004e8 <ExitRun0Mode+0x2c>)
 80004c6:	f023 0302 	bic.w	r3, r3, #2
 80004ca:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80004cc:	bf00      	nop
 80004ce:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <ExitRun0Mode+0x2c>)
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d0f9      	beq.n	80004ce <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80004da:	bf00      	nop
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	58024800 	.word	0x58024800

080004ec <HAL_ADC_ConvCpltCallback>:
uint16_t count = 0;
uint32_t value;
uint16_t loop = 0;
uint16_t adcFlag = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	++loop;
 80004f4:	4b07      	ldr	r3, [pc, #28]	@ (8000514 <HAL_ADC_ConvCpltCallback+0x28>)
 80004f6:	881b      	ldrh	r3, [r3, #0]
 80004f8:	3301      	adds	r3, #1
 80004fa:	b29a      	uxth	r2, r3
 80004fc:	4b05      	ldr	r3, [pc, #20]	@ (8000514 <HAL_ADC_ConvCpltCallback+0x28>)
 80004fe:	801a      	strh	r2, [r3, #0]
	adcFlag = 1;
 8000500:	4b05      	ldr	r3, [pc, #20]	@ (8000518 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000502:	2201      	movs	r2, #1
 8000504:	801a      	strh	r2, [r3, #0]
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	2400020c 	.word	0x2400020c
 8000518:	2400020e 	.word	0x2400020e

0800051c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B2_Pin){
 8000526:	88fb      	ldrh	r3, [r7, #6]
 8000528:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800052c:	d104      	bne.n	8000538 <HAL_GPIO_EXTI_Callback+0x1c>
		HAL_GPIO_TogglePin(LEDBlue_GPIO_Port, LEDBlue_Pin);
 800052e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000532:	4803      	ldr	r0, [pc, #12]	@ (8000540 <HAL_GPIO_EXTI_Callback+0x24>)
 8000534:	f004 fdf1 	bl	800511a <HAL_GPIO_TogglePin>
	}

}
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	58022000 	.word	0x58022000

08000544 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000554:	d102      	bne.n	800055c <HAL_TIM_PeriodElapsedCallback+0x18>
		flagA = 1;
 8000556:	4b04      	ldr	r3, [pc, #16]	@ (8000568 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000558:	2201      	movs	r2, #1
 800055a:	801a      	strh	r2, [r3, #0]
	}

}
 800055c:	bf00      	nop
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	24000204 	.word	0x24000204

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
		initialise_monitor_handles();
 8000570:	f009 fada 	bl	8009b28 <initialise_monitor_handles>
/* USER CODE BEGIN Boot_Mode_Sequence_1 */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fc38 	bl	8000de8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f84c 	bl	8000614 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 fa00 	bl	8000980 <MX_GPIO_Init>
  MX_DMA_Init();
 8000580:	f000 f9de 	bl	8000940 <MX_DMA_Init>
  MX_TIM2_Init();
 8000584:	f000 f93e 	bl	8000804 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000588:	f000 f8be 	bl	8000708 <MX_ADC1_Init>
  MX_TIM3_Init();
 800058c:	f000 f988 	bl	80008a0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000590:	4816      	ldr	r0, [pc, #88]	@ (80005ec <main+0x80>)
 8000592:	f008 fc27 	bl	8008de4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim3);
 8000596:	4816      	ldr	r0, [pc, #88]	@ (80005f0 <main+0x84>)
 8000598:	f008 fbb4 	bl	8008d04 <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, &value, 1);
 800059c:	2201      	movs	r2, #1
 800059e:	4915      	ldr	r1, [pc, #84]	@ (80005f4 <main+0x88>)
 80005a0:	4815      	ldr	r0, [pc, #84]	@ (80005f8 <main+0x8c>)
 80005a2:	f001 f89d 	bl	80016e0 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if (adcFlag == 1) {
 80005a6:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <main+0x90>)
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d10a      	bne.n	80005c4 <main+0x58>
			adcFlag = 0;
 80005ae:	4b13      	ldr	r3, [pc, #76]	@ (80005fc <main+0x90>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	801a      	strh	r2, [r3, #0]
			printf ("DMA IT: Got %4lu at Loop = %u\n", value, loop);
 80005b4:	4b0f      	ldr	r3, [pc, #60]	@ (80005f4 <main+0x88>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a11      	ldr	r2, [pc, #68]	@ (8000600 <main+0x94>)
 80005ba:	8812      	ldrh	r2, [r2, #0]
 80005bc:	4619      	mov	r1, r3
 80005be:	4811      	ldr	r0, [pc, #68]	@ (8000604 <main+0x98>)
 80005c0:	f009 fbf2 	bl	8009da8 <iprintf>
		}

		if(flagA){
 80005c4:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <main+0x9c>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d0ec      	beq.n	80005a6 <main+0x3a>
			// Toggle LEDOrange when interrupt triggered by TIM2
			HAL_GPIO_TogglePin(LEDOrange_GPIO_Port, LEDOrange_Pin);
 80005cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005d0:	480e      	ldr	r0, [pc, #56]	@ (800060c <main+0xa0>)
 80005d2:	f004 fda2 	bl	800511a <HAL_GPIO_TogglePin>
			flagA = 0;
 80005d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <main+0x9c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	801a      	strh	r2, [r3, #0]
			count++;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <main+0xa4>)
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <main+0xa4>)
 80005e6:	801a      	strh	r2, [r3, #0]
		if (adcFlag == 1) {
 80005e8:	e7dd      	b.n	80005a6 <main+0x3a>
 80005ea:	bf00      	nop
 80005ec:	2400016c 	.word	0x2400016c
 80005f0:	240001b8 	.word	0x240001b8
 80005f4:	24000208 	.word	0x24000208
 80005f8:	24000090 	.word	0x24000090
 80005fc:	2400020e 	.word	0x2400020e
 8000600:	2400020c 	.word	0x2400020c
 8000604:	0800aa9c 	.word	0x0800aa9c
 8000608:	24000204 	.word	0x24000204
 800060c:	58022000 	.word	0x58022000
 8000610:	24000206 	.word	0x24000206

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b09c      	sub	sp, #112	@ 0x70
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800061e:	224c      	movs	r2, #76	@ 0x4c
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f009 fc15 	bl	8009e52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2220      	movs	r2, #32
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f009 fc0f 	bl	8009e52 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000634:	2004      	movs	r0, #4
 8000636:	f004 fda5 	bl	8005184 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063a:	2300      	movs	r3, #0
 800063c:	603b      	str	r3, [r7, #0]
 800063e:	4b30      	ldr	r3, [pc, #192]	@ (8000700 <SystemClock_Config+0xec>)
 8000640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000642:	4a2f      	ldr	r2, [pc, #188]	@ (8000700 <SystemClock_Config+0xec>)
 8000644:	f023 0301 	bic.w	r3, r3, #1
 8000648:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800064a:	4b2d      	ldr	r3, [pc, #180]	@ (8000700 <SystemClock_Config+0xec>)
 800064c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	4b2b      	ldr	r3, [pc, #172]	@ (8000704 <SystemClock_Config+0xf0>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a2a      	ldr	r2, [pc, #168]	@ (8000704 <SystemClock_Config+0xf0>)
 800065a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b28      	ldr	r3, [pc, #160]	@ (8000704 <SystemClock_Config+0xf0>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800066c:	bf00      	nop
 800066e:	4b25      	ldr	r3, [pc, #148]	@ (8000704 <SystemClock_Config+0xf0>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000676:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800067a:	d1f8      	bne.n	800066e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067c:	2301      	movs	r3, #1
 800067e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000680:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000684:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068a:	2302      	movs	r3, #2
 800068c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800068e:	2305      	movs	r3, #5
 8000690:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000692:	23a0      	movs	r3, #160	@ 0xa0
 8000694:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000696:	2302      	movs	r3, #2
 8000698:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800069a:	2305      	movs	r3, #5
 800069c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800069e:	2302      	movs	r3, #2
 80006a0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80006a2:	2308      	movs	r3, #8
 80006a4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006b2:	4618      	mov	r0, r3
 80006b4:	f004 fdc0 	bl	8005238 <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006be:	f000 f9bd 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	233f      	movs	r3, #63	@ 0x3f
 80006c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2303      	movs	r3, #3
 80006c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006ce:	2308      	movs	r3, #8
 80006d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006d2:	2340      	movs	r3, #64	@ 0x40
 80006d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006d6:	2340      	movs	r3, #64	@ 0x40
 80006d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006de:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006e0:	2340      	movs	r3, #64	@ 0x40
 80006e2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2102      	movs	r1, #2
 80006e8:	4618      	mov	r0, r3
 80006ea:	f005 f9ff 	bl	8005aec <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80006f4:	f000 f9a2 	bl	8000a3c <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3770      	adds	r7, #112	@ 0x70
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	58000400 	.word	0x58000400
 8000704:	58024800 	.word	0x58024800

08000708 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	@ 0x28
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800071a:	463b      	mov	r3, r7
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
 8000728:	615a      	str	r2, [r3, #20]
 800072a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800072c:	4b32      	ldr	r3, [pc, #200]	@ (80007f8 <MX_ADC1_Init+0xf0>)
 800072e:	4a33      	ldr	r2, [pc, #204]	@ (80007fc <MX_ADC1_Init+0xf4>)
 8000730:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000732:	4b31      	ldr	r3, [pc, #196]	@ (80007f8 <MX_ADC1_Init+0xf0>)
 8000734:	2200      	movs	r2, #0
 8000736:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000738:	4b2f      	ldr	r3, [pc, #188]	@ (80007f8 <MX_ADC1_Init+0xf0>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800073e:	4b2e      	ldr	r3, [pc, #184]	@ (80007f8 <MX_ADC1_Init+0xf0>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000744:	4b2c      	ldr	r3, [pc, #176]	@ (80007f8 <MX_ADC1_Init+0xf0>)
 8000746:	2204      	movs	r2, #4
 8000748:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800074a:	4b2b      	ldr	r3, [pc, #172]	@ (80007f8 <MX_ADC1_Init+0xf0>)
 800074c:	2200      	movs	r2, #0
 800074e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000750:	4b29      	ldr	r3, [pc, #164]	@ (80007f8 <MX_ADC1_Init+0xf0>)
 8000752:	2200      	movs	r2, #0
 8000754:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000756:	4b28      	ldr	r3, [pc, #160]	@ (80007f8 <MX_ADC1_Init+0xf0>)
 8000758:	2201      	movs	r2, #1
 800075a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800075c:	4b26      	ldr	r3, [pc, #152]	@ (80007f8 <MX_ADC1_Init+0xf0>)
 800075e:	2200      	movs	r2, #0
 8000760:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000762:	4b25      	ldr	r3, [pc, #148]	@ (80007f8 <MX_ADC1_Init+0xf0>)
 8000764:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8000768:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800076a:	4b23      	ldr	r3, [pc, #140]	@ (80007f8 <MX_ADC1_Init+0xf0>)
 800076c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000770:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000772:	4b21      	ldr	r3, [pc, #132]	@ (80007f8 <MX_ADC1_Init+0xf0>)
 8000774:	2203      	movs	r2, #3
 8000776:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000778:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <MX_ADC1_Init+0xf0>)
 800077a:	2200      	movs	r2, #0
 800077c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800077e:	4b1e      	ldr	r3, [pc, #120]	@ (80007f8 <MX_ADC1_Init+0xf0>)
 8000780:	2200      	movs	r2, #0
 8000782:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000784:	4b1c      	ldr	r3, [pc, #112]	@ (80007f8 <MX_ADC1_Init+0xf0>)
 8000786:	2200      	movs	r2, #0
 8000788:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 800078c:	4b1a      	ldr	r3, [pc, #104]	@ (80007f8 <MX_ADC1_Init+0xf0>)
 800078e:	2201      	movs	r2, #1
 8000790:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000792:	4819      	ldr	r0, [pc, #100]	@ (80007f8 <MX_ADC1_Init+0xf0>)
 8000794:	f000 fe02 	bl	800139c <HAL_ADC_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800079e:	f000 f94d 	bl	8000a3c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	4619      	mov	r1, r3
 80007ac:	4812      	ldr	r0, [pc, #72]	@ (80007f8 <MX_ADC1_Init+0xf0>)
 80007ae:	f002 f825 	bl	80027fc <HAL_ADCEx_MultiModeConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80007b8:	f000 f940 	bl	8000a3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80007bc:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <MX_ADC1_Init+0xf8>)
 80007be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007c0:	2306      	movs	r3, #6
 80007c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007c8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80007cc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007ce:	2304      	movs	r3, #4
 80007d0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007da:	463b      	mov	r3, r7
 80007dc:	4619      	mov	r1, r3
 80007de:	4806      	ldr	r0, [pc, #24]	@ (80007f8 <MX_ADC1_Init+0xf0>)
 80007e0:	f001 fa9a 	bl	8001d18 <HAL_ADC_ConfigChannel>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80007ea:	f000 f927 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	3728      	adds	r7, #40	@ 0x28
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	24000090 	.word	0x24000090
 80007fc:	40022000 	.word	0x40022000
 8000800:	32601000 	.word	0x32601000

08000804 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080a:	f107 0310 	add.w	r3, r7, #16
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000822:	4b1e      	ldr	r3, [pc, #120]	@ (800089c <MX_TIM2_Init+0x98>)
 8000824:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000828:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 800082a:	4b1c      	ldr	r3, [pc, #112]	@ (800089c <MX_TIM2_Init+0x98>)
 800082c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000830:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000832:	4b1a      	ldr	r3, [pc, #104]	@ (800089c <MX_TIM2_Init+0x98>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9001;
 8000838:	4b18      	ldr	r3, [pc, #96]	@ (800089c <MX_TIM2_Init+0x98>)
 800083a:	f242 3229 	movw	r2, #9001	@ 0x2329
 800083e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000840:	4b16      	ldr	r3, [pc, #88]	@ (800089c <MX_TIM2_Init+0x98>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000846:	4b15      	ldr	r3, [pc, #84]	@ (800089c <MX_TIM2_Init+0x98>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800084c:	4813      	ldr	r0, [pc, #76]	@ (800089c <MX_TIM2_Init+0x98>)
 800084e:	f008 fa01 	bl	8008c54 <HAL_TIM_Base_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000858:	f000 f8f0 	bl	8000a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800085c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000860:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000862:	f107 0310 	add.w	r3, r7, #16
 8000866:	4619      	mov	r1, r3
 8000868:	480c      	ldr	r0, [pc, #48]	@ (800089c <MX_TIM2_Init+0x98>)
 800086a:	f008 fc3b 	bl	80090e4 <HAL_TIM_ConfigClockSource>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000874:	f000 f8e2 	bl	8000a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	4619      	mov	r1, r3
 8000884:	4805      	ldr	r0, [pc, #20]	@ (800089c <MX_TIM2_Init+0x98>)
 8000886:	f008 fe8b 	bl	80095a0 <HAL_TIMEx_MasterConfigSynchronization>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000890:	f000 f8d4 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	3720      	adds	r7, #32
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	2400016c 	.word	0x2400016c

080008a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008a6:	f107 0310 	add.w	r3, r7, #16
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008be:	4b1e      	ldr	r3, [pc, #120]	@ (8000938 <MX_TIM3_Init+0x98>)
 80008c0:	4a1e      	ldr	r2, [pc, #120]	@ (800093c <MX_TIM3_Init+0x9c>)
 80008c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20000;
 80008c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <MX_TIM3_Init+0x98>)
 80008c6:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80008ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <MX_TIM3_Init+0x98>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80008d2:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <MX_TIM3_Init+0x98>)
 80008d4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80008d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008da:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <MX_TIM3_Init+0x98>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e0:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <MX_TIM3_Init+0x98>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008e6:	4814      	ldr	r0, [pc, #80]	@ (8000938 <MX_TIM3_Init+0x98>)
 80008e8:	f008 f9b4 	bl	8008c54 <HAL_TIM_Base_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80008f2:	f000 f8a3 	bl	8000a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008fc:	f107 0310 	add.w	r3, r7, #16
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	@ (8000938 <MX_TIM3_Init+0x98>)
 8000904:	f008 fbee 	bl	80090e4 <HAL_TIM_ConfigClockSource>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800090e:	f000 f895 	bl	8000a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000912:	2320      	movs	r3, #32
 8000914:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	@ (8000938 <MX_TIM3_Init+0x98>)
 8000920:	f008 fe3e 	bl	80095a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800092a:	f000 f887 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240001b8 	.word	0x240001b8
 800093c:	40000400 	.word	0x40000400

08000940 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000946:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <MX_DMA_Init+0x3c>)
 8000948:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800094c:	4a0b      	ldr	r2, [pc, #44]	@ (800097c <MX_DMA_Init+0x3c>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000956:	4b09      	ldr	r3, [pc, #36]	@ (800097c <MX_DMA_Init+0x3c>)
 8000958:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	2100      	movs	r1, #0
 8000968:	200b      	movs	r0, #11
 800096a:	f002 f900 	bl	8002b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800096e:	200b      	movs	r0, #11
 8000970:	f002 f917 	bl	8002ba2 <HAL_NVIC_EnableIRQ>

}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	58024400 	.word	0x58024400

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 030c 	add.w	r3, r7, #12
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	4b26      	ldr	r3, [pc, #152]	@ (8000a30 <MX_GPIO_Init+0xb0>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800099c:	4a24      	ldr	r2, [pc, #144]	@ (8000a30 <MX_GPIO_Init+0xb0>)
 800099e:	f043 0304 	orr.w	r3, r3, #4
 80009a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009a6:	4b22      	ldr	r3, [pc, #136]	@ (8000a30 <MX_GPIO_Init+0xb0>)
 80009a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ac:	f003 0304 	and.w	r3, r3, #4
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80009b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a30 <MX_GPIO_Init+0xb0>)
 80009b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ba:	4a1d      	ldr	r2, [pc, #116]	@ (8000a30 <MX_GPIO_Init+0xb0>)
 80009bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a30 <MX_GPIO_Init+0xb0>)
 80009c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LEDGreen_Pin|LEDOrange_Pin|LEDRed_Pin|LEDBlue_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80009d8:	4816      	ldr	r0, [pc, #88]	@ (8000a34 <MX_GPIO_Init+0xb4>)
 80009da:	f004 fb85 	bl	80050e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 80009de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009ea:	2302      	movs	r3, #2
 80009ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	4619      	mov	r1, r3
 80009f4:	4810      	ldr	r0, [pc, #64]	@ (8000a38 <MX_GPIO_Init+0xb8>)
 80009f6:	f004 f9c7 	bl	8004d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDGreen_Pin LEDOrange_Pin LEDRed_Pin LEDBlue_Pin */
  GPIO_InitStruct.Pin = LEDGreen_Pin|LEDOrange_Pin|LEDRed_Pin|LEDBlue_Pin;
 80009fa:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80009fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	4619      	mov	r1, r3
 8000a12:	4808      	ldr	r0, [pc, #32]	@ (8000a34 <MX_GPIO_Init+0xb4>)
 8000a14:	f004 f9b8 	bl	8004d88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(B2_EXTI_IRQn, 0, 0);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	2028      	movs	r0, #40	@ 0x28
 8000a1e:	f002 f8a6 	bl	8002b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(B2_EXTI_IRQn);
 8000a22:	2028      	movs	r0, #40	@ 0x28
 8000a24:	f002 f8bd 	bl	8002ba2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a28:	bf00      	nop
 8000a2a:	3720      	adds	r7, #32
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	58024400 	.word	0x58024400
 8000a34:	58022000 	.word	0x58022000
 8000a38:	58020800 	.word	0x58020800

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <Error_Handler+0x8>

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <HAL_MspInit+0x30>)
 8000a50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a54:	4a08      	ldr	r2, [pc, #32]	@ (8000a78 <HAL_MspInit+0x30>)
 8000a56:	f043 0302 	orr.w	r3, r3, #2
 8000a5a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a5e:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <HAL_MspInit+0x30>)
 8000a60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a64:	f003 0302 	and.w	r3, r3, #2
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	58024400 	.word	0x58024400

08000a7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b0bc      	sub	sp, #240	@ 0xf0
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a94:	f107 0310 	add.w	r3, r7, #16
 8000a98:	22c8      	movs	r2, #200	@ 0xc8
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f009 f9d8 	bl	8009e52 <memset>
  if(hadc->Instance==ADC1)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a47      	ldr	r2, [pc, #284]	@ (8000bc4 <HAL_ADC_MspInit+0x148>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	f040 8087 	bne.w	8000bbc <HAL_ADC_MspInit+0x140>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000aae:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000ab2:	f04f 0300 	mov.w	r3, #0
 8000ab6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000abe:	230c      	movs	r3, #12
 8000ac0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000aca:	2302      	movs	r3, #2
 8000acc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000ace:	23c0      	movs	r3, #192	@ 0xc0
 8000ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000ad2:	2320      	movs	r3, #32
 8000ad4:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000ada:	2300      	movs	r3, #0
 8000adc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f005 fb77 	bl	80061d8 <HAL_RCCEx_PeriphCLKConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000af0:	f7ff ffa4 	bl	8000a3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000af4:	4b34      	ldr	r3, [pc, #208]	@ (8000bc8 <HAL_ADC_MspInit+0x14c>)
 8000af6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000afa:	4a33      	ldr	r2, [pc, #204]	@ (8000bc8 <HAL_ADC_MspInit+0x14c>)
 8000afc:	f043 0320 	orr.w	r3, r3, #32
 8000b00:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b04:	4b30      	ldr	r3, [pc, #192]	@ (8000bc8 <HAL_ADC_MspInit+0x14c>)
 8000b06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b0a:	f003 0320 	and.w	r3, r3, #32
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc8 <HAL_ADC_MspInit+0x14c>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b18:	4a2b      	ldr	r2, [pc, #172]	@ (8000bc8 <HAL_ADC_MspInit+0x14c>)
 8000b1a:	f043 0304 	orr.w	r3, r3, #4
 8000b1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b22:	4b29      	ldr	r3, [pc, #164]	@ (8000bc8 <HAL_ADC_MspInit+0x14c>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b28:	f003 0304 	and.w	r3, r3, #4
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_INP12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b30:	2304      	movs	r3, #4
 8000b32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b36:	2303      	movs	r3, #3
 8000b38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b42:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b46:	4619      	mov	r1, r3
 8000b48:	4820      	ldr	r0, [pc, #128]	@ (8000bcc <HAL_ADC_MspInit+0x150>)
 8000b4a:	f004 f91d 	bl	8004d88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000b4e:	4b20      	ldr	r3, [pc, #128]	@ (8000bd0 <HAL_ADC_MspInit+0x154>)
 8000b50:	4a20      	ldr	r2, [pc, #128]	@ (8000bd4 <HAL_ADC_MspInit+0x158>)
 8000b52:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b54:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd0 <HAL_ADC_MspInit+0x154>)
 8000b56:	2209      	movs	r2, #9
 8000b58:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd0 <HAL_ADC_MspInit+0x154>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b60:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd0 <HAL_ADC_MspInit+0x154>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8000b66:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd0 <HAL_ADC_MspInit+0x154>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b6c:	4b18      	ldr	r3, [pc, #96]	@ (8000bd0 <HAL_ADC_MspInit+0x154>)
 8000b6e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b72:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b74:	4b16      	ldr	r3, [pc, #88]	@ (8000bd0 <HAL_ADC_MspInit+0x154>)
 8000b76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b7a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	@ (8000bd0 <HAL_ADC_MspInit+0x154>)
 8000b7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b82:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b84:	4b12      	ldr	r3, [pc, #72]	@ (8000bd0 <HAL_ADC_MspInit+0x154>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <HAL_ADC_MspInit+0x154>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b90:	480f      	ldr	r0, [pc, #60]	@ (8000bd0 <HAL_ADC_MspInit+0x154>)
 8000b92:	f002 f821 	bl	8002bd8 <HAL_DMA_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <HAL_ADC_MspInit+0x124>
    {
      Error_Handler();
 8000b9c:	f7ff ff4e 	bl	8000a3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	@ (8000bd0 <HAL_ADC_MspInit+0x154>)
 8000ba4:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd0 <HAL_ADC_MspInit+0x154>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2012      	movs	r0, #18
 8000bb2:	f001 ffdc 	bl	8002b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000bb6:	2012      	movs	r0, #18
 8000bb8:	f001 fff3 	bl	8002ba2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000bbc:	bf00      	nop
 8000bbe:	37f0      	adds	r7, #240	@ 0xf0
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40022000 	.word	0x40022000
 8000bc8:	58024400 	.word	0x58024400
 8000bcc:	58020800 	.word	0x58020800
 8000bd0:	240000f4 	.word	0x240000f4
 8000bd4:	40020010 	.word	0x40020010

08000bd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000be8:	d117      	bne.n	8000c1a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bea:	4b1c      	ldr	r3, [pc, #112]	@ (8000c5c <HAL_TIM_Base_MspInit+0x84>)
 8000bec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bf0:	4a1a      	ldr	r2, [pc, #104]	@ (8000c5c <HAL_TIM_Base_MspInit+0x84>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000bfa:	4b18      	ldr	r3, [pc, #96]	@ (8000c5c <HAL_TIM_Base_MspInit+0x84>)
 8000bfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	201c      	movs	r0, #28
 8000c0e:	f001 ffae 	bl	8002b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c12:	201c      	movs	r0, #28
 8000c14:	f001 ffc5 	bl	8002ba2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c18:	e01b      	b.n	8000c52 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM3)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a10      	ldr	r2, [pc, #64]	@ (8000c60 <HAL_TIM_Base_MspInit+0x88>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d116      	bne.n	8000c52 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c24:	4b0d      	ldr	r3, [pc, #52]	@ (8000c5c <HAL_TIM_Base_MspInit+0x84>)
 8000c26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8000c5c <HAL_TIM_Base_MspInit+0x84>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c34:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <HAL_TIM_Base_MspInit+0x84>)
 8000c36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	201d      	movs	r0, #29
 8000c48:	f001 ff91 	bl	8002b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c4c:	201d      	movs	r0, #29
 8000c4e:	f001 ffa8 	bl	8002ba2 <HAL_NVIC_EnableIRQ>
}
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	58024400 	.word	0x58024400
 8000c60:	40000400 	.word	0x40000400

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <NMI_Handler+0x4>

08000c6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cba:	f000 f907 	bl	8000ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000cc8:	4802      	ldr	r0, [pc, #8]	@ (8000cd4 <DMA1_Stream0_IRQHandler+0x10>)
 8000cca:	f002 fd4b 	bl	8003764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	240000f4 	.word	0x240000f4

08000cd8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000cdc:	4802      	ldr	r0, [pc, #8]	@ (8000ce8 <ADC_IRQHandler+0x10>)
 8000cde:	f000 fdc3 	bl	8001868 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	24000090 	.word	0x24000090

08000cec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cf0:	4802      	ldr	r0, [pc, #8]	@ (8000cfc <TIM2_IRQHandler+0x10>)
 8000cf2:	f008 f8ef 	bl	8008ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	2400016c 	.word	0x2400016c

08000d00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d04:	4802      	ldr	r0, [pc, #8]	@ (8000d10 <TIM3_IRQHandler+0x10>)
 8000d06:	f008 f8e5 	bl	8008ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	240001b8 	.word	0x240001b8

08000d14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8000d18:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d1c:	f004 fa17 	bl	800514e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d2c:	4a14      	ldr	r2, [pc, #80]	@ (8000d80 <_sbrk+0x5c>)
 8000d2e:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <_sbrk+0x60>)
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d38:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d40:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <_sbrk+0x64>)
 8000d42:	4a12      	ldr	r2, [pc, #72]	@ (8000d8c <_sbrk+0x68>)
 8000d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d46:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <_sbrk+0x64>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d207      	bcs.n	8000d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d54:	f009 f8cc 	bl	8009ef0 <__errno>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d62:	e009      	b.n	8000d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d64:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6a:	4b07      	ldr	r3, [pc, #28]	@ (8000d88 <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	4a05      	ldr	r2, [pc, #20]	@ (8000d88 <_sbrk+0x64>)
 8000d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d76:	68fb      	ldr	r3, [r7, #12]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	24080000 	.word	0x24080000
 8000d84:	00000400 	.word	0x00000400
 8000d88:	24000210 	.word	0x24000210
 8000d8c:	24000410 	.word	0x24000410

08000d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d90:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000dcc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000d94:	f7ff fb92 	bl	80004bc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d98:	f7ff fafa 	bl	8000390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d9c:	480c      	ldr	r0, [pc, #48]	@ (8000dd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d9e:	490d      	ldr	r1, [pc, #52]	@ (8000dd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000da0:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ddc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000db4:	4c0a      	ldr	r4, [pc, #40]	@ (8000de0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f009 f89b 	bl	8009efc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc6:	f7ff fbd1 	bl	800056c <main>
  bx  lr
 8000dca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dcc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000dd0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000dd4:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000dd8:	0800ab34 	.word	0x0800ab34
  ldr r2, =_sbss
 8000ddc:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000de0:	24000410 	.word	0x24000410

08000de4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC3_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dee:	2003      	movs	r0, #3
 8000df0:	f001 feb2 	bl	8002b58 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000df4:	f005 f830 	bl	8005e58 <HAL_RCC_GetSysClockFreq>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <HAL_Init+0x68>)
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	0a1b      	lsrs	r3, r3, #8
 8000e00:	f003 030f 	and.w	r3, r3, #15
 8000e04:	4913      	ldr	r1, [pc, #76]	@ (8000e54 <HAL_Init+0x6c>)
 8000e06:	5ccb      	ldrb	r3, [r1, r3]
 8000e08:	f003 031f 	and.w	r3, r3, #31
 8000e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e12:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <HAL_Init+0x68>)
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e54 <HAL_Init+0x6c>)
 8000e1c:	5cd3      	ldrb	r3, [r2, r3]
 8000e1e:	f003 031f 	and.w	r3, r3, #31
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	fa22 f303 	lsr.w	r3, r2, r3
 8000e28:	4a0b      	ldr	r2, [pc, #44]	@ (8000e58 <HAL_Init+0x70>)
 8000e2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e5c <HAL_Init+0x74>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e32:	2000      	movs	r0, #0
 8000e34:	f000 f814 	bl	8000e60 <HAL_InitTick>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e002      	b.n	8000e48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e42:	f7ff fe01 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	58024400 	.word	0x58024400
 8000e54:	0800aabc 	.word	0x0800aabc
 8000e58:	24000004 	.word	0x24000004
 8000e5c:	24000000 	.word	0x24000000

08000e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e68:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <HAL_InitTick+0x60>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d101      	bne.n	8000e74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e021      	b.n	8000eb8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e74:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <HAL_InitTick+0x64>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <HAL_InitTick+0x60>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f001 fe97 	bl	8002bbe <HAL_SYSTICK_Config>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00e      	b.n	8000eb8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b0f      	cmp	r3, #15
 8000e9e:	d80a      	bhi.n	8000eb6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ea8:	f001 fe61 	bl	8002b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eac:	4a06      	ldr	r2, [pc, #24]	@ (8000ec8 <HAL_InitTick+0x68>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e000      	b.n	8000eb8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	2400000c 	.word	0x2400000c
 8000ec4:	24000000 	.word	0x24000000
 8000ec8:	24000008 	.word	0x24000008

08000ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <HAL_IncTick+0x20>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <HAL_IncTick+0x24>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a04      	ldr	r2, [pc, #16]	@ (8000ef0 <HAL_IncTick+0x24>)
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	2400000c 	.word	0x2400000c
 8000ef0:	24000214 	.word	0x24000214

08000ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef8:	4b03      	ldr	r3, [pc, #12]	@ (8000f08 <HAL_GetTick+0x14>)
 8000efa:	681b      	ldr	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	24000214 	.word	0x24000214

08000f0c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f10:	4b03      	ldr	r3, [pc, #12]	@ (8000f20 <HAL_GetREVID+0x14>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	0c1b      	lsrs	r3, r3, #16
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	5c001000 	.word	0x5c001000

08000f24 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	609a      	str	r2, [r3, #8]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b087      	sub	sp, #28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d107      	bne.n	8000fb0 <LL_ADC_SetChannelPreselection+0x24>
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	0e9b      	lsrs	r3, r3, #26
 8000fa4:	f003 031f 	and.w	r3, r3, #31
 8000fa8:	2201      	movs	r2, #1
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	e015      	b.n	8000fdc <LL_ADC_SetChannelPreselection+0x50>
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	fa93 f3a3 	rbit	r3, r3
 8000fba:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8000fc6:	2320      	movs	r3, #32
 8000fc8:	e003      	b.n	8000fd2 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	fab3 f383 	clz	r3, r3
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	f003 031f 	and.w	r3, r3, #31
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	69d2      	ldr	r2, [r2, #28]
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8000fe6:	bf00      	nop
 8000fe8:	371c      	adds	r7, #28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b087      	sub	sp, #28
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	3360      	adds	r3, #96	@ 0x60
 8001004:	461a      	mov	r2, r3
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4413      	add	r3, r2
 800100c:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	430b      	orrs	r3, r1
 8001020:	431a      	orrs	r2, r3
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001026:	bf00      	nop
 8001028:	371c      	adds	r7, #28
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001032:	b480      	push	{r7}
 8001034:	b085      	sub	sp, #20
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	691b      	ldr	r3, [r3, #16]
 8001042:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	f003 031f 	and.w	r3, r3, #31
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	431a      	orrs	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	611a      	str	r2, [r3, #16]
}
 8001058:	bf00      	nop
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001064:	b480      	push	{r7}
 8001066:	b087      	sub	sp, #28
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3360      	adds	r3, #96	@ 0x60
 8001074:	461a      	mov	r2, r3
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	431a      	orrs	r2, r3
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	601a      	str	r2, [r3, #0]
  }
}
 800108e:	bf00      	nop
 8001090:	371c      	adds	r7, #28
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010ae:	2301      	movs	r3, #1
 80010b0:	e000      	b.n	80010b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b087      	sub	sp, #28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	3330      	adds	r3, #48	@ 0x30
 80010d0:	461a      	mov	r2, r3
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	0a1b      	lsrs	r3, r3, #8
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	f003 030c 	and.w	r3, r3, #12
 80010dc:	4413      	add	r3, r2
 80010de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	f003 031f 	and.w	r3, r3, #31
 80010ea:	211f      	movs	r1, #31
 80010ec:	fa01 f303 	lsl.w	r3, r1, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	401a      	ands	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	0e9b      	lsrs	r3, r3, #26
 80010f8:	f003 011f 	and.w	r1, r3, #31
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	f003 031f 	and.w	r3, r3, #31
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	431a      	orrs	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800110c:	bf00      	nop
 800110e:	371c      	adds	r7, #28
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	f023 0203 	bic.w	r2, r3, #3
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	431a      	orrs	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	60da      	str	r2, [r3, #12]
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800114e:	2b00      	cmp	r3, #0
 8001150:	d101      	bne.n	8001156 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001164:	b480      	push	{r7}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	3314      	adds	r3, #20
 8001174:	461a      	mov	r2, r3
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	0e5b      	lsrs	r3, r3, #25
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	4413      	add	r3, r2
 8001182:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	0d1b      	lsrs	r3, r3, #20
 800118c:	f003 031f 	and.w	r3, r3, #31
 8001190:	2107      	movs	r1, #7
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	401a      	ands	r2, r3
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	0d1b      	lsrs	r3, r3, #20
 800119e:	f003 031f 	and.w	r3, r3, #31
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	fa01 f303 	lsl.w	r3, r1, r3
 80011a8:	431a      	orrs	r2, r3
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011ae:	bf00      	nop
 80011b0:	371c      	adds	r7, #28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80011d4:	43db      	mvns	r3, r3
 80011d6:	401a      	ands	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f003 0318 	and.w	r3, r3, #24
 80011de:	4908      	ldr	r1, [pc, #32]	@ (8001200 <LL_ADC_SetChannelSingleDiff+0x44>)
 80011e0:	40d9      	lsrs	r1, r3
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	400b      	ands	r3, r1
 80011e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80011ea:	431a      	orrs	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	000fffff 	.word	0x000fffff

08001204 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 031f 	and.w	r3, r3, #31
}
 8001214:	4618      	mov	r0, r3
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001230:	4618      	mov	r0, r3
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	4b04      	ldr	r3, [pc, #16]	@ (800125c <LL_ADC_DisableDeepPowerDown+0x20>)
 800124a:	4013      	ands	r3, r2
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	6093      	str	r3, [r2, #8]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	5fffffc0 	.word	0x5fffffc0

08001260 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001270:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001274:	d101      	bne.n	800127a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <LL_ADC_EnableInternalRegulator+0x24>)
 8001296:	4013      	ands	r3, r2
 8001298:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	6fffffc0 	.word	0x6fffffc0

080012b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80012c4:	d101      	bne.n	80012ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <LL_ADC_Enable+0x24>)
 80012e6:	4013      	ands	r3, r2
 80012e8:	f043 0201 	orr.w	r2, r3, #1
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	7fffffc0 	.word	0x7fffffc0

08001300 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b01      	cmp	r3, #1
 8001312:	d101      	bne.n	8001318 <LL_ADC_IsEnabled+0x18>
 8001314:	2301      	movs	r3, #1
 8001316:	e000      	b.n	800131a <LL_ADC_IsEnabled+0x1a>
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	4b05      	ldr	r3, [pc, #20]	@ (800134c <LL_ADC_REG_StartConversion+0x24>)
 8001336:	4013      	ands	r3, r2
 8001338:	f043 0204 	orr.w	r2, r3, #4
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	7fffffc0 	.word	0x7fffffc0

08001350 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b04      	cmp	r3, #4
 8001362:	d101      	bne.n	8001368 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001364:	2301      	movs	r3, #1
 8001366:	e000      	b.n	800136a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	2b08      	cmp	r3, #8
 8001388:	d101      	bne.n	800138e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b089      	sub	sp, #36	@ 0x24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e18f      	b.n	80016d6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d109      	bne.n	80013d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff fb59 	bl	8000a7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff3f 	bl	8001260 <LL_ADC_IsDeepPowerDownEnabled>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d004      	beq.n	80013f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff25 	bl	800123c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ff5a 	bl	80012b0 <LL_ADC_IsInternalRegulatorEnabled>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d114      	bne.n	800142c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff ff3e 	bl	8001288 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800140c:	4b87      	ldr	r3, [pc, #540]	@ (800162c <HAL_ADC_Init+0x290>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	099b      	lsrs	r3, r3, #6
 8001412:	4a87      	ldr	r2, [pc, #540]	@ (8001630 <HAL_ADC_Init+0x294>)
 8001414:	fba2 2303 	umull	r2, r3, r2, r3
 8001418:	099b      	lsrs	r3, r3, #6
 800141a:	3301      	adds	r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800141e:	e002      	b.n	8001426 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	3b01      	subs	r3, #1
 8001424:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1f9      	bne.n	8001420 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff3d 	bl	80012b0 <LL_ADC_IsInternalRegulatorEnabled>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d10d      	bne.n	8001458 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001440:	f043 0210 	orr.w	r2, r3, #16
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800144c:	f043 0201 	orr.w	r2, r3, #1
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff77 	bl	8001350 <LL_ADC_REG_IsConversionOngoing>
 8001462:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001468:	f003 0310 	and.w	r3, r3, #16
 800146c:	2b00      	cmp	r3, #0
 800146e:	f040 8129 	bne.w	80016c4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	2b00      	cmp	r3, #0
 8001476:	f040 8125 	bne.w	80016c4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800147e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001482:	f043 0202 	orr.w	r2, r3, #2
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff ff36 	bl	8001300 <LL_ADC_IsEnabled>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d136      	bne.n	8001508 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a65      	ldr	r2, [pc, #404]	@ (8001634 <HAL_ADC_Init+0x298>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d004      	beq.n	80014ae <HAL_ADC_Init+0x112>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a63      	ldr	r2, [pc, #396]	@ (8001638 <HAL_ADC_Init+0x29c>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d10e      	bne.n	80014cc <HAL_ADC_Init+0x130>
 80014ae:	4861      	ldr	r0, [pc, #388]	@ (8001634 <HAL_ADC_Init+0x298>)
 80014b0:	f7ff ff26 	bl	8001300 <LL_ADC_IsEnabled>
 80014b4:	4604      	mov	r4, r0
 80014b6:	4860      	ldr	r0, [pc, #384]	@ (8001638 <HAL_ADC_Init+0x29c>)
 80014b8:	f7ff ff22 	bl	8001300 <LL_ADC_IsEnabled>
 80014bc:	4603      	mov	r3, r0
 80014be:	4323      	orrs	r3, r4
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	bf0c      	ite	eq
 80014c4:	2301      	moveq	r3, #1
 80014c6:	2300      	movne	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	e008      	b.n	80014de <HAL_ADC_Init+0x142>
 80014cc:	485b      	ldr	r0, [pc, #364]	@ (800163c <HAL_ADC_Init+0x2a0>)
 80014ce:	f7ff ff17 	bl	8001300 <LL_ADC_IsEnabled>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	bf0c      	ite	eq
 80014d8:	2301      	moveq	r3, #1
 80014da:	2300      	movne	r3, #0
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d012      	beq.n	8001508 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a53      	ldr	r2, [pc, #332]	@ (8001634 <HAL_ADC_Init+0x298>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d004      	beq.n	80014f6 <HAL_ADC_Init+0x15a>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a51      	ldr	r2, [pc, #324]	@ (8001638 <HAL_ADC_Init+0x29c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d101      	bne.n	80014fa <HAL_ADC_Init+0x15e>
 80014f6:	4a52      	ldr	r2, [pc, #328]	@ (8001640 <HAL_ADC_Init+0x2a4>)
 80014f8:	e000      	b.n	80014fc <HAL_ADC_Init+0x160>
 80014fa:	4a52      	ldr	r2, [pc, #328]	@ (8001644 <HAL_ADC_Init+0x2a8>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	4619      	mov	r1, r3
 8001502:	4610      	mov	r0, r2
 8001504:	f7ff fd0e 	bl	8000f24 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001508:	f7ff fd00 	bl	8000f0c <HAL_GetREVID>
 800150c:	4603      	mov	r3, r0
 800150e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001512:	4293      	cmp	r3, r2
 8001514:	d914      	bls.n	8001540 <HAL_ADC_Init+0x1a4>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2b10      	cmp	r3, #16
 800151c:	d110      	bne.n	8001540 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	7d5b      	ldrb	r3, [r3, #21]
 8001522:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001528:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800152e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	7f1b      	ldrb	r3, [r3, #28]
 8001534:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001536:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001538:	f043 030c 	orr.w	r3, r3, #12
 800153c:	61bb      	str	r3, [r7, #24]
 800153e:	e00d      	b.n	800155c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	7d5b      	ldrb	r3, [r3, #21]
 8001544:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800154a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001550:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7f1b      	ldrb	r3, [r3, #28]
 8001556:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7f1b      	ldrb	r3, [r3, #28]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d106      	bne.n	8001572 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	3b01      	subs	r3, #1
 800156a:	045b      	lsls	r3, r3, #17
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001576:	2b00      	cmp	r3, #0
 8001578:	d009      	beq.n	800158e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001586:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	4b2c      	ldr	r3, [pc, #176]	@ (8001648 <HAL_ADC_Init+0x2ac>)
 8001596:	4013      	ands	r3, r2
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	69b9      	ldr	r1, [r7, #24]
 800159e:	430b      	orrs	r3, r1
 80015a0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fed2 	bl	8001350 <LL_ADC_REG_IsConversionOngoing>
 80015ac:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fedf 	bl	8001376 <LL_ADC_INJ_IsConversionOngoing>
 80015b8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d15f      	bne.n	8001680 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d15c      	bne.n	8001680 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	7d1b      	ldrb	r3, [r3, #20]
 80015ca:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68da      	ldr	r2, [r3, #12]
 80015da:	4b1c      	ldr	r3, [pc, #112]	@ (800164c <HAL_ADC_Init+0x2b0>)
 80015dc:	4013      	ands	r3, r2
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	69b9      	ldr	r1, [r7, #24]
 80015e4:	430b      	orrs	r3, r1
 80015e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d130      	bne.n	8001654 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	691a      	ldr	r2, [r3, #16]
 80015fe:	4b14      	ldr	r3, [pc, #80]	@ (8001650 <HAL_ADC_Init+0x2b4>)
 8001600:	4013      	ands	r3, r2
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001606:	3a01      	subs	r2, #1
 8001608:	0411      	lsls	r1, r2, #16
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800160e:	4311      	orrs	r1, r2
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001614:	4311      	orrs	r1, r2
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800161a:	430a      	orrs	r2, r1
 800161c:	431a      	orrs	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f042 0201 	orr.w	r2, r2, #1
 8001626:	611a      	str	r2, [r3, #16]
 8001628:	e01c      	b.n	8001664 <HAL_ADC_Init+0x2c8>
 800162a:	bf00      	nop
 800162c:	24000000 	.word	0x24000000
 8001630:	053e2d63 	.word	0x053e2d63
 8001634:	40022000 	.word	0x40022000
 8001638:	40022100 	.word	0x40022100
 800163c:	58026000 	.word	0x58026000
 8001640:	40022300 	.word	0x40022300
 8001644:	58026300 	.word	0x58026300
 8001648:	fff0c003 	.word	0xfff0c003
 800164c:	ffffbffc 	.word	0xffffbffc
 8001650:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	691a      	ldr	r2, [r3, #16]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0201 	bic.w	r2, r2, #1
 8001662:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	430a      	orrs	r2, r1
 8001678:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 ff5a 	bl	8002534 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d10c      	bne.n	80016a2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	f023 010f 	bic.w	r1, r3, #15
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	1e5a      	subs	r2, r3, #1
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	430a      	orrs	r2, r1
 800169e:	631a      	str	r2, [r3, #48]	@ 0x30
 80016a0:	e007      	b.n	80016b2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 020f 	bic.w	r2, r2, #15
 80016b0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016b6:	f023 0303 	bic.w	r3, r3, #3
 80016ba:	f043 0201 	orr.w	r2, r3, #1
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	655a      	str	r2, [r3, #84]	@ 0x54
 80016c2:	e007      	b.n	80016d4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016c8:	f043 0210 	orr.w	r2, r3, #16
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80016d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3724      	adds	r7, #36	@ 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd90      	pop	{r4, r7, pc}
 80016de:	bf00      	nop

080016e0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a55      	ldr	r2, [pc, #340]	@ (8001848 <HAL_ADC_Start_DMA+0x168>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d004      	beq.n	8001700 <HAL_ADC_Start_DMA+0x20>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a54      	ldr	r2, [pc, #336]	@ (800184c <HAL_ADC_Start_DMA+0x16c>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d101      	bne.n	8001704 <HAL_ADC_Start_DMA+0x24>
 8001700:	4b53      	ldr	r3, [pc, #332]	@ (8001850 <HAL_ADC_Start_DMA+0x170>)
 8001702:	e000      	b.n	8001706 <HAL_ADC_Start_DMA+0x26>
 8001704:	4b53      	ldr	r3, [pc, #332]	@ (8001854 <HAL_ADC_Start_DMA+0x174>)
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fd7c 	bl	8001204 <LL_ADC_GetMultimode>
 800170c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fe1c 	bl	8001350 <LL_ADC_REG_IsConversionOngoing>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	f040 808c 	bne.w	8001838 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001726:	2b01      	cmp	r3, #1
 8001728:	d101      	bne.n	800172e <HAL_ADC_Start_DMA+0x4e>
 800172a:	2302      	movs	r3, #2
 800172c:	e087      	b.n	800183e <HAL_ADC_Start_DMA+0x15e>
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	2b05      	cmp	r3, #5
 8001740:	d002      	beq.n	8001748 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	2b09      	cmp	r3, #9
 8001746:	d170      	bne.n	800182a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001748:	68f8      	ldr	r0, [r7, #12]
 800174a:	f000 fdd5 	bl	80022f8 <ADC_Enable>
 800174e:	4603      	mov	r3, r0
 8001750:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001752:	7dfb      	ldrb	r3, [r7, #23]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d163      	bne.n	8001820 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800175c:	4b3e      	ldr	r3, [pc, #248]	@ (8001858 <HAL_ADC_Start_DMA+0x178>)
 800175e:	4013      	ands	r3, r2
 8001760:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a37      	ldr	r2, [pc, #220]	@ (800184c <HAL_ADC_Start_DMA+0x16c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d002      	beq.n	8001778 <HAL_ADC_Start_DMA+0x98>
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	e000      	b.n	800177a <HAL_ADC_Start_DMA+0x9a>
 8001778:	4b33      	ldr	r3, [pc, #204]	@ (8001848 <HAL_ADC_Start_DMA+0x168>)
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	6812      	ldr	r2, [r2, #0]
 800177e:	4293      	cmp	r3, r2
 8001780:	d002      	beq.n	8001788 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d105      	bne.n	8001794 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800178c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001798:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d006      	beq.n	80017ae <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a4:	f023 0206 	bic.w	r2, r3, #6
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	659a      	str	r2, [r3, #88]	@ 0x58
 80017ac:	e002      	b.n	80017b4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2200      	movs	r2, #0
 80017b2:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b8:	4a28      	ldr	r2, [pc, #160]	@ (800185c <HAL_ADC_Start_DMA+0x17c>)
 80017ba:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c0:	4a27      	ldr	r2, [pc, #156]	@ (8001860 <HAL_ADC_Start_DMA+0x180>)
 80017c2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c8:	4a26      	ldr	r2, [pc, #152]	@ (8001864 <HAL_ADC_Start_DMA+0x184>)
 80017ca:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	221c      	movs	r2, #28
 80017d2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 0210 	orr.w	r2, r2, #16
 80017ea:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f4:	4619      	mov	r1, r3
 80017f6:	4610      	mov	r0, r2
 80017f8:	f7ff fc8e 	bl	8001118 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3340      	adds	r3, #64	@ 0x40
 8001806:	4619      	mov	r1, r3
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f001 fd40 	bl	8003290 <HAL_DMA_Start_IT>
 8001810:	4603      	mov	r3, r0
 8001812:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fd85 	bl	8001328 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800181e:	e00d      	b.n	800183c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8001828:	e008      	b.n	800183c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001836:	e001      	b.n	800183c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001838:	2302      	movs	r3, #2
 800183a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800183c:	7dfb      	ldrb	r3, [r7, #23]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40022000 	.word	0x40022000
 800184c:	40022100 	.word	0x40022100
 8001850:	40022300 	.word	0x40022300
 8001854:	58026300 	.word	0x58026300
 8001858:	fffff0fe 	.word	0xfffff0fe
 800185c:	0800240d 	.word	0x0800240d
 8001860:	080024e5 	.word	0x080024e5
 8001864:	08002501 	.word	0x08002501

08001868 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	@ 0x28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001870:	2300      	movs	r3, #0
 8001872:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a87      	ldr	r2, [pc, #540]	@ (8001aa8 <HAL_ADC_IRQHandler+0x240>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d004      	beq.n	8001898 <HAL_ADC_IRQHandler+0x30>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a86      	ldr	r2, [pc, #536]	@ (8001aac <HAL_ADC_IRQHandler+0x244>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d101      	bne.n	800189c <HAL_ADC_IRQHandler+0x34>
 8001898:	4b85      	ldr	r3, [pc, #532]	@ (8001ab0 <HAL_ADC_IRQHandler+0x248>)
 800189a:	e000      	b.n	800189e <HAL_ADC_IRQHandler+0x36>
 800189c:	4b85      	ldr	r3, [pc, #532]	@ (8001ab4 <HAL_ADC_IRQHandler+0x24c>)
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fcb0 	bl	8001204 <LL_ADC_GetMultimode>
 80018a4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d017      	beq.n	80018e0 <HAL_ADC_IRQHandler+0x78>
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d012      	beq.n	80018e0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018be:	f003 0310 	and.w	r3, r3, #16
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d105      	bne.n	80018d2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ca:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 ff88 	bl	80027e8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2202      	movs	r2, #2
 80018de:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d004      	beq.n	80018f4 <HAL_ADC_IRQHandler+0x8c>
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10a      	bne.n	800190a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 8083 	beq.w	8001a06 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d07d      	beq.n	8001a06 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800190e:	f003 0310 	and.w	r3, r3, #16
 8001912:	2b00      	cmp	r3, #0
 8001914:	d105      	bne.n	8001922 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800191a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fbb7 	bl	800109a <LL_ADC_REG_IsTriggerSourceSWStart>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d062      	beq.n	80019f8 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a5d      	ldr	r2, [pc, #372]	@ (8001aac <HAL_ADC_IRQHandler+0x244>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d002      	beq.n	8001942 <HAL_ADC_IRQHandler+0xda>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	e000      	b.n	8001944 <HAL_ADC_IRQHandler+0xdc>
 8001942:	4b59      	ldr	r3, [pc, #356]	@ (8001aa8 <HAL_ADC_IRQHandler+0x240>)
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6812      	ldr	r2, [r2, #0]
 8001948:	4293      	cmp	r3, r2
 800194a:	d008      	beq.n	800195e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d005      	beq.n	800195e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	2b05      	cmp	r3, #5
 8001956:	d002      	beq.n	800195e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	2b09      	cmp	r3, #9
 800195c:	d104      	bne.n	8001968 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	623b      	str	r3, [r7, #32]
 8001966:	e00c      	b.n	8001982 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a4f      	ldr	r2, [pc, #316]	@ (8001aac <HAL_ADC_IRQHandler+0x244>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d002      	beq.n	8001978 <HAL_ADC_IRQHandler+0x110>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	e000      	b.n	800197a <HAL_ADC_IRQHandler+0x112>
 8001978:	4b4b      	ldr	r3, [pc, #300]	@ (8001aa8 <HAL_ADC_IRQHandler+0x240>)
 800197a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001982:	6a3b      	ldr	r3, [r7, #32]
 8001984:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d135      	bne.n	80019f8 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b08      	cmp	r3, #8
 8001998:	d12e      	bne.n	80019f8 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fcd6 	bl	8001350 <LL_ADC_REG_IsConversionOngoing>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d11a      	bne.n	80019e0 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 020c 	bic.w	r2, r2, #12
 80019b8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019be:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d112      	bne.n	80019f8 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019d6:	f043 0201 	orr.w	r2, r3, #1
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	655a      	str	r2, [r3, #84]	@ 0x54
 80019de:	e00b      	b.n	80019f8 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019e4:	f043 0210 	orr.w	r2, r3, #16
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f0:	f043 0201 	orr.w	r2, r3, #1
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7fe fd77 	bl	80004ec <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	220c      	movs	r2, #12
 8001a04:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	f003 0320 	and.w	r3, r3, #32
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d004      	beq.n	8001a1a <HAL_ADC_IRQHandler+0x1b2>
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	f003 0320 	and.w	r3, r3, #32
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10b      	bne.n	8001a32 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 80a0 	beq.w	8001b66 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 809a 	beq.w	8001b66 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a36:	f003 0310 	and.w	r3, r3, #16
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d105      	bne.n	8001a4a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a42:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fb75 	bl	800113e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001a54:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fb1d 	bl	800109a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a60:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a11      	ldr	r2, [pc, #68]	@ (8001aac <HAL_ADC_IRQHandler+0x244>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d002      	beq.n	8001a72 <HAL_ADC_IRQHandler+0x20a>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	e000      	b.n	8001a74 <HAL_ADC_IRQHandler+0x20c>
 8001a72:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa8 <HAL_ADC_IRQHandler+0x240>)
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d008      	beq.n	8001a8e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d005      	beq.n	8001a8e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	2b06      	cmp	r3, #6
 8001a86:	d002      	beq.n	8001a8e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	2b07      	cmp	r3, #7
 8001a8c:	d104      	bne.n	8001a98 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	623b      	str	r3, [r7, #32]
 8001a96:	e014      	b.n	8001ac2 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a03      	ldr	r2, [pc, #12]	@ (8001aac <HAL_ADC_IRQHandler+0x244>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d00a      	beq.n	8001ab8 <HAL_ADC_IRQHandler+0x250>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	e008      	b.n	8001aba <HAL_ADC_IRQHandler+0x252>
 8001aa8:	40022000 	.word	0x40022000
 8001aac:	40022100 	.word	0x40022100
 8001ab0:	40022300 	.word	0x40022300
 8001ab4:	58026300 	.word	0x58026300
 8001ab8:	4b84      	ldr	r3, [pc, #528]	@ (8001ccc <HAL_ADC_IRQHandler+0x464>)
 8001aba:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d047      	beq.n	8001b58 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
 8001aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d007      	beq.n	8001ae2 <HAL_ADC_IRQHandler+0x27a>
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d03f      	beq.n	8001b58 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001ad8:	6a3b      	ldr	r3, [r7, #32]
 8001ada:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d13a      	bne.n	8001b58 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aec:	2b40      	cmp	r3, #64	@ 0x40
 8001aee:	d133      	bne.n	8001b58 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d12e      	bne.n	8001b58 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fc39 	bl	8001376 <LL_ADC_INJ_IsConversionOngoing>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d11a      	bne.n	8001b40 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001b18:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b1e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d112      	bne.n	8001b58 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b36:	f043 0201 	orr.w	r2, r3, #1
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b3e:	e00b      	b.n	8001b58 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b44:	f043 0210 	orr.w	r2, r3, #16
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b50:	f043 0201 	orr.w	r2, r3, #1
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 fe1d 	bl	8002798 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2260      	movs	r2, #96	@ 0x60
 8001b64:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d011      	beq.n	8001b94 <HAL_ADC_IRQHandler+0x32c>
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00c      	beq.n	8001b94 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b7e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f8b2 	bl	8001cf0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2280      	movs	r2, #128	@ 0x80
 8001b92:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d012      	beq.n	8001bc4 <HAL_ADC_IRQHandler+0x35c>
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00d      	beq.n	8001bc4 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bac:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 fe03 	bl	80027c0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bc2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d012      	beq.n	8001bf4 <HAL_ADC_IRQHandler+0x38c>
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00d      	beq.n	8001bf4 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bdc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 fdf5 	bl	80027d4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bf2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f003 0310 	and.w	r3, r3, #16
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d043      	beq.n	8001c86 <HAL_ADC_IRQHandler+0x41e>
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	f003 0310 	and.w	r3, r3, #16
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d03e      	beq.n	8001c86 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d102      	bne.n	8001c16 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8001c10:	2301      	movs	r3, #1
 8001c12:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c14:	e021      	b.n	8001c5a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d015      	beq.n	8001c48 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a2a      	ldr	r2, [pc, #168]	@ (8001ccc <HAL_ADC_IRQHandler+0x464>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d004      	beq.n	8001c30 <HAL_ADC_IRQHandler+0x3c8>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a29      	ldr	r2, [pc, #164]	@ (8001cd0 <HAL_ADC_IRQHandler+0x468>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d101      	bne.n	8001c34 <HAL_ADC_IRQHandler+0x3cc>
 8001c30:	4b28      	ldr	r3, [pc, #160]	@ (8001cd4 <HAL_ADC_IRQHandler+0x46c>)
 8001c32:	e000      	b.n	8001c36 <HAL_ADC_IRQHandler+0x3ce>
 8001c34:	4b28      	ldr	r3, [pc, #160]	@ (8001cd8 <HAL_ADC_IRQHandler+0x470>)
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff faf2 	bl	8001220 <LL_ADC_GetMultiDMATransfer>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00b      	beq.n	8001c5a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001c42:	2301      	movs	r3, #1
 8001c44:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c46:	e008      	b.n	8001c5a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001c56:	2301      	movs	r3, #1
 8001c58:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d10e      	bne.n	8001c7e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c64:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c70:	f043 0202 	orr.w	r2, r3, #2
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f843 	bl	8001d04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2210      	movs	r2, #16
 8001c84:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d018      	beq.n	8001cc2 <HAL_ADC_IRQHandler+0x45a>
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d013      	beq.n	8001cc2 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c9e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001caa:	f043 0208 	orr.w	r2, r3, #8
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cba:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 fd75 	bl	80027ac <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001cc2:	bf00      	nop
 8001cc4:	3728      	adds	r7, #40	@ 0x28
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40022000 	.word	0x40022000
 8001cd0:	40022100 	.word	0x40022100
 8001cd4:	40022300 	.word	0x40022300
 8001cd8:	58026300 	.word	0x58026300

08001cdc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b08d      	sub	sp, #52	@ 0x34
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	4a65      	ldr	r2, [pc, #404]	@ (8001ec8 <HAL_ADC_ConfigChannel+0x1b0>)
 8001d32:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d101      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x2a>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e2c7      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x5ba>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fafe 	bl	8001350 <LL_ADC_REG_IsConversionOngoing>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f040 82ac 	bne.w	80022b4 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	db2c      	blt.n	8001dbe <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d108      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x6a>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	0e9b      	lsrs	r3, r3, #26
 8001d76:	f003 031f 	and.w	r3, r3, #31
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	e016      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x98>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	fa93 f3a3 	rbit	r3, r3
 8001d8e:	613b      	str	r3, [r7, #16]
  return result;
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8001d9a:	2320      	movs	r3, #32
 8001d9c:	e003      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	f003 031f 	and.w	r3, r3, #31
 8001daa:	2201      	movs	r2, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6812      	ldr	r2, [r2, #0]
 8001db4:	69d1      	ldr	r1, [r2, #28]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	430b      	orrs	r3, r1
 8001dbc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6818      	ldr	r0, [r3, #0]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	6859      	ldr	r1, [r3, #4]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	f7ff f978 	bl	80010c0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fabb 	bl	8001350 <LL_ADC_REG_IsConversionOngoing>
 8001dda:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fac8 	bl	8001376 <LL_ADC_INJ_IsConversionOngoing>
 8001de6:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f040 80b8 	bne.w	8001f60 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f040 80b4 	bne.w	8001f60 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6818      	ldr	r0, [r3, #0]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	6819      	ldr	r1, [r3, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	461a      	mov	r2, r3
 8001e06:	f7ff f9ad 	bl	8001164 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e0a:	4b30      	ldr	r3, [pc, #192]	@ (8001ecc <HAL_ADC_ConfigChannel+0x1b4>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001e12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e16:	d10b      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x118>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	695a      	ldr	r2, [r3, #20]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	089b      	lsrs	r3, r3, #2
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	e01d      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x154>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f003 0310 	and.w	r3, r3, #16
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10b      	bne.n	8001e56 <HAL_ADC_ConfigChannel+0x13e>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	695a      	ldr	r2, [r3, #20]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	089b      	lsrs	r3, r3, #2
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	e00a      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x154>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	695a      	ldr	r2, [r3, #20]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d02c      	beq.n	8001ed0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6818      	ldr	r0, [r3, #0]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	6919      	ldr	r1, [r3, #16]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	6a3b      	ldr	r3, [r7, #32]
 8001e84:	f7ff f8b5 	bl	8000ff2 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	6919      	ldr	r1, [r3, #16]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	7e5b      	ldrb	r3, [r3, #25]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d102      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x186>
 8001e98:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001e9c:	e000      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x188>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	f7ff f8df 	bl	8001064 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	6919      	ldr	r1, [r3, #16]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	7e1b      	ldrb	r3, [r3, #24]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d102      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x1a4>
 8001eb6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001eba:	e000      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x1a6>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	f7ff f8b7 	bl	8001032 <LL_ADC_SetDataRightShift>
 8001ec4:	e04c      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x248>
 8001ec6:	bf00      	nop
 8001ec8:	47ff0000 	.word	0x47ff0000
 8001ecc:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ed6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	069b      	lsls	r3, r3, #26
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d107      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001ef2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001efa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	069b      	lsls	r3, r3, #26
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d107      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001f16:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	069b      	lsls	r3, r3, #26
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d107      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001f3a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	069b      	lsls	r3, r3, #26
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d107      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001f5e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff f9cb 	bl	8001300 <LL_ADC_IsEnabled>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f040 81aa 	bne.w	80022c6 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6818      	ldr	r0, [r3, #0]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	6819      	ldr	r1, [r3, #0]
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	f7ff f91c 	bl	80011bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	4a87      	ldr	r2, [pc, #540]	@ (80021a8 <HAL_ADC_ConfigChannel+0x490>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	f040 809a 	bne.w	80020c4 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4984      	ldr	r1, [pc, #528]	@ (80021ac <HAL_ADC_ConfigChannel+0x494>)
 8001f9a:	428b      	cmp	r3, r1
 8001f9c:	d147      	bne.n	800202e <HAL_ADC_ConfigChannel+0x316>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4983      	ldr	r1, [pc, #524]	@ (80021b0 <HAL_ADC_ConfigChannel+0x498>)
 8001fa4:	428b      	cmp	r3, r1
 8001fa6:	d040      	beq.n	800202a <HAL_ADC_ConfigChannel+0x312>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4981      	ldr	r1, [pc, #516]	@ (80021b4 <HAL_ADC_ConfigChannel+0x49c>)
 8001fae:	428b      	cmp	r3, r1
 8001fb0:	d039      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x30e>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4980      	ldr	r1, [pc, #512]	@ (80021b8 <HAL_ADC_ConfigChannel+0x4a0>)
 8001fb8:	428b      	cmp	r3, r1
 8001fba:	d032      	beq.n	8002022 <HAL_ADC_ConfigChannel+0x30a>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	497e      	ldr	r1, [pc, #504]	@ (80021bc <HAL_ADC_ConfigChannel+0x4a4>)
 8001fc2:	428b      	cmp	r3, r1
 8001fc4:	d02b      	beq.n	800201e <HAL_ADC_ConfigChannel+0x306>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	497d      	ldr	r1, [pc, #500]	@ (80021c0 <HAL_ADC_ConfigChannel+0x4a8>)
 8001fcc:	428b      	cmp	r3, r1
 8001fce:	d024      	beq.n	800201a <HAL_ADC_ConfigChannel+0x302>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	497b      	ldr	r1, [pc, #492]	@ (80021c4 <HAL_ADC_ConfigChannel+0x4ac>)
 8001fd6:	428b      	cmp	r3, r1
 8001fd8:	d01d      	beq.n	8002016 <HAL_ADC_ConfigChannel+0x2fe>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	497a      	ldr	r1, [pc, #488]	@ (80021c8 <HAL_ADC_ConfigChannel+0x4b0>)
 8001fe0:	428b      	cmp	r3, r1
 8001fe2:	d016      	beq.n	8002012 <HAL_ADC_ConfigChannel+0x2fa>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4978      	ldr	r1, [pc, #480]	@ (80021cc <HAL_ADC_ConfigChannel+0x4b4>)
 8001fea:	428b      	cmp	r3, r1
 8001fec:	d00f      	beq.n	800200e <HAL_ADC_ConfigChannel+0x2f6>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4977      	ldr	r1, [pc, #476]	@ (80021d0 <HAL_ADC_ConfigChannel+0x4b8>)
 8001ff4:	428b      	cmp	r3, r1
 8001ff6:	d008      	beq.n	800200a <HAL_ADC_ConfigChannel+0x2f2>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4975      	ldr	r1, [pc, #468]	@ (80021d4 <HAL_ADC_ConfigChannel+0x4bc>)
 8001ffe:	428b      	cmp	r3, r1
 8002000:	d101      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x2ee>
 8002002:	4b75      	ldr	r3, [pc, #468]	@ (80021d8 <HAL_ADC_ConfigChannel+0x4c0>)
 8002004:	e05a      	b.n	80020bc <HAL_ADC_ConfigChannel+0x3a4>
 8002006:	2300      	movs	r3, #0
 8002008:	e058      	b.n	80020bc <HAL_ADC_ConfigChannel+0x3a4>
 800200a:	4b74      	ldr	r3, [pc, #464]	@ (80021dc <HAL_ADC_ConfigChannel+0x4c4>)
 800200c:	e056      	b.n	80020bc <HAL_ADC_ConfigChannel+0x3a4>
 800200e:	4b74      	ldr	r3, [pc, #464]	@ (80021e0 <HAL_ADC_ConfigChannel+0x4c8>)
 8002010:	e054      	b.n	80020bc <HAL_ADC_ConfigChannel+0x3a4>
 8002012:	4b6e      	ldr	r3, [pc, #440]	@ (80021cc <HAL_ADC_ConfigChannel+0x4b4>)
 8002014:	e052      	b.n	80020bc <HAL_ADC_ConfigChannel+0x3a4>
 8002016:	4b6c      	ldr	r3, [pc, #432]	@ (80021c8 <HAL_ADC_ConfigChannel+0x4b0>)
 8002018:	e050      	b.n	80020bc <HAL_ADC_ConfigChannel+0x3a4>
 800201a:	4b72      	ldr	r3, [pc, #456]	@ (80021e4 <HAL_ADC_ConfigChannel+0x4cc>)
 800201c:	e04e      	b.n	80020bc <HAL_ADC_ConfigChannel+0x3a4>
 800201e:	4b72      	ldr	r3, [pc, #456]	@ (80021e8 <HAL_ADC_ConfigChannel+0x4d0>)
 8002020:	e04c      	b.n	80020bc <HAL_ADC_ConfigChannel+0x3a4>
 8002022:	4b72      	ldr	r3, [pc, #456]	@ (80021ec <HAL_ADC_ConfigChannel+0x4d4>)
 8002024:	e04a      	b.n	80020bc <HAL_ADC_ConfigChannel+0x3a4>
 8002026:	4b72      	ldr	r3, [pc, #456]	@ (80021f0 <HAL_ADC_ConfigChannel+0x4d8>)
 8002028:	e048      	b.n	80020bc <HAL_ADC_ConfigChannel+0x3a4>
 800202a:	2301      	movs	r3, #1
 800202c:	e046      	b.n	80020bc <HAL_ADC_ConfigChannel+0x3a4>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4970      	ldr	r1, [pc, #448]	@ (80021f4 <HAL_ADC_ConfigChannel+0x4dc>)
 8002034:	428b      	cmp	r3, r1
 8002036:	d140      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x3a2>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	495c      	ldr	r1, [pc, #368]	@ (80021b0 <HAL_ADC_ConfigChannel+0x498>)
 800203e:	428b      	cmp	r3, r1
 8002040:	d039      	beq.n	80020b6 <HAL_ADC_ConfigChannel+0x39e>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	495b      	ldr	r1, [pc, #364]	@ (80021b4 <HAL_ADC_ConfigChannel+0x49c>)
 8002048:	428b      	cmp	r3, r1
 800204a:	d032      	beq.n	80020b2 <HAL_ADC_ConfigChannel+0x39a>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4959      	ldr	r1, [pc, #356]	@ (80021b8 <HAL_ADC_ConfigChannel+0x4a0>)
 8002052:	428b      	cmp	r3, r1
 8002054:	d02b      	beq.n	80020ae <HAL_ADC_ConfigChannel+0x396>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4958      	ldr	r1, [pc, #352]	@ (80021bc <HAL_ADC_ConfigChannel+0x4a4>)
 800205c:	428b      	cmp	r3, r1
 800205e:	d024      	beq.n	80020aa <HAL_ADC_ConfigChannel+0x392>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4956      	ldr	r1, [pc, #344]	@ (80021c0 <HAL_ADC_ConfigChannel+0x4a8>)
 8002066:	428b      	cmp	r3, r1
 8002068:	d01d      	beq.n	80020a6 <HAL_ADC_ConfigChannel+0x38e>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4955      	ldr	r1, [pc, #340]	@ (80021c4 <HAL_ADC_ConfigChannel+0x4ac>)
 8002070:	428b      	cmp	r3, r1
 8002072:	d016      	beq.n	80020a2 <HAL_ADC_ConfigChannel+0x38a>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4953      	ldr	r1, [pc, #332]	@ (80021c8 <HAL_ADC_ConfigChannel+0x4b0>)
 800207a:	428b      	cmp	r3, r1
 800207c:	d00f      	beq.n	800209e <HAL_ADC_ConfigChannel+0x386>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4952      	ldr	r1, [pc, #328]	@ (80021cc <HAL_ADC_ConfigChannel+0x4b4>)
 8002084:	428b      	cmp	r3, r1
 8002086:	d008      	beq.n	800209a <HAL_ADC_ConfigChannel+0x382>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4951      	ldr	r1, [pc, #324]	@ (80021d4 <HAL_ADC_ConfigChannel+0x4bc>)
 800208e:	428b      	cmp	r3, r1
 8002090:	d101      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x37e>
 8002092:	4b51      	ldr	r3, [pc, #324]	@ (80021d8 <HAL_ADC_ConfigChannel+0x4c0>)
 8002094:	e012      	b.n	80020bc <HAL_ADC_ConfigChannel+0x3a4>
 8002096:	2300      	movs	r3, #0
 8002098:	e010      	b.n	80020bc <HAL_ADC_ConfigChannel+0x3a4>
 800209a:	4b51      	ldr	r3, [pc, #324]	@ (80021e0 <HAL_ADC_ConfigChannel+0x4c8>)
 800209c:	e00e      	b.n	80020bc <HAL_ADC_ConfigChannel+0x3a4>
 800209e:	4b4b      	ldr	r3, [pc, #300]	@ (80021cc <HAL_ADC_ConfigChannel+0x4b4>)
 80020a0:	e00c      	b.n	80020bc <HAL_ADC_ConfigChannel+0x3a4>
 80020a2:	4b49      	ldr	r3, [pc, #292]	@ (80021c8 <HAL_ADC_ConfigChannel+0x4b0>)
 80020a4:	e00a      	b.n	80020bc <HAL_ADC_ConfigChannel+0x3a4>
 80020a6:	4b4f      	ldr	r3, [pc, #316]	@ (80021e4 <HAL_ADC_ConfigChannel+0x4cc>)
 80020a8:	e008      	b.n	80020bc <HAL_ADC_ConfigChannel+0x3a4>
 80020aa:	4b4f      	ldr	r3, [pc, #316]	@ (80021e8 <HAL_ADC_ConfigChannel+0x4d0>)
 80020ac:	e006      	b.n	80020bc <HAL_ADC_ConfigChannel+0x3a4>
 80020ae:	4b4f      	ldr	r3, [pc, #316]	@ (80021ec <HAL_ADC_ConfigChannel+0x4d4>)
 80020b0:	e004      	b.n	80020bc <HAL_ADC_ConfigChannel+0x3a4>
 80020b2:	4b4f      	ldr	r3, [pc, #316]	@ (80021f0 <HAL_ADC_ConfigChannel+0x4d8>)
 80020b4:	e002      	b.n	80020bc <HAL_ADC_ConfigChannel+0x3a4>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <HAL_ADC_ConfigChannel+0x3a4>
 80020ba:	2300      	movs	r3, #0
 80020bc:	4619      	mov	r1, r3
 80020be:	4610      	mov	r0, r2
 80020c0:	f7fe ff64 	bl	8000f8c <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f280 80fc 	bge.w	80022c6 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a36      	ldr	r2, [pc, #216]	@ (80021ac <HAL_ADC_ConfigChannel+0x494>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d004      	beq.n	80020e2 <HAL_ADC_ConfigChannel+0x3ca>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a45      	ldr	r2, [pc, #276]	@ (80021f4 <HAL_ADC_ConfigChannel+0x4dc>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d101      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x3ce>
 80020e2:	4b45      	ldr	r3, [pc, #276]	@ (80021f8 <HAL_ADC_ConfigChannel+0x4e0>)
 80020e4:	e000      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x3d0>
 80020e6:	4b45      	ldr	r3, [pc, #276]	@ (80021fc <HAL_ADC_ConfigChannel+0x4e4>)
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe ff41 	bl	8000f70 <LL_ADC_GetCommonPathInternalCh>
 80020ee:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a2d      	ldr	r2, [pc, #180]	@ (80021ac <HAL_ADC_ConfigChannel+0x494>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d004      	beq.n	8002104 <HAL_ADC_ConfigChannel+0x3ec>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a3d      	ldr	r2, [pc, #244]	@ (80021f4 <HAL_ADC_ConfigChannel+0x4dc>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d10e      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x40a>
 8002104:	4829      	ldr	r0, [pc, #164]	@ (80021ac <HAL_ADC_ConfigChannel+0x494>)
 8002106:	f7ff f8fb 	bl	8001300 <LL_ADC_IsEnabled>
 800210a:	4604      	mov	r4, r0
 800210c:	4839      	ldr	r0, [pc, #228]	@ (80021f4 <HAL_ADC_ConfigChannel+0x4dc>)
 800210e:	f7ff f8f7 	bl	8001300 <LL_ADC_IsEnabled>
 8002112:	4603      	mov	r3, r0
 8002114:	4323      	orrs	r3, r4
 8002116:	2b00      	cmp	r3, #0
 8002118:	bf0c      	ite	eq
 800211a:	2301      	moveq	r3, #1
 800211c:	2300      	movne	r3, #0
 800211e:	b2db      	uxtb	r3, r3
 8002120:	e008      	b.n	8002134 <HAL_ADC_ConfigChannel+0x41c>
 8002122:	4837      	ldr	r0, [pc, #220]	@ (8002200 <HAL_ADC_ConfigChannel+0x4e8>)
 8002124:	f7ff f8ec 	bl	8001300 <LL_ADC_IsEnabled>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	bf0c      	ite	eq
 800212e:	2301      	moveq	r3, #1
 8002130:	2300      	movne	r3, #0
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80b3 	beq.w	80022a0 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a31      	ldr	r2, [pc, #196]	@ (8002204 <HAL_ADC_ConfigChannel+0x4ec>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d165      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x4f8>
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d160      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a2b      	ldr	r2, [pc, #172]	@ (8002200 <HAL_ADC_ConfigChannel+0x4e8>)
 8002154:	4293      	cmp	r3, r2
 8002156:	f040 80b6 	bne.w	80022c6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a13      	ldr	r2, [pc, #76]	@ (80021ac <HAL_ADC_ConfigChannel+0x494>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d004      	beq.n	800216e <HAL_ADC_ConfigChannel+0x456>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a22      	ldr	r2, [pc, #136]	@ (80021f4 <HAL_ADC_ConfigChannel+0x4dc>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d101      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x45a>
 800216e:	4a22      	ldr	r2, [pc, #136]	@ (80021f8 <HAL_ADC_ConfigChannel+0x4e0>)
 8002170:	e000      	b.n	8002174 <HAL_ADC_ConfigChannel+0x45c>
 8002172:	4a22      	ldr	r2, [pc, #136]	@ (80021fc <HAL_ADC_ConfigChannel+0x4e4>)
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800217a:	4619      	mov	r1, r3
 800217c:	4610      	mov	r0, r2
 800217e:	f7fe fee4 	bl	8000f4a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002182:	4b21      	ldr	r3, [pc, #132]	@ (8002208 <HAL_ADC_ConfigChannel+0x4f0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	099b      	lsrs	r3, r3, #6
 8002188:	4a20      	ldr	r2, [pc, #128]	@ (800220c <HAL_ADC_ConfigChannel+0x4f4>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	099b      	lsrs	r3, r3, #6
 8002190:	3301      	adds	r3, #1
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002196:	e002      	b.n	800219e <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	3b01      	subs	r3, #1
 800219c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f9      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021a4:	e08f      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x5ae>
 80021a6:	bf00      	nop
 80021a8:	47ff0000 	.word	0x47ff0000
 80021ac:	40022000 	.word	0x40022000
 80021b0:	04300002 	.word	0x04300002
 80021b4:	08600004 	.word	0x08600004
 80021b8:	0c900008 	.word	0x0c900008
 80021bc:	10c00010 	.word	0x10c00010
 80021c0:	14f00020 	.word	0x14f00020
 80021c4:	2a000400 	.word	0x2a000400
 80021c8:	2e300800 	.word	0x2e300800
 80021cc:	32601000 	.word	0x32601000
 80021d0:	43210000 	.word	0x43210000
 80021d4:	4b840000 	.word	0x4b840000
 80021d8:	4fb80000 	.word	0x4fb80000
 80021dc:	47520000 	.word	0x47520000
 80021e0:	36902000 	.word	0x36902000
 80021e4:	25b00200 	.word	0x25b00200
 80021e8:	21800100 	.word	0x21800100
 80021ec:	1d500080 	.word	0x1d500080
 80021f0:	19200040 	.word	0x19200040
 80021f4:	40022100 	.word	0x40022100
 80021f8:	40022300 	.word	0x40022300
 80021fc:	58026300 	.word	0x58026300
 8002200:	58026000 	.word	0x58026000
 8002204:	cb840000 	.word	0xcb840000
 8002208:	24000000 	.word	0x24000000
 800220c:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a31      	ldr	r2, [pc, #196]	@ (80022dc <HAL_ADC_ConfigChannel+0x5c4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d11e      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x540>
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d119      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a2d      	ldr	r2, [pc, #180]	@ (80022e0 <HAL_ADC_ConfigChannel+0x5c8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d14b      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a2c      	ldr	r2, [pc, #176]	@ (80022e4 <HAL_ADC_ConfigChannel+0x5cc>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d004      	beq.n	8002242 <HAL_ADC_ConfigChannel+0x52a>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a2a      	ldr	r2, [pc, #168]	@ (80022e8 <HAL_ADC_ConfigChannel+0x5d0>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d101      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x52e>
 8002242:	4a2a      	ldr	r2, [pc, #168]	@ (80022ec <HAL_ADC_ConfigChannel+0x5d4>)
 8002244:	e000      	b.n	8002248 <HAL_ADC_ConfigChannel+0x530>
 8002246:	4a2a      	ldr	r2, [pc, #168]	@ (80022f0 <HAL_ADC_ConfigChannel+0x5d8>)
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800224e:	4619      	mov	r1, r3
 8002250:	4610      	mov	r0, r2
 8002252:	f7fe fe7a 	bl	8000f4a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002256:	e036      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a25      	ldr	r2, [pc, #148]	@ (80022f4 <HAL_ADC_ConfigChannel+0x5dc>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d131      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x5ae>
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d12c      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a1b      	ldr	r2, [pc, #108]	@ (80022e0 <HAL_ADC_ConfigChannel+0x5c8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d127      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a1a      	ldr	r2, [pc, #104]	@ (80022e4 <HAL_ADC_ConfigChannel+0x5cc>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d004      	beq.n	800228a <HAL_ADC_ConfigChannel+0x572>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a18      	ldr	r2, [pc, #96]	@ (80022e8 <HAL_ADC_ConfigChannel+0x5d0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d101      	bne.n	800228e <HAL_ADC_ConfigChannel+0x576>
 800228a:	4a18      	ldr	r2, [pc, #96]	@ (80022ec <HAL_ADC_ConfigChannel+0x5d4>)
 800228c:	e000      	b.n	8002290 <HAL_ADC_ConfigChannel+0x578>
 800228e:	4a18      	ldr	r2, [pc, #96]	@ (80022f0 <HAL_ADC_ConfigChannel+0x5d8>)
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002296:	4619      	mov	r1, r3
 8002298:	4610      	mov	r0, r2
 800229a:	f7fe fe56 	bl	8000f4a <LL_ADC_SetCommonPathInternalCh>
 800229e:	e012      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a4:	f043 0220 	orr.w	r2, r3, #32
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80022b2:	e008      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b8:	f043 0220 	orr.w	r2, r3, #32
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80022ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3734      	adds	r7, #52	@ 0x34
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd90      	pop	{r4, r7, pc}
 80022da:	bf00      	nop
 80022dc:	c7520000 	.word	0xc7520000
 80022e0:	58026000 	.word	0x58026000
 80022e4:	40022000 	.word	0x40022000
 80022e8:	40022100 	.word	0x40022100
 80022ec:	40022300 	.word	0x40022300
 80022f0:	58026300 	.word	0x58026300
 80022f4:	cfb80000 	.word	0xcfb80000

080022f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe fffb 	bl	8001300 <LL_ADC_IsEnabled>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d16e      	bne.n	80023ee <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	4b38      	ldr	r3, [pc, #224]	@ (80023f8 <ADC_Enable+0x100>)
 8002318:	4013      	ands	r3, r2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00d      	beq.n	800233a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002322:	f043 0210 	orr.w	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232e:	f043 0201 	orr.w	r2, r3, #1
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e05a      	b.n	80023f0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe ffca 	bl	80012d8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002344:	f7fe fdd6 	bl	8000ef4 <HAL_GetTick>
 8002348:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a2b      	ldr	r2, [pc, #172]	@ (80023fc <ADC_Enable+0x104>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d004      	beq.n	800235e <ADC_Enable+0x66>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a29      	ldr	r2, [pc, #164]	@ (8002400 <ADC_Enable+0x108>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d101      	bne.n	8002362 <ADC_Enable+0x6a>
 800235e:	4b29      	ldr	r3, [pc, #164]	@ (8002404 <ADC_Enable+0x10c>)
 8002360:	e000      	b.n	8002364 <ADC_Enable+0x6c>
 8002362:	4b29      	ldr	r3, [pc, #164]	@ (8002408 <ADC_Enable+0x110>)
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe ff4d 	bl	8001204 <LL_ADC_GetMultimode>
 800236a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a23      	ldr	r2, [pc, #140]	@ (8002400 <ADC_Enable+0x108>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d002      	beq.n	800237c <ADC_Enable+0x84>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	e000      	b.n	800237e <ADC_Enable+0x86>
 800237c:	4b1f      	ldr	r3, [pc, #124]	@ (80023fc <ADC_Enable+0x104>)
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	4293      	cmp	r3, r2
 8002384:	d02c      	beq.n	80023e0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d130      	bne.n	80023ee <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800238c:	e028      	b.n	80023e0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe ffb4 	bl	8001300 <LL_ADC_IsEnabled>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d104      	bne.n	80023a8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe ff98 	bl	80012d8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023a8:	f7fe fda4 	bl	8000ef4 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d914      	bls.n	80023e0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d00d      	beq.n	80023e0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c8:	f043 0210 	orr.w	r2, r3, #16
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d4:	f043 0201 	orr.w	r2, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e007      	b.n	80023f0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d1cf      	bne.n	800238e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	8000003f 	.word	0x8000003f
 80023fc:	40022000 	.word	0x40022000
 8002400:	40022100 	.word	0x40022100
 8002404:	40022300 	.word	0x40022300
 8002408:	58026300 	.word	0x58026300

0800240c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002418:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800241e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002422:	2b00      	cmp	r3, #0
 8002424:	d14b      	bne.n	80024be <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800242a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0308 	and.w	r3, r3, #8
 800243c:	2b00      	cmp	r3, #0
 800243e:	d021      	beq.n	8002484 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe fe28 	bl	800109a <LL_ADC_REG_IsTriggerSourceSWStart>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d032      	beq.n	80024b6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d12b      	bne.n	80024b6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002462:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800246e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d11f      	bne.n	80024b6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800247a:	f043 0201 	orr.w	r2, r3, #1
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	655a      	str	r2, [r3, #84]	@ 0x54
 8002482:	e018      	b.n	80024b6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d111      	bne.n	80024b6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002496:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d105      	bne.n	80024b6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ae:	f043 0201 	orr.w	r2, r3, #1
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f7fe f818 	bl	80004ec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80024bc:	e00e      	b.n	80024dc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f7ff fc1a 	bl	8001d04 <HAL_ADC_ErrorCallback>
}
 80024d0:	e004      	b.n	80024dc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	4798      	blx	r3
}
 80024dc:	bf00      	nop
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f7ff fbf2 	bl	8001cdc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024f8:	bf00      	nop
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800250c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002512:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251e:	f043 0204 	orr.w	r2, r3, #4
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f7ff fbec 	bl	8001d04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a7a      	ldr	r2, [pc, #488]	@ (800272c <ADC_ConfigureBoostMode+0x1f8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d004      	beq.n	8002550 <ADC_ConfigureBoostMode+0x1c>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a79      	ldr	r2, [pc, #484]	@ (8002730 <ADC_ConfigureBoostMode+0x1fc>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d109      	bne.n	8002564 <ADC_ConfigureBoostMode+0x30>
 8002550:	4b78      	ldr	r3, [pc, #480]	@ (8002734 <ADC_ConfigureBoostMode+0x200>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf14      	ite	ne
 800255c:	2301      	movne	r3, #1
 800255e:	2300      	moveq	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	e008      	b.n	8002576 <ADC_ConfigureBoostMode+0x42>
 8002564:	4b74      	ldr	r3, [pc, #464]	@ (8002738 <ADC_ConfigureBoostMode+0x204>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800256c:	2b00      	cmp	r3, #0
 800256e:	bf14      	ite	ne
 8002570:	2301      	movne	r3, #1
 8002572:	2300      	moveq	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d01c      	beq.n	80025b4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800257a:	f003 fde7 	bl	800614c <HAL_RCC_GetHCLKFreq>
 800257e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002588:	d010      	beq.n	80025ac <ADC_ConfigureBoostMode+0x78>
 800258a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800258e:	d873      	bhi.n	8002678 <ADC_ConfigureBoostMode+0x144>
 8002590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002594:	d002      	beq.n	800259c <ADC_ConfigureBoostMode+0x68>
 8002596:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800259a:	d16d      	bne.n	8002678 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	0c1b      	lsrs	r3, r3, #16
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a8:	60fb      	str	r3, [r7, #12]
        break;
 80025aa:	e068      	b.n	800267e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	089b      	lsrs	r3, r3, #2
 80025b0:	60fb      	str	r3, [r7, #12]
        break;
 80025b2:	e064      	b.n	800267e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80025b4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80025b8:	f04f 0100 	mov.w	r1, #0
 80025bc:	f005 f856 	bl	800766c <HAL_RCCEx_GetPeriphCLKFreq>
 80025c0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80025ca:	d051      	beq.n	8002670 <ADC_ConfigureBoostMode+0x13c>
 80025cc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80025d0:	d854      	bhi.n	800267c <ADC_ConfigureBoostMode+0x148>
 80025d2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80025d6:	d047      	beq.n	8002668 <ADC_ConfigureBoostMode+0x134>
 80025d8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80025dc:	d84e      	bhi.n	800267c <ADC_ConfigureBoostMode+0x148>
 80025de:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80025e2:	d03d      	beq.n	8002660 <ADC_ConfigureBoostMode+0x12c>
 80025e4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80025e8:	d848      	bhi.n	800267c <ADC_ConfigureBoostMode+0x148>
 80025ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025ee:	d033      	beq.n	8002658 <ADC_ConfigureBoostMode+0x124>
 80025f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025f4:	d842      	bhi.n	800267c <ADC_ConfigureBoostMode+0x148>
 80025f6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80025fa:	d029      	beq.n	8002650 <ADC_ConfigureBoostMode+0x11c>
 80025fc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002600:	d83c      	bhi.n	800267c <ADC_ConfigureBoostMode+0x148>
 8002602:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002606:	d01a      	beq.n	800263e <ADC_ConfigureBoostMode+0x10a>
 8002608:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800260c:	d836      	bhi.n	800267c <ADC_ConfigureBoostMode+0x148>
 800260e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002612:	d014      	beq.n	800263e <ADC_ConfigureBoostMode+0x10a>
 8002614:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002618:	d830      	bhi.n	800267c <ADC_ConfigureBoostMode+0x148>
 800261a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800261e:	d00e      	beq.n	800263e <ADC_ConfigureBoostMode+0x10a>
 8002620:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002624:	d82a      	bhi.n	800267c <ADC_ConfigureBoostMode+0x148>
 8002626:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800262a:	d008      	beq.n	800263e <ADC_ConfigureBoostMode+0x10a>
 800262c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002630:	d824      	bhi.n	800267c <ADC_ConfigureBoostMode+0x148>
 8002632:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002636:	d002      	beq.n	800263e <ADC_ConfigureBoostMode+0x10a>
 8002638:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800263c:	d11e      	bne.n	800267c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	0c9b      	lsrs	r3, r3, #18
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	fbb2 f3f3 	udiv	r3, r2, r3
 800264c:	60fb      	str	r3, [r7, #12]
        break;
 800264e:	e016      	b.n	800267e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	091b      	lsrs	r3, r3, #4
 8002654:	60fb      	str	r3, [r7, #12]
        break;
 8002656:	e012      	b.n	800267e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	60fb      	str	r3, [r7, #12]
        break;
 800265e:	e00e      	b.n	800267e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	099b      	lsrs	r3, r3, #6
 8002664:	60fb      	str	r3, [r7, #12]
        break;
 8002666:	e00a      	b.n	800267e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	09db      	lsrs	r3, r3, #7
 800266c:	60fb      	str	r3, [r7, #12]
        break;
 800266e:	e006      	b.n	800267e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	0a1b      	lsrs	r3, r3, #8
 8002674:	60fb      	str	r3, [r7, #12]
        break;
 8002676:	e002      	b.n	800267e <ADC_ConfigureBoostMode+0x14a>
        break;
 8002678:	bf00      	nop
 800267a:	e000      	b.n	800267e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800267c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800267e:	f7fe fc45 	bl	8000f0c <HAL_GetREVID>
 8002682:	4603      	mov	r3, r0
 8002684:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002688:	4293      	cmp	r3, r2
 800268a:	d815      	bhi.n	80026b8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4a2b      	ldr	r2, [pc, #172]	@ (800273c <ADC_ConfigureBoostMode+0x208>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d908      	bls.n	80026a6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026a2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80026a4:	e03e      	b.n	8002724 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026b4:	609a      	str	r2, [r3, #8]
}
 80026b6:	e035      	b.n	8002724 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	085b      	lsrs	r3, r3, #1
 80026bc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002740 <ADC_ConfigureBoostMode+0x20c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d808      	bhi.n	80026d8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80026d4:	609a      	str	r2, [r3, #8]
}
 80026d6:	e025      	b.n	8002724 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4a1a      	ldr	r2, [pc, #104]	@ (8002744 <ADC_ConfigureBoostMode+0x210>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d80a      	bhi.n	80026f6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026f2:	609a      	str	r2, [r3, #8]
}
 80026f4:	e016      	b.n	8002724 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	4a13      	ldr	r2, [pc, #76]	@ (8002748 <ADC_ConfigureBoostMode+0x214>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d80a      	bhi.n	8002714 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002710:	609a      	str	r2, [r3, #8]
}
 8002712:	e007      	b.n	8002724 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002722:	609a      	str	r2, [r3, #8]
}
 8002724:	bf00      	nop
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40022000 	.word	0x40022000
 8002730:	40022100 	.word	0x40022100
 8002734:	40022300 	.word	0x40022300
 8002738:	58026300 	.word	0x58026300
 800273c:	01312d00 	.word	0x01312d00
 8002740:	005f5e10 	.word	0x005f5e10
 8002744:	00bebc20 	.word	0x00bebc20
 8002748:	017d7840 	.word	0x017d7840

0800274c <LL_ADC_IsEnabled>:
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b01      	cmp	r3, #1
 800275e:	d101      	bne.n	8002764 <LL_ADC_IsEnabled+0x18>
 8002760:	2301      	movs	r3, #1
 8002762:	e000      	b.n	8002766 <LL_ADC_IsEnabled+0x1a>
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <LL_ADC_REG_IsConversionOngoing>:
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	2b04      	cmp	r3, #4
 8002784:	d101      	bne.n	800278a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80027fc:	b590      	push	{r4, r7, lr}
 80027fe:	b09f      	sub	sp, #124	@ 0x7c
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002816:	2302      	movs	r3, #2
 8002818:	e0be      	b.n	8002998 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002822:	2300      	movs	r3, #0
 8002824:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002826:	2300      	movs	r3, #0
 8002828:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a5c      	ldr	r2, [pc, #368]	@ (80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d102      	bne.n	800283a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002834:	4b5b      	ldr	r3, [pc, #364]	@ (80029a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	e001      	b.n	800283e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800283a:	2300      	movs	r3, #0
 800283c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10b      	bne.n	800285c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002848:	f043 0220 	orr.w	r2, r3, #32
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e09d      	b.n	8002998 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff ff87 	bl	8002772 <LL_ADC_REG_IsConversionOngoing>
 8002864:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ff81 	bl	8002772 <LL_ADC_REG_IsConversionOngoing>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d17f      	bne.n	8002976 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002876:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002878:	2b00      	cmp	r3, #0
 800287a:	d17c      	bne.n	8002976 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a47      	ldr	r2, [pc, #284]	@ (80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d004      	beq.n	8002890 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a46      	ldr	r2, [pc, #280]	@ (80029a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d101      	bne.n	8002894 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002890:	4b45      	ldr	r3, [pc, #276]	@ (80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002892:	e000      	b.n	8002896 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002894:	4b45      	ldr	r3, [pc, #276]	@ (80029ac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002896:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d039      	beq.n	8002914 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80028a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	431a      	orrs	r2, r3
 80028ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028b0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a3a      	ldr	r2, [pc, #232]	@ (80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d004      	beq.n	80028c6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a38      	ldr	r2, [pc, #224]	@ (80029a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d10e      	bne.n	80028e4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80028c6:	4836      	ldr	r0, [pc, #216]	@ (80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80028c8:	f7ff ff40 	bl	800274c <LL_ADC_IsEnabled>
 80028cc:	4604      	mov	r4, r0
 80028ce:	4835      	ldr	r0, [pc, #212]	@ (80029a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80028d0:	f7ff ff3c 	bl	800274c <LL_ADC_IsEnabled>
 80028d4:	4603      	mov	r3, r0
 80028d6:	4323      	orrs	r3, r4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	bf0c      	ite	eq
 80028dc:	2301      	moveq	r3, #1
 80028de:	2300      	movne	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	e008      	b.n	80028f6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80028e4:	4832      	ldr	r0, [pc, #200]	@ (80029b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80028e6:	f7ff ff31 	bl	800274c <LL_ADC_IsEnabled>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	bf0c      	ite	eq
 80028f0:	2301      	moveq	r3, #1
 80028f2:	2300      	movne	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d047      	beq.n	800298a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80028fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	4b2d      	ldr	r3, [pc, #180]	@ (80029b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002900:	4013      	ands	r3, r2
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	6811      	ldr	r1, [r2, #0]
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	6892      	ldr	r2, [r2, #8]
 800290a:	430a      	orrs	r2, r1
 800290c:	431a      	orrs	r2, r3
 800290e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002910:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002912:	e03a      	b.n	800298a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002914:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800291c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800291e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a1e      	ldr	r2, [pc, #120]	@ (80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d004      	beq.n	8002934 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a1d      	ldr	r2, [pc, #116]	@ (80029a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d10e      	bne.n	8002952 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002934:	481a      	ldr	r0, [pc, #104]	@ (80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002936:	f7ff ff09 	bl	800274c <LL_ADC_IsEnabled>
 800293a:	4604      	mov	r4, r0
 800293c:	4819      	ldr	r0, [pc, #100]	@ (80029a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800293e:	f7ff ff05 	bl	800274c <LL_ADC_IsEnabled>
 8002942:	4603      	mov	r3, r0
 8002944:	4323      	orrs	r3, r4
 8002946:	2b00      	cmp	r3, #0
 8002948:	bf0c      	ite	eq
 800294a:	2301      	moveq	r3, #1
 800294c:	2300      	movne	r3, #0
 800294e:	b2db      	uxtb	r3, r3
 8002950:	e008      	b.n	8002964 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002952:	4817      	ldr	r0, [pc, #92]	@ (80029b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002954:	f7ff fefa 	bl	800274c <LL_ADC_IsEnabled>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	bf0c      	ite	eq
 800295e:	2301      	moveq	r3, #1
 8002960:	2300      	movne	r3, #0
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d010      	beq.n	800298a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002968:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	4b11      	ldr	r3, [pc, #68]	@ (80029b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800296e:	4013      	ands	r3, r2
 8002970:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002972:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002974:	e009      	b.n	800298a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800297a:	f043 0220 	orr.w	r2, r3, #32
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002988:	e000      	b.n	800298c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800298a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002994:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002998:	4618      	mov	r0, r3
 800299a:	377c      	adds	r7, #124	@ 0x7c
 800299c:	46bd      	mov	sp, r7
 800299e:	bd90      	pop	{r4, r7, pc}
 80029a0:	40022000 	.word	0x40022000
 80029a4:	40022100 	.word	0x40022100
 80029a8:	40022300 	.word	0x40022300
 80029ac:	58026300 	.word	0x58026300
 80029b0:	58026000 	.word	0x58026000
 80029b4:	fffff0e0 	.word	0xfffff0e0

080029b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029c8:	4b0b      	ldr	r3, [pc, #44]	@ (80029f8 <__NVIC_SetPriorityGrouping+0x40>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029d4:	4013      	ands	r3, r2
 80029d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029e0:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <__NVIC_SetPriorityGrouping+0x44>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029e6:	4a04      	ldr	r2, [pc, #16]	@ (80029f8 <__NVIC_SetPriorityGrouping+0x40>)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	60d3      	str	r3, [r2, #12]
}
 80029ec:	bf00      	nop
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	e000ed00 	.word	0xe000ed00
 80029fc:	05fa0000 	.word	0x05fa0000

08002a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a04:	4b04      	ldr	r3, [pc, #16]	@ (8002a18 <__NVIC_GetPriorityGrouping+0x18>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	0a1b      	lsrs	r3, r3, #8
 8002a0a:	f003 0307 	and.w	r3, r3, #7
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000ed00 	.word	0xe000ed00

08002a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	db0b      	blt.n	8002a46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a2e:	88fb      	ldrh	r3, [r7, #6]
 8002a30:	f003 021f 	and.w	r2, r3, #31
 8002a34:	4907      	ldr	r1, [pc, #28]	@ (8002a54 <__NVIC_EnableIRQ+0x38>)
 8002a36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a3a:	095b      	lsrs	r3, r3, #5
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	e000e100 	.word	0xe000e100

08002a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	6039      	str	r1, [r7, #0]
 8002a62:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	db0a      	blt.n	8002a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	490c      	ldr	r1, [pc, #48]	@ (8002aa4 <__NVIC_SetPriority+0x4c>)
 8002a72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a76:	0112      	lsls	r2, r2, #4
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a80:	e00a      	b.n	8002a98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	4908      	ldr	r1, [pc, #32]	@ (8002aa8 <__NVIC_SetPriority+0x50>)
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	3b04      	subs	r3, #4
 8002a90:	0112      	lsls	r2, r2, #4
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	440b      	add	r3, r1
 8002a96:	761a      	strb	r2, [r3, #24]
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	e000e100 	.word	0xe000e100
 8002aa8:	e000ed00 	.word	0xe000ed00

08002aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b089      	sub	sp, #36	@ 0x24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f1c3 0307 	rsb	r3, r3, #7
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	bf28      	it	cs
 8002aca:	2304      	movcs	r3, #4
 8002acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	2b06      	cmp	r3, #6
 8002ad4:	d902      	bls.n	8002adc <NVIC_EncodePriority+0x30>
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3b03      	subs	r3, #3
 8002ada:	e000      	b.n	8002ade <NVIC_EncodePriority+0x32>
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43da      	mvns	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	401a      	ands	r2, r3
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	fa01 f303 	lsl.w	r3, r1, r3
 8002afe:	43d9      	mvns	r1, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b04:	4313      	orrs	r3, r2
         );
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3724      	adds	r7, #36	@ 0x24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b24:	d301      	bcc.n	8002b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b26:	2301      	movs	r3, #1
 8002b28:	e00f      	b.n	8002b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b54 <SysTick_Config+0x40>)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b32:	210f      	movs	r1, #15
 8002b34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b38:	f7ff ff8e 	bl	8002a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b3c:	4b05      	ldr	r3, [pc, #20]	@ (8002b54 <SysTick_Config+0x40>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b42:	4b04      	ldr	r3, [pc, #16]	@ (8002b54 <SysTick_Config+0x40>)
 8002b44:	2207      	movs	r2, #7
 8002b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	e000e010 	.word	0xe000e010

08002b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff ff29 	bl	80029b8 <__NVIC_SetPriorityGrouping>
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b086      	sub	sp, #24
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	4603      	mov	r3, r0
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
 8002b7a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b7c:	f7ff ff40 	bl	8002a00 <__NVIC_GetPriorityGrouping>
 8002b80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	68b9      	ldr	r1, [r7, #8]
 8002b86:	6978      	ldr	r0, [r7, #20]
 8002b88:	f7ff ff90 	bl	8002aac <NVIC_EncodePriority>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff ff5f 	bl	8002a58 <__NVIC_SetPriority>
}
 8002b9a:	bf00      	nop
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	4603      	mov	r3, r0
 8002baa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff ff33 	bl	8002a1c <__NVIC_EnableIRQ>
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff ffa4 	bl	8002b14 <SysTick_Config>
 8002bcc:	4603      	mov	r3, r0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002be0:	f7fe f988 	bl	8000ef4 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e316      	b.n	800321e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a66      	ldr	r2, [pc, #408]	@ (8002d90 <HAL_DMA_Init+0x1b8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d04a      	beq.n	8002c90 <HAL_DMA_Init+0xb8>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a65      	ldr	r2, [pc, #404]	@ (8002d94 <HAL_DMA_Init+0x1bc>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d045      	beq.n	8002c90 <HAL_DMA_Init+0xb8>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a63      	ldr	r2, [pc, #396]	@ (8002d98 <HAL_DMA_Init+0x1c0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d040      	beq.n	8002c90 <HAL_DMA_Init+0xb8>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a62      	ldr	r2, [pc, #392]	@ (8002d9c <HAL_DMA_Init+0x1c4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d03b      	beq.n	8002c90 <HAL_DMA_Init+0xb8>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a60      	ldr	r2, [pc, #384]	@ (8002da0 <HAL_DMA_Init+0x1c8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d036      	beq.n	8002c90 <HAL_DMA_Init+0xb8>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a5f      	ldr	r2, [pc, #380]	@ (8002da4 <HAL_DMA_Init+0x1cc>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d031      	beq.n	8002c90 <HAL_DMA_Init+0xb8>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a5d      	ldr	r2, [pc, #372]	@ (8002da8 <HAL_DMA_Init+0x1d0>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d02c      	beq.n	8002c90 <HAL_DMA_Init+0xb8>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a5c      	ldr	r2, [pc, #368]	@ (8002dac <HAL_DMA_Init+0x1d4>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d027      	beq.n	8002c90 <HAL_DMA_Init+0xb8>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a5a      	ldr	r2, [pc, #360]	@ (8002db0 <HAL_DMA_Init+0x1d8>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d022      	beq.n	8002c90 <HAL_DMA_Init+0xb8>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a59      	ldr	r2, [pc, #356]	@ (8002db4 <HAL_DMA_Init+0x1dc>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d01d      	beq.n	8002c90 <HAL_DMA_Init+0xb8>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a57      	ldr	r2, [pc, #348]	@ (8002db8 <HAL_DMA_Init+0x1e0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d018      	beq.n	8002c90 <HAL_DMA_Init+0xb8>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a56      	ldr	r2, [pc, #344]	@ (8002dbc <HAL_DMA_Init+0x1e4>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d013      	beq.n	8002c90 <HAL_DMA_Init+0xb8>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a54      	ldr	r2, [pc, #336]	@ (8002dc0 <HAL_DMA_Init+0x1e8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d00e      	beq.n	8002c90 <HAL_DMA_Init+0xb8>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a53      	ldr	r2, [pc, #332]	@ (8002dc4 <HAL_DMA_Init+0x1ec>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d009      	beq.n	8002c90 <HAL_DMA_Init+0xb8>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a51      	ldr	r2, [pc, #324]	@ (8002dc8 <HAL_DMA_Init+0x1f0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d004      	beq.n	8002c90 <HAL_DMA_Init+0xb8>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a50      	ldr	r2, [pc, #320]	@ (8002dcc <HAL_DMA_Init+0x1f4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d101      	bne.n	8002c94 <HAL_DMA_Init+0xbc>
 8002c90:	2301      	movs	r3, #1
 8002c92:	e000      	b.n	8002c96 <HAL_DMA_Init+0xbe>
 8002c94:	2300      	movs	r3, #0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 813b 	beq.w	8002f12 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a37      	ldr	r2, [pc, #220]	@ (8002d90 <HAL_DMA_Init+0x1b8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d04a      	beq.n	8002d4c <HAL_DMA_Init+0x174>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a36      	ldr	r2, [pc, #216]	@ (8002d94 <HAL_DMA_Init+0x1bc>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d045      	beq.n	8002d4c <HAL_DMA_Init+0x174>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a34      	ldr	r2, [pc, #208]	@ (8002d98 <HAL_DMA_Init+0x1c0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d040      	beq.n	8002d4c <HAL_DMA_Init+0x174>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a33      	ldr	r2, [pc, #204]	@ (8002d9c <HAL_DMA_Init+0x1c4>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d03b      	beq.n	8002d4c <HAL_DMA_Init+0x174>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a31      	ldr	r2, [pc, #196]	@ (8002da0 <HAL_DMA_Init+0x1c8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d036      	beq.n	8002d4c <HAL_DMA_Init+0x174>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a30      	ldr	r2, [pc, #192]	@ (8002da4 <HAL_DMA_Init+0x1cc>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d031      	beq.n	8002d4c <HAL_DMA_Init+0x174>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a2e      	ldr	r2, [pc, #184]	@ (8002da8 <HAL_DMA_Init+0x1d0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d02c      	beq.n	8002d4c <HAL_DMA_Init+0x174>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a2d      	ldr	r2, [pc, #180]	@ (8002dac <HAL_DMA_Init+0x1d4>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d027      	beq.n	8002d4c <HAL_DMA_Init+0x174>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a2b      	ldr	r2, [pc, #172]	@ (8002db0 <HAL_DMA_Init+0x1d8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d022      	beq.n	8002d4c <HAL_DMA_Init+0x174>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a2a      	ldr	r2, [pc, #168]	@ (8002db4 <HAL_DMA_Init+0x1dc>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d01d      	beq.n	8002d4c <HAL_DMA_Init+0x174>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a28      	ldr	r2, [pc, #160]	@ (8002db8 <HAL_DMA_Init+0x1e0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d018      	beq.n	8002d4c <HAL_DMA_Init+0x174>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a27      	ldr	r2, [pc, #156]	@ (8002dbc <HAL_DMA_Init+0x1e4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d013      	beq.n	8002d4c <HAL_DMA_Init+0x174>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a25      	ldr	r2, [pc, #148]	@ (8002dc0 <HAL_DMA_Init+0x1e8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d00e      	beq.n	8002d4c <HAL_DMA_Init+0x174>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a24      	ldr	r2, [pc, #144]	@ (8002dc4 <HAL_DMA_Init+0x1ec>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d009      	beq.n	8002d4c <HAL_DMA_Init+0x174>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a22      	ldr	r2, [pc, #136]	@ (8002dc8 <HAL_DMA_Init+0x1f0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d004      	beq.n	8002d4c <HAL_DMA_Init+0x174>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a21      	ldr	r2, [pc, #132]	@ (8002dcc <HAL_DMA_Init+0x1f4>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d108      	bne.n	8002d5e <HAL_DMA_Init+0x186>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0201 	bic.w	r2, r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	e007      	b.n	8002d6e <HAL_DMA_Init+0x196>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0201 	bic.w	r2, r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002d6e:	e02f      	b.n	8002dd0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d70:	f7fe f8c0 	bl	8000ef4 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b05      	cmp	r3, #5
 8002d7c:	d928      	bls.n	8002dd0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2220      	movs	r2, #32
 8002d82:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2203      	movs	r2, #3
 8002d88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e246      	b.n	800321e <HAL_DMA_Init+0x646>
 8002d90:	40020010 	.word	0x40020010
 8002d94:	40020028 	.word	0x40020028
 8002d98:	40020040 	.word	0x40020040
 8002d9c:	40020058 	.word	0x40020058
 8002da0:	40020070 	.word	0x40020070
 8002da4:	40020088 	.word	0x40020088
 8002da8:	400200a0 	.word	0x400200a0
 8002dac:	400200b8 	.word	0x400200b8
 8002db0:	40020410 	.word	0x40020410
 8002db4:	40020428 	.word	0x40020428
 8002db8:	40020440 	.word	0x40020440
 8002dbc:	40020458 	.word	0x40020458
 8002dc0:	40020470 	.word	0x40020470
 8002dc4:	40020488 	.word	0x40020488
 8002dc8:	400204a0 	.word	0x400204a0
 8002dcc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1c8      	bne.n	8002d70 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	4b83      	ldr	r3, [pc, #524]	@ (8002ff8 <HAL_DMA_Init+0x420>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002df6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e02:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e0e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d107      	bne.n	8002e34 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002e34:	4b71      	ldr	r3, [pc, #452]	@ (8002ffc <HAL_DMA_Init+0x424>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4b71      	ldr	r3, [pc, #452]	@ (8003000 <HAL_DMA_Init+0x428>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e40:	d328      	bcc.n	8002e94 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b28      	cmp	r3, #40	@ 0x28
 8002e48:	d903      	bls.n	8002e52 <HAL_DMA_Init+0x27a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e50:	d917      	bls.n	8002e82 <HAL_DMA_Init+0x2aa>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b3e      	cmp	r3, #62	@ 0x3e
 8002e58:	d903      	bls.n	8002e62 <HAL_DMA_Init+0x28a>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b42      	cmp	r3, #66	@ 0x42
 8002e60:	d90f      	bls.n	8002e82 <HAL_DMA_Init+0x2aa>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b46      	cmp	r3, #70	@ 0x46
 8002e68:	d903      	bls.n	8002e72 <HAL_DMA_Init+0x29a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b48      	cmp	r3, #72	@ 0x48
 8002e70:	d907      	bls.n	8002e82 <HAL_DMA_Init+0x2aa>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b4e      	cmp	r3, #78	@ 0x4e
 8002e78:	d905      	bls.n	8002e86 <HAL_DMA_Init+0x2ae>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b52      	cmp	r3, #82	@ 0x52
 8002e80:	d801      	bhi.n	8002e86 <HAL_DMA_Init+0x2ae>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <HAL_DMA_Init+0x2b0>
 8002e86:	2300      	movs	r3, #0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e92:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f023 0307 	bic.w	r3, r3, #7
 8002eaa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d117      	bne.n	8002eee <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00e      	beq.n	8002eee <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f001 fdcf 	bl	8004a74 <DMA_CheckFifoParam>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d008      	beq.n	8002eee <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2240      	movs	r2, #64	@ 0x40
 8002ee0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e197      	b.n	800321e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f001 fd0a 	bl	8004910 <DMA_CalcBaseAndBitshift>
 8002efc:	4603      	mov	r3, r0
 8002efe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f04:	f003 031f 	and.w	r3, r3, #31
 8002f08:	223f      	movs	r2, #63	@ 0x3f
 8002f0a:	409a      	lsls	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	e0cd      	b.n	80030ae <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a3b      	ldr	r2, [pc, #236]	@ (8003004 <HAL_DMA_Init+0x42c>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d022      	beq.n	8002f62 <HAL_DMA_Init+0x38a>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a39      	ldr	r2, [pc, #228]	@ (8003008 <HAL_DMA_Init+0x430>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d01d      	beq.n	8002f62 <HAL_DMA_Init+0x38a>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a38      	ldr	r2, [pc, #224]	@ (800300c <HAL_DMA_Init+0x434>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d018      	beq.n	8002f62 <HAL_DMA_Init+0x38a>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a36      	ldr	r2, [pc, #216]	@ (8003010 <HAL_DMA_Init+0x438>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d013      	beq.n	8002f62 <HAL_DMA_Init+0x38a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a35      	ldr	r2, [pc, #212]	@ (8003014 <HAL_DMA_Init+0x43c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d00e      	beq.n	8002f62 <HAL_DMA_Init+0x38a>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a33      	ldr	r2, [pc, #204]	@ (8003018 <HAL_DMA_Init+0x440>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d009      	beq.n	8002f62 <HAL_DMA_Init+0x38a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a32      	ldr	r2, [pc, #200]	@ (800301c <HAL_DMA_Init+0x444>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d004      	beq.n	8002f62 <HAL_DMA_Init+0x38a>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a30      	ldr	r2, [pc, #192]	@ (8003020 <HAL_DMA_Init+0x448>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d101      	bne.n	8002f66 <HAL_DMA_Init+0x38e>
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <HAL_DMA_Init+0x390>
 8002f66:	2300      	movs	r3, #0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 8097 	beq.w	800309c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a24      	ldr	r2, [pc, #144]	@ (8003004 <HAL_DMA_Init+0x42c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d021      	beq.n	8002fbc <HAL_DMA_Init+0x3e4>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a22      	ldr	r2, [pc, #136]	@ (8003008 <HAL_DMA_Init+0x430>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d01c      	beq.n	8002fbc <HAL_DMA_Init+0x3e4>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a21      	ldr	r2, [pc, #132]	@ (800300c <HAL_DMA_Init+0x434>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d017      	beq.n	8002fbc <HAL_DMA_Init+0x3e4>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a1f      	ldr	r2, [pc, #124]	@ (8003010 <HAL_DMA_Init+0x438>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d012      	beq.n	8002fbc <HAL_DMA_Init+0x3e4>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8003014 <HAL_DMA_Init+0x43c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d00d      	beq.n	8002fbc <HAL_DMA_Init+0x3e4>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8003018 <HAL_DMA_Init+0x440>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d008      	beq.n	8002fbc <HAL_DMA_Init+0x3e4>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a1b      	ldr	r2, [pc, #108]	@ (800301c <HAL_DMA_Init+0x444>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d003      	beq.n	8002fbc <HAL_DMA_Init+0x3e4>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a19      	ldr	r2, [pc, #100]	@ (8003020 <HAL_DMA_Init+0x448>)
 8002fba:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	4b13      	ldr	r3, [pc, #76]	@ (8003024 <HAL_DMA_Init+0x44c>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b40      	cmp	r3, #64	@ 0x40
 8002fe2:	d021      	beq.n	8003028 <HAL_DMA_Init+0x450>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b80      	cmp	r3, #128	@ 0x80
 8002fea:	d102      	bne.n	8002ff2 <HAL_DMA_Init+0x41a>
 8002fec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ff0:	e01b      	b.n	800302a <HAL_DMA_Init+0x452>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	e019      	b.n	800302a <HAL_DMA_Init+0x452>
 8002ff6:	bf00      	nop
 8002ff8:	fe10803f 	.word	0xfe10803f
 8002ffc:	5c001000 	.word	0x5c001000
 8003000:	ffff0000 	.word	0xffff0000
 8003004:	58025408 	.word	0x58025408
 8003008:	5802541c 	.word	0x5802541c
 800300c:	58025430 	.word	0x58025430
 8003010:	58025444 	.word	0x58025444
 8003014:	58025458 	.word	0x58025458
 8003018:	5802546c 	.word	0x5802546c
 800301c:	58025480 	.word	0x58025480
 8003020:	58025494 	.word	0x58025494
 8003024:	fffe000f 	.word	0xfffe000f
 8003028:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	68d2      	ldr	r2, [r2, #12]
 800302e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003030:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003038:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003040:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003048:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003050:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003058:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	4313      	orrs	r3, r2
 800305e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	4b6e      	ldr	r3, [pc, #440]	@ (8003228 <HAL_DMA_Init+0x650>)
 8003070:	4413      	add	r3, r2
 8003072:	4a6e      	ldr	r2, [pc, #440]	@ (800322c <HAL_DMA_Init+0x654>)
 8003074:	fba2 2303 	umull	r2, r3, r2, r3
 8003078:	091b      	lsrs	r3, r3, #4
 800307a:	009a      	lsls	r2, r3, #2
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f001 fc45 	bl	8004910 <DMA_CalcBaseAndBitshift>
 8003086:	4603      	mov	r3, r0
 8003088:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308e:	f003 031f 	and.w	r3, r3, #31
 8003092:	2201      	movs	r2, #1
 8003094:	409a      	lsls	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	605a      	str	r2, [r3, #4]
 800309a:	e008      	b.n	80030ae <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2240      	movs	r2, #64	@ 0x40
 80030a0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2203      	movs	r2, #3
 80030a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e0b7      	b.n	800321e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a5f      	ldr	r2, [pc, #380]	@ (8003230 <HAL_DMA_Init+0x658>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d072      	beq.n	800319e <HAL_DMA_Init+0x5c6>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a5d      	ldr	r2, [pc, #372]	@ (8003234 <HAL_DMA_Init+0x65c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d06d      	beq.n	800319e <HAL_DMA_Init+0x5c6>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a5c      	ldr	r2, [pc, #368]	@ (8003238 <HAL_DMA_Init+0x660>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d068      	beq.n	800319e <HAL_DMA_Init+0x5c6>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a5a      	ldr	r2, [pc, #360]	@ (800323c <HAL_DMA_Init+0x664>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d063      	beq.n	800319e <HAL_DMA_Init+0x5c6>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a59      	ldr	r2, [pc, #356]	@ (8003240 <HAL_DMA_Init+0x668>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d05e      	beq.n	800319e <HAL_DMA_Init+0x5c6>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a57      	ldr	r2, [pc, #348]	@ (8003244 <HAL_DMA_Init+0x66c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d059      	beq.n	800319e <HAL_DMA_Init+0x5c6>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a56      	ldr	r2, [pc, #344]	@ (8003248 <HAL_DMA_Init+0x670>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d054      	beq.n	800319e <HAL_DMA_Init+0x5c6>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a54      	ldr	r2, [pc, #336]	@ (800324c <HAL_DMA_Init+0x674>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d04f      	beq.n	800319e <HAL_DMA_Init+0x5c6>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a53      	ldr	r2, [pc, #332]	@ (8003250 <HAL_DMA_Init+0x678>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d04a      	beq.n	800319e <HAL_DMA_Init+0x5c6>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a51      	ldr	r2, [pc, #324]	@ (8003254 <HAL_DMA_Init+0x67c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d045      	beq.n	800319e <HAL_DMA_Init+0x5c6>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a50      	ldr	r2, [pc, #320]	@ (8003258 <HAL_DMA_Init+0x680>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d040      	beq.n	800319e <HAL_DMA_Init+0x5c6>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a4e      	ldr	r2, [pc, #312]	@ (800325c <HAL_DMA_Init+0x684>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d03b      	beq.n	800319e <HAL_DMA_Init+0x5c6>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a4d      	ldr	r2, [pc, #308]	@ (8003260 <HAL_DMA_Init+0x688>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d036      	beq.n	800319e <HAL_DMA_Init+0x5c6>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a4b      	ldr	r2, [pc, #300]	@ (8003264 <HAL_DMA_Init+0x68c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d031      	beq.n	800319e <HAL_DMA_Init+0x5c6>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a4a      	ldr	r2, [pc, #296]	@ (8003268 <HAL_DMA_Init+0x690>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d02c      	beq.n	800319e <HAL_DMA_Init+0x5c6>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a48      	ldr	r2, [pc, #288]	@ (800326c <HAL_DMA_Init+0x694>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d027      	beq.n	800319e <HAL_DMA_Init+0x5c6>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a47      	ldr	r2, [pc, #284]	@ (8003270 <HAL_DMA_Init+0x698>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d022      	beq.n	800319e <HAL_DMA_Init+0x5c6>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a45      	ldr	r2, [pc, #276]	@ (8003274 <HAL_DMA_Init+0x69c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d01d      	beq.n	800319e <HAL_DMA_Init+0x5c6>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a44      	ldr	r2, [pc, #272]	@ (8003278 <HAL_DMA_Init+0x6a0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d018      	beq.n	800319e <HAL_DMA_Init+0x5c6>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a42      	ldr	r2, [pc, #264]	@ (800327c <HAL_DMA_Init+0x6a4>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d013      	beq.n	800319e <HAL_DMA_Init+0x5c6>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a41      	ldr	r2, [pc, #260]	@ (8003280 <HAL_DMA_Init+0x6a8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d00e      	beq.n	800319e <HAL_DMA_Init+0x5c6>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a3f      	ldr	r2, [pc, #252]	@ (8003284 <HAL_DMA_Init+0x6ac>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d009      	beq.n	800319e <HAL_DMA_Init+0x5c6>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a3e      	ldr	r2, [pc, #248]	@ (8003288 <HAL_DMA_Init+0x6b0>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d004      	beq.n	800319e <HAL_DMA_Init+0x5c6>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a3c      	ldr	r2, [pc, #240]	@ (800328c <HAL_DMA_Init+0x6b4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d101      	bne.n	80031a2 <HAL_DMA_Init+0x5ca>
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <HAL_DMA_Init+0x5cc>
 80031a2:	2300      	movs	r3, #0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d032      	beq.n	800320e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f001 fcdf 	bl	8004b6c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	2b80      	cmp	r3, #128	@ 0x80
 80031b4:	d102      	bne.n	80031bc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80031d0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d010      	beq.n	80031fc <HAL_DMA_Init+0x624>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d80c      	bhi.n	80031fc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f001 fd5c 	bl	8004ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	e008      	b.n	800320e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	a7fdabf8 	.word	0xa7fdabf8
 800322c:	cccccccd 	.word	0xcccccccd
 8003230:	40020010 	.word	0x40020010
 8003234:	40020028 	.word	0x40020028
 8003238:	40020040 	.word	0x40020040
 800323c:	40020058 	.word	0x40020058
 8003240:	40020070 	.word	0x40020070
 8003244:	40020088 	.word	0x40020088
 8003248:	400200a0 	.word	0x400200a0
 800324c:	400200b8 	.word	0x400200b8
 8003250:	40020410 	.word	0x40020410
 8003254:	40020428 	.word	0x40020428
 8003258:	40020440 	.word	0x40020440
 800325c:	40020458 	.word	0x40020458
 8003260:	40020470 	.word	0x40020470
 8003264:	40020488 	.word	0x40020488
 8003268:	400204a0 	.word	0x400204a0
 800326c:	400204b8 	.word	0x400204b8
 8003270:	58025408 	.word	0x58025408
 8003274:	5802541c 	.word	0x5802541c
 8003278:	58025430 	.word	0x58025430
 800327c:	58025444 	.word	0x58025444
 8003280:	58025458 	.word	0x58025458
 8003284:	5802546c 	.word	0x5802546c
 8003288:	58025480 	.word	0x58025480
 800328c:	58025494 	.word	0x58025494

08003290 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
 800329c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e226      	b.n	80036fa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d101      	bne.n	80032ba <HAL_DMA_Start_IT+0x2a>
 80032b6:	2302      	movs	r3, #2
 80032b8:	e21f      	b.n	80036fa <HAL_DMA_Start_IT+0x46a>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	f040 820a 	bne.w	80036e4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a68      	ldr	r2, [pc, #416]	@ (8003484 <HAL_DMA_Start_IT+0x1f4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d04a      	beq.n	800337e <HAL_DMA_Start_IT+0xee>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a66      	ldr	r2, [pc, #408]	@ (8003488 <HAL_DMA_Start_IT+0x1f8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d045      	beq.n	800337e <HAL_DMA_Start_IT+0xee>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a65      	ldr	r2, [pc, #404]	@ (800348c <HAL_DMA_Start_IT+0x1fc>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d040      	beq.n	800337e <HAL_DMA_Start_IT+0xee>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a63      	ldr	r2, [pc, #396]	@ (8003490 <HAL_DMA_Start_IT+0x200>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d03b      	beq.n	800337e <HAL_DMA_Start_IT+0xee>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a62      	ldr	r2, [pc, #392]	@ (8003494 <HAL_DMA_Start_IT+0x204>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d036      	beq.n	800337e <HAL_DMA_Start_IT+0xee>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a60      	ldr	r2, [pc, #384]	@ (8003498 <HAL_DMA_Start_IT+0x208>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d031      	beq.n	800337e <HAL_DMA_Start_IT+0xee>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a5f      	ldr	r2, [pc, #380]	@ (800349c <HAL_DMA_Start_IT+0x20c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d02c      	beq.n	800337e <HAL_DMA_Start_IT+0xee>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a5d      	ldr	r2, [pc, #372]	@ (80034a0 <HAL_DMA_Start_IT+0x210>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d027      	beq.n	800337e <HAL_DMA_Start_IT+0xee>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a5c      	ldr	r2, [pc, #368]	@ (80034a4 <HAL_DMA_Start_IT+0x214>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d022      	beq.n	800337e <HAL_DMA_Start_IT+0xee>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a5a      	ldr	r2, [pc, #360]	@ (80034a8 <HAL_DMA_Start_IT+0x218>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d01d      	beq.n	800337e <HAL_DMA_Start_IT+0xee>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a59      	ldr	r2, [pc, #356]	@ (80034ac <HAL_DMA_Start_IT+0x21c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d018      	beq.n	800337e <HAL_DMA_Start_IT+0xee>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a57      	ldr	r2, [pc, #348]	@ (80034b0 <HAL_DMA_Start_IT+0x220>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d013      	beq.n	800337e <HAL_DMA_Start_IT+0xee>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a56      	ldr	r2, [pc, #344]	@ (80034b4 <HAL_DMA_Start_IT+0x224>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00e      	beq.n	800337e <HAL_DMA_Start_IT+0xee>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a54      	ldr	r2, [pc, #336]	@ (80034b8 <HAL_DMA_Start_IT+0x228>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d009      	beq.n	800337e <HAL_DMA_Start_IT+0xee>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a53      	ldr	r2, [pc, #332]	@ (80034bc <HAL_DMA_Start_IT+0x22c>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d004      	beq.n	800337e <HAL_DMA_Start_IT+0xee>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a51      	ldr	r2, [pc, #324]	@ (80034c0 <HAL_DMA_Start_IT+0x230>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d108      	bne.n	8003390 <HAL_DMA_Start_IT+0x100>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0201 	bic.w	r2, r2, #1
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	e007      	b.n	80033a0 <HAL_DMA_Start_IT+0x110>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0201 	bic.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f001 f906 	bl	80045b8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a34      	ldr	r2, [pc, #208]	@ (8003484 <HAL_DMA_Start_IT+0x1f4>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d04a      	beq.n	800344c <HAL_DMA_Start_IT+0x1bc>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a33      	ldr	r2, [pc, #204]	@ (8003488 <HAL_DMA_Start_IT+0x1f8>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d045      	beq.n	800344c <HAL_DMA_Start_IT+0x1bc>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a31      	ldr	r2, [pc, #196]	@ (800348c <HAL_DMA_Start_IT+0x1fc>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d040      	beq.n	800344c <HAL_DMA_Start_IT+0x1bc>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a30      	ldr	r2, [pc, #192]	@ (8003490 <HAL_DMA_Start_IT+0x200>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d03b      	beq.n	800344c <HAL_DMA_Start_IT+0x1bc>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a2e      	ldr	r2, [pc, #184]	@ (8003494 <HAL_DMA_Start_IT+0x204>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d036      	beq.n	800344c <HAL_DMA_Start_IT+0x1bc>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a2d      	ldr	r2, [pc, #180]	@ (8003498 <HAL_DMA_Start_IT+0x208>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d031      	beq.n	800344c <HAL_DMA_Start_IT+0x1bc>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a2b      	ldr	r2, [pc, #172]	@ (800349c <HAL_DMA_Start_IT+0x20c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d02c      	beq.n	800344c <HAL_DMA_Start_IT+0x1bc>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a2a      	ldr	r2, [pc, #168]	@ (80034a0 <HAL_DMA_Start_IT+0x210>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d027      	beq.n	800344c <HAL_DMA_Start_IT+0x1bc>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a28      	ldr	r2, [pc, #160]	@ (80034a4 <HAL_DMA_Start_IT+0x214>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d022      	beq.n	800344c <HAL_DMA_Start_IT+0x1bc>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a27      	ldr	r2, [pc, #156]	@ (80034a8 <HAL_DMA_Start_IT+0x218>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d01d      	beq.n	800344c <HAL_DMA_Start_IT+0x1bc>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a25      	ldr	r2, [pc, #148]	@ (80034ac <HAL_DMA_Start_IT+0x21c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d018      	beq.n	800344c <HAL_DMA_Start_IT+0x1bc>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a24      	ldr	r2, [pc, #144]	@ (80034b0 <HAL_DMA_Start_IT+0x220>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d013      	beq.n	800344c <HAL_DMA_Start_IT+0x1bc>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a22      	ldr	r2, [pc, #136]	@ (80034b4 <HAL_DMA_Start_IT+0x224>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00e      	beq.n	800344c <HAL_DMA_Start_IT+0x1bc>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a21      	ldr	r2, [pc, #132]	@ (80034b8 <HAL_DMA_Start_IT+0x228>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d009      	beq.n	800344c <HAL_DMA_Start_IT+0x1bc>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a1f      	ldr	r2, [pc, #124]	@ (80034bc <HAL_DMA_Start_IT+0x22c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d004      	beq.n	800344c <HAL_DMA_Start_IT+0x1bc>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a1e      	ldr	r2, [pc, #120]	@ (80034c0 <HAL_DMA_Start_IT+0x230>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d101      	bne.n	8003450 <HAL_DMA_Start_IT+0x1c0>
 800344c:	2301      	movs	r3, #1
 800344e:	e000      	b.n	8003452 <HAL_DMA_Start_IT+0x1c2>
 8003450:	2300      	movs	r3, #0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d036      	beq.n	80034c4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f023 021e 	bic.w	r2, r3, #30
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 0216 	orr.w	r2, r2, #22
 8003468:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346e:	2b00      	cmp	r3, #0
 8003470:	d03e      	beq.n	80034f0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f042 0208 	orr.w	r2, r2, #8
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	e035      	b.n	80034f0 <HAL_DMA_Start_IT+0x260>
 8003484:	40020010 	.word	0x40020010
 8003488:	40020028 	.word	0x40020028
 800348c:	40020040 	.word	0x40020040
 8003490:	40020058 	.word	0x40020058
 8003494:	40020070 	.word	0x40020070
 8003498:	40020088 	.word	0x40020088
 800349c:	400200a0 	.word	0x400200a0
 80034a0:	400200b8 	.word	0x400200b8
 80034a4:	40020410 	.word	0x40020410
 80034a8:	40020428 	.word	0x40020428
 80034ac:	40020440 	.word	0x40020440
 80034b0:	40020458 	.word	0x40020458
 80034b4:	40020470 	.word	0x40020470
 80034b8:	40020488 	.word	0x40020488
 80034bc:	400204a0 	.word	0x400204a0
 80034c0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 020e 	bic.w	r2, r3, #14
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 020a 	orr.w	r2, r2, #10
 80034d6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d007      	beq.n	80034f0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0204 	orr.w	r2, r2, #4
 80034ee:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a83      	ldr	r2, [pc, #524]	@ (8003704 <HAL_DMA_Start_IT+0x474>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d072      	beq.n	80035e0 <HAL_DMA_Start_IT+0x350>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a82      	ldr	r2, [pc, #520]	@ (8003708 <HAL_DMA_Start_IT+0x478>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d06d      	beq.n	80035e0 <HAL_DMA_Start_IT+0x350>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a80      	ldr	r2, [pc, #512]	@ (800370c <HAL_DMA_Start_IT+0x47c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d068      	beq.n	80035e0 <HAL_DMA_Start_IT+0x350>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a7f      	ldr	r2, [pc, #508]	@ (8003710 <HAL_DMA_Start_IT+0x480>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d063      	beq.n	80035e0 <HAL_DMA_Start_IT+0x350>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a7d      	ldr	r2, [pc, #500]	@ (8003714 <HAL_DMA_Start_IT+0x484>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d05e      	beq.n	80035e0 <HAL_DMA_Start_IT+0x350>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a7c      	ldr	r2, [pc, #496]	@ (8003718 <HAL_DMA_Start_IT+0x488>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d059      	beq.n	80035e0 <HAL_DMA_Start_IT+0x350>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a7a      	ldr	r2, [pc, #488]	@ (800371c <HAL_DMA_Start_IT+0x48c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d054      	beq.n	80035e0 <HAL_DMA_Start_IT+0x350>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a79      	ldr	r2, [pc, #484]	@ (8003720 <HAL_DMA_Start_IT+0x490>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d04f      	beq.n	80035e0 <HAL_DMA_Start_IT+0x350>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a77      	ldr	r2, [pc, #476]	@ (8003724 <HAL_DMA_Start_IT+0x494>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d04a      	beq.n	80035e0 <HAL_DMA_Start_IT+0x350>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a76      	ldr	r2, [pc, #472]	@ (8003728 <HAL_DMA_Start_IT+0x498>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d045      	beq.n	80035e0 <HAL_DMA_Start_IT+0x350>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a74      	ldr	r2, [pc, #464]	@ (800372c <HAL_DMA_Start_IT+0x49c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d040      	beq.n	80035e0 <HAL_DMA_Start_IT+0x350>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a73      	ldr	r2, [pc, #460]	@ (8003730 <HAL_DMA_Start_IT+0x4a0>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d03b      	beq.n	80035e0 <HAL_DMA_Start_IT+0x350>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a71      	ldr	r2, [pc, #452]	@ (8003734 <HAL_DMA_Start_IT+0x4a4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d036      	beq.n	80035e0 <HAL_DMA_Start_IT+0x350>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a70      	ldr	r2, [pc, #448]	@ (8003738 <HAL_DMA_Start_IT+0x4a8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d031      	beq.n	80035e0 <HAL_DMA_Start_IT+0x350>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a6e      	ldr	r2, [pc, #440]	@ (800373c <HAL_DMA_Start_IT+0x4ac>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d02c      	beq.n	80035e0 <HAL_DMA_Start_IT+0x350>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a6d      	ldr	r2, [pc, #436]	@ (8003740 <HAL_DMA_Start_IT+0x4b0>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d027      	beq.n	80035e0 <HAL_DMA_Start_IT+0x350>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a6b      	ldr	r2, [pc, #428]	@ (8003744 <HAL_DMA_Start_IT+0x4b4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d022      	beq.n	80035e0 <HAL_DMA_Start_IT+0x350>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a6a      	ldr	r2, [pc, #424]	@ (8003748 <HAL_DMA_Start_IT+0x4b8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d01d      	beq.n	80035e0 <HAL_DMA_Start_IT+0x350>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a68      	ldr	r2, [pc, #416]	@ (800374c <HAL_DMA_Start_IT+0x4bc>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d018      	beq.n	80035e0 <HAL_DMA_Start_IT+0x350>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a67      	ldr	r2, [pc, #412]	@ (8003750 <HAL_DMA_Start_IT+0x4c0>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d013      	beq.n	80035e0 <HAL_DMA_Start_IT+0x350>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a65      	ldr	r2, [pc, #404]	@ (8003754 <HAL_DMA_Start_IT+0x4c4>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d00e      	beq.n	80035e0 <HAL_DMA_Start_IT+0x350>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a64      	ldr	r2, [pc, #400]	@ (8003758 <HAL_DMA_Start_IT+0x4c8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d009      	beq.n	80035e0 <HAL_DMA_Start_IT+0x350>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a62      	ldr	r2, [pc, #392]	@ (800375c <HAL_DMA_Start_IT+0x4cc>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d004      	beq.n	80035e0 <HAL_DMA_Start_IT+0x350>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a61      	ldr	r2, [pc, #388]	@ (8003760 <HAL_DMA_Start_IT+0x4d0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d101      	bne.n	80035e4 <HAL_DMA_Start_IT+0x354>
 80035e0:	2301      	movs	r3, #1
 80035e2:	e000      	b.n	80035e6 <HAL_DMA_Start_IT+0x356>
 80035e4:	2300      	movs	r3, #0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d01a      	beq.n	8003620 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d007      	beq.n	8003608 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003602:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003606:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800360c:	2b00      	cmp	r3, #0
 800360e:	d007      	beq.n	8003620 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800361a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800361e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a37      	ldr	r2, [pc, #220]	@ (8003704 <HAL_DMA_Start_IT+0x474>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d04a      	beq.n	80036c0 <HAL_DMA_Start_IT+0x430>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a36      	ldr	r2, [pc, #216]	@ (8003708 <HAL_DMA_Start_IT+0x478>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d045      	beq.n	80036c0 <HAL_DMA_Start_IT+0x430>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a34      	ldr	r2, [pc, #208]	@ (800370c <HAL_DMA_Start_IT+0x47c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d040      	beq.n	80036c0 <HAL_DMA_Start_IT+0x430>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a33      	ldr	r2, [pc, #204]	@ (8003710 <HAL_DMA_Start_IT+0x480>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d03b      	beq.n	80036c0 <HAL_DMA_Start_IT+0x430>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a31      	ldr	r2, [pc, #196]	@ (8003714 <HAL_DMA_Start_IT+0x484>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d036      	beq.n	80036c0 <HAL_DMA_Start_IT+0x430>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a30      	ldr	r2, [pc, #192]	@ (8003718 <HAL_DMA_Start_IT+0x488>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d031      	beq.n	80036c0 <HAL_DMA_Start_IT+0x430>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a2e      	ldr	r2, [pc, #184]	@ (800371c <HAL_DMA_Start_IT+0x48c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d02c      	beq.n	80036c0 <HAL_DMA_Start_IT+0x430>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a2d      	ldr	r2, [pc, #180]	@ (8003720 <HAL_DMA_Start_IT+0x490>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d027      	beq.n	80036c0 <HAL_DMA_Start_IT+0x430>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a2b      	ldr	r2, [pc, #172]	@ (8003724 <HAL_DMA_Start_IT+0x494>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d022      	beq.n	80036c0 <HAL_DMA_Start_IT+0x430>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a2a      	ldr	r2, [pc, #168]	@ (8003728 <HAL_DMA_Start_IT+0x498>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d01d      	beq.n	80036c0 <HAL_DMA_Start_IT+0x430>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a28      	ldr	r2, [pc, #160]	@ (800372c <HAL_DMA_Start_IT+0x49c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d018      	beq.n	80036c0 <HAL_DMA_Start_IT+0x430>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a27      	ldr	r2, [pc, #156]	@ (8003730 <HAL_DMA_Start_IT+0x4a0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d013      	beq.n	80036c0 <HAL_DMA_Start_IT+0x430>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a25      	ldr	r2, [pc, #148]	@ (8003734 <HAL_DMA_Start_IT+0x4a4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00e      	beq.n	80036c0 <HAL_DMA_Start_IT+0x430>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a24      	ldr	r2, [pc, #144]	@ (8003738 <HAL_DMA_Start_IT+0x4a8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d009      	beq.n	80036c0 <HAL_DMA_Start_IT+0x430>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a22      	ldr	r2, [pc, #136]	@ (800373c <HAL_DMA_Start_IT+0x4ac>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d004      	beq.n	80036c0 <HAL_DMA_Start_IT+0x430>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a21      	ldr	r2, [pc, #132]	@ (8003740 <HAL_DMA_Start_IT+0x4b0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d108      	bne.n	80036d2 <HAL_DMA_Start_IT+0x442>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	e012      	b.n	80036f8 <HAL_DMA_Start_IT+0x468>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0201 	orr.w	r2, r2, #1
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	e009      	b.n	80036f8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036ea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80036f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40020010 	.word	0x40020010
 8003708:	40020028 	.word	0x40020028
 800370c:	40020040 	.word	0x40020040
 8003710:	40020058 	.word	0x40020058
 8003714:	40020070 	.word	0x40020070
 8003718:	40020088 	.word	0x40020088
 800371c:	400200a0 	.word	0x400200a0
 8003720:	400200b8 	.word	0x400200b8
 8003724:	40020410 	.word	0x40020410
 8003728:	40020428 	.word	0x40020428
 800372c:	40020440 	.word	0x40020440
 8003730:	40020458 	.word	0x40020458
 8003734:	40020470 	.word	0x40020470
 8003738:	40020488 	.word	0x40020488
 800373c:	400204a0 	.word	0x400204a0
 8003740:	400204b8 	.word	0x400204b8
 8003744:	58025408 	.word	0x58025408
 8003748:	5802541c 	.word	0x5802541c
 800374c:	58025430 	.word	0x58025430
 8003750:	58025444 	.word	0x58025444
 8003754:	58025458 	.word	0x58025458
 8003758:	5802546c 	.word	0x5802546c
 800375c:	58025480 	.word	0x58025480
 8003760:	58025494 	.word	0x58025494

08003764 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08a      	sub	sp, #40	@ 0x28
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003770:	4b67      	ldr	r3, [pc, #412]	@ (8003910 <HAL_DMA_IRQHandler+0x1ac>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a67      	ldr	r2, [pc, #412]	@ (8003914 <HAL_DMA_IRQHandler+0x1b0>)
 8003776:	fba2 2303 	umull	r2, r3, r2, r3
 800377a:	0a9b      	lsrs	r3, r3, #10
 800377c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003782:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003788:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a5f      	ldr	r2, [pc, #380]	@ (8003918 <HAL_DMA_IRQHandler+0x1b4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d04a      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a5d      	ldr	r2, [pc, #372]	@ (800391c <HAL_DMA_IRQHandler+0x1b8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d045      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a5c      	ldr	r2, [pc, #368]	@ (8003920 <HAL_DMA_IRQHandler+0x1bc>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d040      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a5a      	ldr	r2, [pc, #360]	@ (8003924 <HAL_DMA_IRQHandler+0x1c0>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d03b      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a59      	ldr	r2, [pc, #356]	@ (8003928 <HAL_DMA_IRQHandler+0x1c4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d036      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a57      	ldr	r2, [pc, #348]	@ (800392c <HAL_DMA_IRQHandler+0x1c8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d031      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a56      	ldr	r2, [pc, #344]	@ (8003930 <HAL_DMA_IRQHandler+0x1cc>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d02c      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a54      	ldr	r2, [pc, #336]	@ (8003934 <HAL_DMA_IRQHandler+0x1d0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d027      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a53      	ldr	r2, [pc, #332]	@ (8003938 <HAL_DMA_IRQHandler+0x1d4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d022      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a51      	ldr	r2, [pc, #324]	@ (800393c <HAL_DMA_IRQHandler+0x1d8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d01d      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a50      	ldr	r2, [pc, #320]	@ (8003940 <HAL_DMA_IRQHandler+0x1dc>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d018      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a4e      	ldr	r2, [pc, #312]	@ (8003944 <HAL_DMA_IRQHandler+0x1e0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d013      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a4d      	ldr	r2, [pc, #308]	@ (8003948 <HAL_DMA_IRQHandler+0x1e4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d00e      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a4b      	ldr	r2, [pc, #300]	@ (800394c <HAL_DMA_IRQHandler+0x1e8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d009      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a4a      	ldr	r2, [pc, #296]	@ (8003950 <HAL_DMA_IRQHandler+0x1ec>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d004      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a48      	ldr	r2, [pc, #288]	@ (8003954 <HAL_DMA_IRQHandler+0x1f0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d101      	bne.n	800383a <HAL_DMA_IRQHandler+0xd6>
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <HAL_DMA_IRQHandler+0xd8>
 800383a:	2300      	movs	r3, #0
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 842b 	beq.w	8004098 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003846:	f003 031f 	and.w	r3, r3, #31
 800384a:	2208      	movs	r2, #8
 800384c:	409a      	lsls	r2, r3
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	4013      	ands	r3, r2
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 80a2 	beq.w	800399c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a2e      	ldr	r2, [pc, #184]	@ (8003918 <HAL_DMA_IRQHandler+0x1b4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d04a      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a2d      	ldr	r2, [pc, #180]	@ (800391c <HAL_DMA_IRQHandler+0x1b8>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d045      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a2b      	ldr	r2, [pc, #172]	@ (8003920 <HAL_DMA_IRQHandler+0x1bc>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d040      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a2a      	ldr	r2, [pc, #168]	@ (8003924 <HAL_DMA_IRQHandler+0x1c0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d03b      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a28      	ldr	r2, [pc, #160]	@ (8003928 <HAL_DMA_IRQHandler+0x1c4>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d036      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a27      	ldr	r2, [pc, #156]	@ (800392c <HAL_DMA_IRQHandler+0x1c8>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d031      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a25      	ldr	r2, [pc, #148]	@ (8003930 <HAL_DMA_IRQHandler+0x1cc>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d02c      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a24      	ldr	r2, [pc, #144]	@ (8003934 <HAL_DMA_IRQHandler+0x1d0>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d027      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a22      	ldr	r2, [pc, #136]	@ (8003938 <HAL_DMA_IRQHandler+0x1d4>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d022      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a21      	ldr	r2, [pc, #132]	@ (800393c <HAL_DMA_IRQHandler+0x1d8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d01d      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003940 <HAL_DMA_IRQHandler+0x1dc>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d018      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003944 <HAL_DMA_IRQHandler+0x1e0>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d013      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003948 <HAL_DMA_IRQHandler+0x1e4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00e      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a1b      	ldr	r2, [pc, #108]	@ (800394c <HAL_DMA_IRQHandler+0x1e8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d009      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a19      	ldr	r2, [pc, #100]	@ (8003950 <HAL_DMA_IRQHandler+0x1ec>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d004      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a18      	ldr	r2, [pc, #96]	@ (8003954 <HAL_DMA_IRQHandler+0x1f0>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d12f      	bne.n	8003958 <HAL_DMA_IRQHandler+0x1f4>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0304 	and.w	r3, r3, #4
 8003902:	2b00      	cmp	r3, #0
 8003904:	bf14      	ite	ne
 8003906:	2301      	movne	r3, #1
 8003908:	2300      	moveq	r3, #0
 800390a:	b2db      	uxtb	r3, r3
 800390c:	e02e      	b.n	800396c <HAL_DMA_IRQHandler+0x208>
 800390e:	bf00      	nop
 8003910:	24000000 	.word	0x24000000
 8003914:	1b4e81b5 	.word	0x1b4e81b5
 8003918:	40020010 	.word	0x40020010
 800391c:	40020028 	.word	0x40020028
 8003920:	40020040 	.word	0x40020040
 8003924:	40020058 	.word	0x40020058
 8003928:	40020070 	.word	0x40020070
 800392c:	40020088 	.word	0x40020088
 8003930:	400200a0 	.word	0x400200a0
 8003934:	400200b8 	.word	0x400200b8
 8003938:	40020410 	.word	0x40020410
 800393c:	40020428 	.word	0x40020428
 8003940:	40020440 	.word	0x40020440
 8003944:	40020458 	.word	0x40020458
 8003948:	40020470 	.word	0x40020470
 800394c:	40020488 	.word	0x40020488
 8003950:	400204a0 	.word	0x400204a0
 8003954:	400204b8 	.word	0x400204b8
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	bf14      	ite	ne
 8003966:	2301      	movne	r3, #1
 8003968:	2300      	moveq	r3, #0
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d015      	beq.n	800399c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0204 	bic.w	r2, r2, #4
 800397e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003984:	f003 031f 	and.w	r3, r3, #31
 8003988:	2208      	movs	r2, #8
 800398a:	409a      	lsls	r2, r3
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003994:	f043 0201 	orr.w	r2, r3, #1
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a0:	f003 031f 	and.w	r3, r3, #31
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	fa22 f303 	lsr.w	r3, r2, r3
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d06e      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a69      	ldr	r2, [pc, #420]	@ (8003b5c <HAL_DMA_IRQHandler+0x3f8>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d04a      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a67      	ldr	r2, [pc, #412]	@ (8003b60 <HAL_DMA_IRQHandler+0x3fc>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d045      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a66      	ldr	r2, [pc, #408]	@ (8003b64 <HAL_DMA_IRQHandler+0x400>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d040      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a64      	ldr	r2, [pc, #400]	@ (8003b68 <HAL_DMA_IRQHandler+0x404>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d03b      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a63      	ldr	r2, [pc, #396]	@ (8003b6c <HAL_DMA_IRQHandler+0x408>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d036      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a61      	ldr	r2, [pc, #388]	@ (8003b70 <HAL_DMA_IRQHandler+0x40c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d031      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a60      	ldr	r2, [pc, #384]	@ (8003b74 <HAL_DMA_IRQHandler+0x410>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d02c      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a5e      	ldr	r2, [pc, #376]	@ (8003b78 <HAL_DMA_IRQHandler+0x414>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d027      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a5d      	ldr	r2, [pc, #372]	@ (8003b7c <HAL_DMA_IRQHandler+0x418>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d022      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a5b      	ldr	r2, [pc, #364]	@ (8003b80 <HAL_DMA_IRQHandler+0x41c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d01d      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a5a      	ldr	r2, [pc, #360]	@ (8003b84 <HAL_DMA_IRQHandler+0x420>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d018      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a58      	ldr	r2, [pc, #352]	@ (8003b88 <HAL_DMA_IRQHandler+0x424>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d013      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a57      	ldr	r2, [pc, #348]	@ (8003b8c <HAL_DMA_IRQHandler+0x428>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00e      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a55      	ldr	r2, [pc, #340]	@ (8003b90 <HAL_DMA_IRQHandler+0x42c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d009      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a54      	ldr	r2, [pc, #336]	@ (8003b94 <HAL_DMA_IRQHandler+0x430>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d004      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a52      	ldr	r2, [pc, #328]	@ (8003b98 <HAL_DMA_IRQHandler+0x434>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d10a      	bne.n	8003a68 <HAL_DMA_IRQHandler+0x304>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	bf14      	ite	ne
 8003a60:	2301      	movne	r3, #1
 8003a62:	2300      	moveq	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	e003      	b.n	8003a70 <HAL_DMA_IRQHandler+0x30c>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00d      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a88:	f043 0202 	orr.w	r2, r3, #2
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a94:	f003 031f 	and.w	r3, r3, #31
 8003a98:	2204      	movs	r2, #4
 8003a9a:	409a      	lsls	r2, r3
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 808f 	beq.w	8003bc4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a2c      	ldr	r2, [pc, #176]	@ (8003b5c <HAL_DMA_IRQHandler+0x3f8>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d04a      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a2a      	ldr	r2, [pc, #168]	@ (8003b60 <HAL_DMA_IRQHandler+0x3fc>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d045      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a29      	ldr	r2, [pc, #164]	@ (8003b64 <HAL_DMA_IRQHandler+0x400>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d040      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a27      	ldr	r2, [pc, #156]	@ (8003b68 <HAL_DMA_IRQHandler+0x404>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d03b      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a26      	ldr	r2, [pc, #152]	@ (8003b6c <HAL_DMA_IRQHandler+0x408>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d036      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a24      	ldr	r2, [pc, #144]	@ (8003b70 <HAL_DMA_IRQHandler+0x40c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d031      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a23      	ldr	r2, [pc, #140]	@ (8003b74 <HAL_DMA_IRQHandler+0x410>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d02c      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a21      	ldr	r2, [pc, #132]	@ (8003b78 <HAL_DMA_IRQHandler+0x414>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d027      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a20      	ldr	r2, [pc, #128]	@ (8003b7c <HAL_DMA_IRQHandler+0x418>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d022      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1e      	ldr	r2, [pc, #120]	@ (8003b80 <HAL_DMA_IRQHandler+0x41c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d01d      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a1d      	ldr	r2, [pc, #116]	@ (8003b84 <HAL_DMA_IRQHandler+0x420>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d018      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a1b      	ldr	r2, [pc, #108]	@ (8003b88 <HAL_DMA_IRQHandler+0x424>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d013      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1a      	ldr	r2, [pc, #104]	@ (8003b8c <HAL_DMA_IRQHandler+0x428>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d00e      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a18      	ldr	r2, [pc, #96]	@ (8003b90 <HAL_DMA_IRQHandler+0x42c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d009      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a17      	ldr	r2, [pc, #92]	@ (8003b94 <HAL_DMA_IRQHandler+0x430>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d004      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a15      	ldr	r2, [pc, #84]	@ (8003b98 <HAL_DMA_IRQHandler+0x434>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d12a      	bne.n	8003b9c <HAL_DMA_IRQHandler+0x438>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	bf14      	ite	ne
 8003b54:	2301      	movne	r3, #1
 8003b56:	2300      	moveq	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	e023      	b.n	8003ba4 <HAL_DMA_IRQHandler+0x440>
 8003b5c:	40020010 	.word	0x40020010
 8003b60:	40020028 	.word	0x40020028
 8003b64:	40020040 	.word	0x40020040
 8003b68:	40020058 	.word	0x40020058
 8003b6c:	40020070 	.word	0x40020070
 8003b70:	40020088 	.word	0x40020088
 8003b74:	400200a0 	.word	0x400200a0
 8003b78:	400200b8 	.word	0x400200b8
 8003b7c:	40020410 	.word	0x40020410
 8003b80:	40020428 	.word	0x40020428
 8003b84:	40020440 	.word	0x40020440
 8003b88:	40020458 	.word	0x40020458
 8003b8c:	40020470 	.word	0x40020470
 8003b90:	40020488 	.word	0x40020488
 8003b94:	400204a0 	.word	0x400204a0
 8003b98:	400204b8 	.word	0x400204b8
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00d      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	2204      	movs	r2, #4
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bbc:	f043 0204 	orr.w	r2, r3, #4
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	2210      	movs	r2, #16
 8003bce:	409a      	lsls	r2, r3
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 80a6 	beq.w	8003d26 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a85      	ldr	r2, [pc, #532]	@ (8003df4 <HAL_DMA_IRQHandler+0x690>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d04a      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a83      	ldr	r2, [pc, #524]	@ (8003df8 <HAL_DMA_IRQHandler+0x694>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d045      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a82      	ldr	r2, [pc, #520]	@ (8003dfc <HAL_DMA_IRQHandler+0x698>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d040      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a80      	ldr	r2, [pc, #512]	@ (8003e00 <HAL_DMA_IRQHandler+0x69c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d03b      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a7f      	ldr	r2, [pc, #508]	@ (8003e04 <HAL_DMA_IRQHandler+0x6a0>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d036      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a7d      	ldr	r2, [pc, #500]	@ (8003e08 <HAL_DMA_IRQHandler+0x6a4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d031      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a7c      	ldr	r2, [pc, #496]	@ (8003e0c <HAL_DMA_IRQHandler+0x6a8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d02c      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a7a      	ldr	r2, [pc, #488]	@ (8003e10 <HAL_DMA_IRQHandler+0x6ac>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d027      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a79      	ldr	r2, [pc, #484]	@ (8003e14 <HAL_DMA_IRQHandler+0x6b0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d022      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a77      	ldr	r2, [pc, #476]	@ (8003e18 <HAL_DMA_IRQHandler+0x6b4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d01d      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a76      	ldr	r2, [pc, #472]	@ (8003e1c <HAL_DMA_IRQHandler+0x6b8>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d018      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a74      	ldr	r2, [pc, #464]	@ (8003e20 <HAL_DMA_IRQHandler+0x6bc>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d013      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a73      	ldr	r2, [pc, #460]	@ (8003e24 <HAL_DMA_IRQHandler+0x6c0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d00e      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a71      	ldr	r2, [pc, #452]	@ (8003e28 <HAL_DMA_IRQHandler+0x6c4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d009      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a70      	ldr	r2, [pc, #448]	@ (8003e2c <HAL_DMA_IRQHandler+0x6c8>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d004      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a6e      	ldr	r2, [pc, #440]	@ (8003e30 <HAL_DMA_IRQHandler+0x6cc>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d10a      	bne.n	8003c90 <HAL_DMA_IRQHandler+0x52c>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	bf14      	ite	ne
 8003c88:	2301      	movne	r3, #1
 8003c8a:	2300      	moveq	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	e009      	b.n	8003ca4 <HAL_DMA_IRQHandler+0x540>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	bf14      	ite	ne
 8003c9e:	2301      	movne	r3, #1
 8003ca0:	2300      	moveq	r3, #0
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d03e      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cac:	f003 031f 	and.w	r3, r3, #31
 8003cb0:	2210      	movs	r2, #16
 8003cb2:	409a      	lsls	r2, r3
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d018      	beq.n	8003cf8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d108      	bne.n	8003ce6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d024      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	4798      	blx	r3
 8003ce4:	e01f      	b.n	8003d26 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d01b      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	4798      	blx	r3
 8003cf6:	e016      	b.n	8003d26 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d107      	bne.n	8003d16 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0208 	bic.w	r2, r2, #8
 8003d14:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d2a:	f003 031f 	and.w	r3, r3, #31
 8003d2e:	2220      	movs	r2, #32
 8003d30:	409a      	lsls	r2, r3
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	4013      	ands	r3, r2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 8110 	beq.w	8003f5c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a2c      	ldr	r2, [pc, #176]	@ (8003df4 <HAL_DMA_IRQHandler+0x690>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d04a      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a2b      	ldr	r2, [pc, #172]	@ (8003df8 <HAL_DMA_IRQHandler+0x694>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d045      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a29      	ldr	r2, [pc, #164]	@ (8003dfc <HAL_DMA_IRQHandler+0x698>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d040      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a28      	ldr	r2, [pc, #160]	@ (8003e00 <HAL_DMA_IRQHandler+0x69c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d03b      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a26      	ldr	r2, [pc, #152]	@ (8003e04 <HAL_DMA_IRQHandler+0x6a0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d036      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a25      	ldr	r2, [pc, #148]	@ (8003e08 <HAL_DMA_IRQHandler+0x6a4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d031      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a23      	ldr	r2, [pc, #140]	@ (8003e0c <HAL_DMA_IRQHandler+0x6a8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d02c      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a22      	ldr	r2, [pc, #136]	@ (8003e10 <HAL_DMA_IRQHandler+0x6ac>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d027      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a20      	ldr	r2, [pc, #128]	@ (8003e14 <HAL_DMA_IRQHandler+0x6b0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d022      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a1f      	ldr	r2, [pc, #124]	@ (8003e18 <HAL_DMA_IRQHandler+0x6b4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d01d      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a1d      	ldr	r2, [pc, #116]	@ (8003e1c <HAL_DMA_IRQHandler+0x6b8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d018      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a1c      	ldr	r2, [pc, #112]	@ (8003e20 <HAL_DMA_IRQHandler+0x6bc>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d013      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1a      	ldr	r2, [pc, #104]	@ (8003e24 <HAL_DMA_IRQHandler+0x6c0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00e      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a19      	ldr	r2, [pc, #100]	@ (8003e28 <HAL_DMA_IRQHandler+0x6c4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d009      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a17      	ldr	r2, [pc, #92]	@ (8003e2c <HAL_DMA_IRQHandler+0x6c8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d004      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a16      	ldr	r2, [pc, #88]	@ (8003e30 <HAL_DMA_IRQHandler+0x6cc>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d12b      	bne.n	8003e34 <HAL_DMA_IRQHandler+0x6d0>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0310 	and.w	r3, r3, #16
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	bf14      	ite	ne
 8003dea:	2301      	movne	r3, #1
 8003dec:	2300      	moveq	r3, #0
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	e02a      	b.n	8003e48 <HAL_DMA_IRQHandler+0x6e4>
 8003df2:	bf00      	nop
 8003df4:	40020010 	.word	0x40020010
 8003df8:	40020028 	.word	0x40020028
 8003dfc:	40020040 	.word	0x40020040
 8003e00:	40020058 	.word	0x40020058
 8003e04:	40020070 	.word	0x40020070
 8003e08:	40020088 	.word	0x40020088
 8003e0c:	400200a0 	.word	0x400200a0
 8003e10:	400200b8 	.word	0x400200b8
 8003e14:	40020410 	.word	0x40020410
 8003e18:	40020428 	.word	0x40020428
 8003e1c:	40020440 	.word	0x40020440
 8003e20:	40020458 	.word	0x40020458
 8003e24:	40020470 	.word	0x40020470
 8003e28:	40020488 	.word	0x40020488
 8003e2c:	400204a0 	.word	0x400204a0
 8003e30:	400204b8 	.word	0x400204b8
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	bf14      	ite	ne
 8003e42:	2301      	movne	r3, #1
 8003e44:	2300      	moveq	r3, #0
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8087 	beq.w	8003f5c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e52:	f003 031f 	and.w	r3, r3, #31
 8003e56:	2220      	movs	r2, #32
 8003e58:	409a      	lsls	r2, r3
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d139      	bne.n	8003ede <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 0216 	bic.w	r2, r2, #22
 8003e78:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695a      	ldr	r2, [r3, #20]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e88:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d103      	bne.n	8003e9a <HAL_DMA_IRQHandler+0x736>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d007      	beq.n	8003eaa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0208 	bic.w	r2, r2, #8
 8003ea8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eae:	f003 031f 	and.w	r3, r3, #31
 8003eb2:	223f      	movs	r2, #63	@ 0x3f
 8003eb4:	409a      	lsls	r2, r3
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 834a 	beq.w	8004568 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	4798      	blx	r3
          }
          return;
 8003edc:	e344      	b.n	8004568 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d018      	beq.n	8003f1e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d108      	bne.n	8003f0c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d02c      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	4798      	blx	r3
 8003f0a:	e027      	b.n	8003f5c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d023      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	4798      	blx	r3
 8003f1c:	e01e      	b.n	8003f5c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10f      	bne.n	8003f4c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0210 	bic.w	r2, r2, #16
 8003f3a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 8306 	beq.w	8004572 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 8088 	beq.w	8004084 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2204      	movs	r2, #4
 8003f78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a7a      	ldr	r2, [pc, #488]	@ (800416c <HAL_DMA_IRQHandler+0xa08>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d04a      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a79      	ldr	r2, [pc, #484]	@ (8004170 <HAL_DMA_IRQHandler+0xa0c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d045      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a77      	ldr	r2, [pc, #476]	@ (8004174 <HAL_DMA_IRQHandler+0xa10>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d040      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a76      	ldr	r2, [pc, #472]	@ (8004178 <HAL_DMA_IRQHandler+0xa14>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d03b      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a74      	ldr	r2, [pc, #464]	@ (800417c <HAL_DMA_IRQHandler+0xa18>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d036      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a73      	ldr	r2, [pc, #460]	@ (8004180 <HAL_DMA_IRQHandler+0xa1c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d031      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a71      	ldr	r2, [pc, #452]	@ (8004184 <HAL_DMA_IRQHandler+0xa20>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d02c      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a70      	ldr	r2, [pc, #448]	@ (8004188 <HAL_DMA_IRQHandler+0xa24>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d027      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a6e      	ldr	r2, [pc, #440]	@ (800418c <HAL_DMA_IRQHandler+0xa28>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d022      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a6d      	ldr	r2, [pc, #436]	@ (8004190 <HAL_DMA_IRQHandler+0xa2c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d01d      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a6b      	ldr	r2, [pc, #428]	@ (8004194 <HAL_DMA_IRQHandler+0xa30>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d018      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a6a      	ldr	r2, [pc, #424]	@ (8004198 <HAL_DMA_IRQHandler+0xa34>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d013      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a68      	ldr	r2, [pc, #416]	@ (800419c <HAL_DMA_IRQHandler+0xa38>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00e      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a67      	ldr	r2, [pc, #412]	@ (80041a0 <HAL_DMA_IRQHandler+0xa3c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d009      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a65      	ldr	r2, [pc, #404]	@ (80041a4 <HAL_DMA_IRQHandler+0xa40>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d004      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a64      	ldr	r2, [pc, #400]	@ (80041a8 <HAL_DMA_IRQHandler+0xa44>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d108      	bne.n	800402e <HAL_DMA_IRQHandler+0x8ca>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0201 	bic.w	r2, r2, #1
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	e007      	b.n	800403e <HAL_DMA_IRQHandler+0x8da>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0201 	bic.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3301      	adds	r3, #1
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004046:	429a      	cmp	r2, r3
 8004048:	d307      	bcc.n	800405a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1f2      	bne.n	800403e <HAL_DMA_IRQHandler+0x8da>
 8004058:	e000      	b.n	800405c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800405a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d004      	beq.n	8004074 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2203      	movs	r2, #3
 800406e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004072:	e003      	b.n	800407c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 8272 	beq.w	8004572 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	4798      	blx	r3
 8004096:	e26c      	b.n	8004572 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a43      	ldr	r2, [pc, #268]	@ (80041ac <HAL_DMA_IRQHandler+0xa48>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d022      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x984>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a42      	ldr	r2, [pc, #264]	@ (80041b0 <HAL_DMA_IRQHandler+0xa4c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d01d      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x984>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a40      	ldr	r2, [pc, #256]	@ (80041b4 <HAL_DMA_IRQHandler+0xa50>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d018      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x984>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a3f      	ldr	r2, [pc, #252]	@ (80041b8 <HAL_DMA_IRQHandler+0xa54>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d013      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x984>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a3d      	ldr	r2, [pc, #244]	@ (80041bc <HAL_DMA_IRQHandler+0xa58>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d00e      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x984>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a3c      	ldr	r2, [pc, #240]	@ (80041c0 <HAL_DMA_IRQHandler+0xa5c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d009      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x984>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a3a      	ldr	r2, [pc, #232]	@ (80041c4 <HAL_DMA_IRQHandler+0xa60>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d004      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x984>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a39      	ldr	r2, [pc, #228]	@ (80041c8 <HAL_DMA_IRQHandler+0xa64>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d101      	bne.n	80040ec <HAL_DMA_IRQHandler+0x988>
 80040e8:	2301      	movs	r3, #1
 80040ea:	e000      	b.n	80040ee <HAL_DMA_IRQHandler+0x98a>
 80040ec:	2300      	movs	r3, #0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 823f 	beq.w	8004572 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004100:	f003 031f 	and.w	r3, r3, #31
 8004104:	2204      	movs	r2, #4
 8004106:	409a      	lsls	r2, r3
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	4013      	ands	r3, r2
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 80cd 	beq.w	80042ac <HAL_DMA_IRQHandler+0xb48>
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 80c7 	beq.w	80042ac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004122:	f003 031f 	and.w	r3, r3, #31
 8004126:	2204      	movs	r2, #4
 8004128:	409a      	lsls	r2, r3
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d049      	beq.n	80041cc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d109      	bne.n	8004156 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 8210 	beq.w	800456c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004154:	e20a      	b.n	800456c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 8206 	beq.w	800456c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004168:	e200      	b.n	800456c <HAL_DMA_IRQHandler+0xe08>
 800416a:	bf00      	nop
 800416c:	40020010 	.word	0x40020010
 8004170:	40020028 	.word	0x40020028
 8004174:	40020040 	.word	0x40020040
 8004178:	40020058 	.word	0x40020058
 800417c:	40020070 	.word	0x40020070
 8004180:	40020088 	.word	0x40020088
 8004184:	400200a0 	.word	0x400200a0
 8004188:	400200b8 	.word	0x400200b8
 800418c:	40020410 	.word	0x40020410
 8004190:	40020428 	.word	0x40020428
 8004194:	40020440 	.word	0x40020440
 8004198:	40020458 	.word	0x40020458
 800419c:	40020470 	.word	0x40020470
 80041a0:	40020488 	.word	0x40020488
 80041a4:	400204a0 	.word	0x400204a0
 80041a8:	400204b8 	.word	0x400204b8
 80041ac:	58025408 	.word	0x58025408
 80041b0:	5802541c 	.word	0x5802541c
 80041b4:	58025430 	.word	0x58025430
 80041b8:	58025444 	.word	0x58025444
 80041bc:	58025458 	.word	0x58025458
 80041c0:	5802546c 	.word	0x5802546c
 80041c4:	58025480 	.word	0x58025480
 80041c8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f003 0320 	and.w	r3, r3, #32
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d160      	bne.n	8004298 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a7f      	ldr	r2, [pc, #508]	@ (80043d8 <HAL_DMA_IRQHandler+0xc74>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d04a      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a7d      	ldr	r2, [pc, #500]	@ (80043dc <HAL_DMA_IRQHandler+0xc78>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d045      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a7c      	ldr	r2, [pc, #496]	@ (80043e0 <HAL_DMA_IRQHandler+0xc7c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d040      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a7a      	ldr	r2, [pc, #488]	@ (80043e4 <HAL_DMA_IRQHandler+0xc80>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d03b      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a79      	ldr	r2, [pc, #484]	@ (80043e8 <HAL_DMA_IRQHandler+0xc84>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d036      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a77      	ldr	r2, [pc, #476]	@ (80043ec <HAL_DMA_IRQHandler+0xc88>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d031      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a76      	ldr	r2, [pc, #472]	@ (80043f0 <HAL_DMA_IRQHandler+0xc8c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d02c      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a74      	ldr	r2, [pc, #464]	@ (80043f4 <HAL_DMA_IRQHandler+0xc90>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d027      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a73      	ldr	r2, [pc, #460]	@ (80043f8 <HAL_DMA_IRQHandler+0xc94>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d022      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a71      	ldr	r2, [pc, #452]	@ (80043fc <HAL_DMA_IRQHandler+0xc98>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d01d      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a70      	ldr	r2, [pc, #448]	@ (8004400 <HAL_DMA_IRQHandler+0xc9c>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d018      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a6e      	ldr	r2, [pc, #440]	@ (8004404 <HAL_DMA_IRQHandler+0xca0>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d013      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a6d      	ldr	r2, [pc, #436]	@ (8004408 <HAL_DMA_IRQHandler+0xca4>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d00e      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a6b      	ldr	r2, [pc, #428]	@ (800440c <HAL_DMA_IRQHandler+0xca8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d009      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a6a      	ldr	r2, [pc, #424]	@ (8004410 <HAL_DMA_IRQHandler+0xcac>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d004      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a68      	ldr	r2, [pc, #416]	@ (8004414 <HAL_DMA_IRQHandler+0xcb0>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d108      	bne.n	8004288 <HAL_DMA_IRQHandler+0xb24>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0208 	bic.w	r2, r2, #8
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	e007      	b.n	8004298 <HAL_DMA_IRQHandler+0xb34>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0204 	bic.w	r2, r2, #4
 8004296:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8165 	beq.w	800456c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042aa:	e15f      	b.n	800456c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	2202      	movs	r2, #2
 80042b6:	409a      	lsls	r2, r3
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	4013      	ands	r3, r2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 80c5 	beq.w	800444c <HAL_DMA_IRQHandler+0xce8>
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 80bf 	beq.w	800444c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d2:	f003 031f 	and.w	r3, r3, #31
 80042d6:	2202      	movs	r2, #2
 80042d8:	409a      	lsls	r2, r3
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d018      	beq.n	800431a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d109      	bne.n	8004306 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 813a 	beq.w	8004570 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004304:	e134      	b.n	8004570 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 8130 	beq.w	8004570 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004318:	e12a      	b.n	8004570 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f003 0320 	and.w	r3, r3, #32
 8004320:	2b00      	cmp	r3, #0
 8004322:	f040 8089 	bne.w	8004438 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a2b      	ldr	r2, [pc, #172]	@ (80043d8 <HAL_DMA_IRQHandler+0xc74>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d04a      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xc62>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a29      	ldr	r2, [pc, #164]	@ (80043dc <HAL_DMA_IRQHandler+0xc78>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d045      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xc62>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a28      	ldr	r2, [pc, #160]	@ (80043e0 <HAL_DMA_IRQHandler+0xc7c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d040      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xc62>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a26      	ldr	r2, [pc, #152]	@ (80043e4 <HAL_DMA_IRQHandler+0xc80>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d03b      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xc62>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a25      	ldr	r2, [pc, #148]	@ (80043e8 <HAL_DMA_IRQHandler+0xc84>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d036      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xc62>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a23      	ldr	r2, [pc, #140]	@ (80043ec <HAL_DMA_IRQHandler+0xc88>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d031      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xc62>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a22      	ldr	r2, [pc, #136]	@ (80043f0 <HAL_DMA_IRQHandler+0xc8c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d02c      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xc62>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a20      	ldr	r2, [pc, #128]	@ (80043f4 <HAL_DMA_IRQHandler+0xc90>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d027      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xc62>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a1f      	ldr	r2, [pc, #124]	@ (80043f8 <HAL_DMA_IRQHandler+0xc94>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d022      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xc62>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a1d      	ldr	r2, [pc, #116]	@ (80043fc <HAL_DMA_IRQHandler+0xc98>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d01d      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xc62>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1c      	ldr	r2, [pc, #112]	@ (8004400 <HAL_DMA_IRQHandler+0xc9c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d018      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xc62>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a1a      	ldr	r2, [pc, #104]	@ (8004404 <HAL_DMA_IRQHandler+0xca0>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d013      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xc62>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a19      	ldr	r2, [pc, #100]	@ (8004408 <HAL_DMA_IRQHandler+0xca4>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d00e      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xc62>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a17      	ldr	r2, [pc, #92]	@ (800440c <HAL_DMA_IRQHandler+0xca8>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d009      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xc62>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a16      	ldr	r2, [pc, #88]	@ (8004410 <HAL_DMA_IRQHandler+0xcac>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d004      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xc62>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a14      	ldr	r2, [pc, #80]	@ (8004414 <HAL_DMA_IRQHandler+0xcb0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d128      	bne.n	8004418 <HAL_DMA_IRQHandler+0xcb4>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 0214 	bic.w	r2, r2, #20
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	e027      	b.n	8004428 <HAL_DMA_IRQHandler+0xcc4>
 80043d8:	40020010 	.word	0x40020010
 80043dc:	40020028 	.word	0x40020028
 80043e0:	40020040 	.word	0x40020040
 80043e4:	40020058 	.word	0x40020058
 80043e8:	40020070 	.word	0x40020070
 80043ec:	40020088 	.word	0x40020088
 80043f0:	400200a0 	.word	0x400200a0
 80043f4:	400200b8 	.word	0x400200b8
 80043f8:	40020410 	.word	0x40020410
 80043fc:	40020428 	.word	0x40020428
 8004400:	40020440 	.word	0x40020440
 8004404:	40020458 	.word	0x40020458
 8004408:	40020470 	.word	0x40020470
 800440c:	40020488 	.word	0x40020488
 8004410:	400204a0 	.word	0x400204a0
 8004414:	400204b8 	.word	0x400204b8
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 020a 	bic.w	r2, r2, #10
 8004426:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 8097 	beq.w	8004570 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800444a:	e091      	b.n	8004570 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004450:	f003 031f 	and.w	r3, r3, #31
 8004454:	2208      	movs	r2, #8
 8004456:	409a      	lsls	r2, r3
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	4013      	ands	r3, r2
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 8088 	beq.w	8004572 <HAL_DMA_IRQHandler+0xe0e>
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f003 0308 	and.w	r3, r3, #8
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 8082 	beq.w	8004572 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a41      	ldr	r2, [pc, #260]	@ (8004578 <HAL_DMA_IRQHandler+0xe14>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d04a      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a3f      	ldr	r2, [pc, #252]	@ (800457c <HAL_DMA_IRQHandler+0xe18>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d045      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a3e      	ldr	r2, [pc, #248]	@ (8004580 <HAL_DMA_IRQHandler+0xe1c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d040      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a3c      	ldr	r2, [pc, #240]	@ (8004584 <HAL_DMA_IRQHandler+0xe20>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d03b      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a3b      	ldr	r2, [pc, #236]	@ (8004588 <HAL_DMA_IRQHandler+0xe24>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d036      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a39      	ldr	r2, [pc, #228]	@ (800458c <HAL_DMA_IRQHandler+0xe28>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d031      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a38      	ldr	r2, [pc, #224]	@ (8004590 <HAL_DMA_IRQHandler+0xe2c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d02c      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a36      	ldr	r2, [pc, #216]	@ (8004594 <HAL_DMA_IRQHandler+0xe30>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d027      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a35      	ldr	r2, [pc, #212]	@ (8004598 <HAL_DMA_IRQHandler+0xe34>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d022      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a33      	ldr	r2, [pc, #204]	@ (800459c <HAL_DMA_IRQHandler+0xe38>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d01d      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a32      	ldr	r2, [pc, #200]	@ (80045a0 <HAL_DMA_IRQHandler+0xe3c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d018      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a30      	ldr	r2, [pc, #192]	@ (80045a4 <HAL_DMA_IRQHandler+0xe40>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d013      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a2f      	ldr	r2, [pc, #188]	@ (80045a8 <HAL_DMA_IRQHandler+0xe44>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d00e      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a2d      	ldr	r2, [pc, #180]	@ (80045ac <HAL_DMA_IRQHandler+0xe48>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d009      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a2c      	ldr	r2, [pc, #176]	@ (80045b0 <HAL_DMA_IRQHandler+0xe4c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d004      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a2a      	ldr	r2, [pc, #168]	@ (80045b4 <HAL_DMA_IRQHandler+0xe50>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d108      	bne.n	8004520 <HAL_DMA_IRQHandler+0xdbc>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 021c 	bic.w	r2, r2, #28
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	e007      	b.n	8004530 <HAL_DMA_IRQHandler+0xdcc>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 020e 	bic.w	r2, r2, #14
 800452e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004534:	f003 031f 	and.w	r3, r3, #31
 8004538:	2201      	movs	r2, #1
 800453a:	409a      	lsls	r2, r3
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800455a:	2b00      	cmp	r3, #0
 800455c:	d009      	beq.n	8004572 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	4798      	blx	r3
 8004566:	e004      	b.n	8004572 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004568:	bf00      	nop
 800456a:	e002      	b.n	8004572 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800456c:	bf00      	nop
 800456e:	e000      	b.n	8004572 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004570:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004572:	3728      	adds	r7, #40	@ 0x28
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40020010 	.word	0x40020010
 800457c:	40020028 	.word	0x40020028
 8004580:	40020040 	.word	0x40020040
 8004584:	40020058 	.word	0x40020058
 8004588:	40020070 	.word	0x40020070
 800458c:	40020088 	.word	0x40020088
 8004590:	400200a0 	.word	0x400200a0
 8004594:	400200b8 	.word	0x400200b8
 8004598:	40020410 	.word	0x40020410
 800459c:	40020428 	.word	0x40020428
 80045a0:	40020440 	.word	0x40020440
 80045a4:	40020458 	.word	0x40020458
 80045a8:	40020470 	.word	0x40020470
 80045ac:	40020488 	.word	0x40020488
 80045b0:	400204a0 	.word	0x400204a0
 80045b4:	400204b8 	.word	0x400204b8

080045b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
 80045c4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a7f      	ldr	r2, [pc, #508]	@ (80047d4 <DMA_SetConfig+0x21c>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d072      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a7d      	ldr	r2, [pc, #500]	@ (80047d8 <DMA_SetConfig+0x220>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d06d      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a7c      	ldr	r2, [pc, #496]	@ (80047dc <DMA_SetConfig+0x224>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d068      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a7a      	ldr	r2, [pc, #488]	@ (80047e0 <DMA_SetConfig+0x228>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d063      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a79      	ldr	r2, [pc, #484]	@ (80047e4 <DMA_SetConfig+0x22c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d05e      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a77      	ldr	r2, [pc, #476]	@ (80047e8 <DMA_SetConfig+0x230>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d059      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a76      	ldr	r2, [pc, #472]	@ (80047ec <DMA_SetConfig+0x234>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d054      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a74      	ldr	r2, [pc, #464]	@ (80047f0 <DMA_SetConfig+0x238>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d04f      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a73      	ldr	r2, [pc, #460]	@ (80047f4 <DMA_SetConfig+0x23c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d04a      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a71      	ldr	r2, [pc, #452]	@ (80047f8 <DMA_SetConfig+0x240>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d045      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a70      	ldr	r2, [pc, #448]	@ (80047fc <DMA_SetConfig+0x244>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d040      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a6e      	ldr	r2, [pc, #440]	@ (8004800 <DMA_SetConfig+0x248>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d03b      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a6d      	ldr	r2, [pc, #436]	@ (8004804 <DMA_SetConfig+0x24c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d036      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a6b      	ldr	r2, [pc, #428]	@ (8004808 <DMA_SetConfig+0x250>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d031      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a6a      	ldr	r2, [pc, #424]	@ (800480c <DMA_SetConfig+0x254>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d02c      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a68      	ldr	r2, [pc, #416]	@ (8004810 <DMA_SetConfig+0x258>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d027      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a67      	ldr	r2, [pc, #412]	@ (8004814 <DMA_SetConfig+0x25c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d022      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a65      	ldr	r2, [pc, #404]	@ (8004818 <DMA_SetConfig+0x260>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d01d      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a64      	ldr	r2, [pc, #400]	@ (800481c <DMA_SetConfig+0x264>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d018      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a62      	ldr	r2, [pc, #392]	@ (8004820 <DMA_SetConfig+0x268>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d013      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a61      	ldr	r2, [pc, #388]	@ (8004824 <DMA_SetConfig+0x26c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00e      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a5f      	ldr	r2, [pc, #380]	@ (8004828 <DMA_SetConfig+0x270>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d009      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a5e      	ldr	r2, [pc, #376]	@ (800482c <DMA_SetConfig+0x274>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d004      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a5c      	ldr	r2, [pc, #368]	@ (8004830 <DMA_SetConfig+0x278>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d101      	bne.n	80046c6 <DMA_SetConfig+0x10e>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <DMA_SetConfig+0x110>
 80046c6:	2300      	movs	r3, #0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00d      	beq.n	80046e8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80046d4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d004      	beq.n	80046e8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80046e6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a39      	ldr	r2, [pc, #228]	@ (80047d4 <DMA_SetConfig+0x21c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d04a      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a38      	ldr	r2, [pc, #224]	@ (80047d8 <DMA_SetConfig+0x220>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d045      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a36      	ldr	r2, [pc, #216]	@ (80047dc <DMA_SetConfig+0x224>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d040      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a35      	ldr	r2, [pc, #212]	@ (80047e0 <DMA_SetConfig+0x228>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d03b      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a33      	ldr	r2, [pc, #204]	@ (80047e4 <DMA_SetConfig+0x22c>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d036      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a32      	ldr	r2, [pc, #200]	@ (80047e8 <DMA_SetConfig+0x230>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d031      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a30      	ldr	r2, [pc, #192]	@ (80047ec <DMA_SetConfig+0x234>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d02c      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a2f      	ldr	r2, [pc, #188]	@ (80047f0 <DMA_SetConfig+0x238>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d027      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a2d      	ldr	r2, [pc, #180]	@ (80047f4 <DMA_SetConfig+0x23c>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d022      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a2c      	ldr	r2, [pc, #176]	@ (80047f8 <DMA_SetConfig+0x240>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d01d      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a2a      	ldr	r2, [pc, #168]	@ (80047fc <DMA_SetConfig+0x244>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d018      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a29      	ldr	r2, [pc, #164]	@ (8004800 <DMA_SetConfig+0x248>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d013      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a27      	ldr	r2, [pc, #156]	@ (8004804 <DMA_SetConfig+0x24c>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00e      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a26      	ldr	r2, [pc, #152]	@ (8004808 <DMA_SetConfig+0x250>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d009      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a24      	ldr	r2, [pc, #144]	@ (800480c <DMA_SetConfig+0x254>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d004      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a23      	ldr	r2, [pc, #140]	@ (8004810 <DMA_SetConfig+0x258>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d101      	bne.n	800478c <DMA_SetConfig+0x1d4>
 8004788:	2301      	movs	r3, #1
 800478a:	e000      	b.n	800478e <DMA_SetConfig+0x1d6>
 800478c:	2300      	movs	r3, #0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d059      	beq.n	8004846 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004796:	f003 031f 	and.w	r3, r3, #31
 800479a:	223f      	movs	r2, #63	@ 0x3f
 800479c:	409a      	lsls	r2, r3
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80047b0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	2b40      	cmp	r3, #64	@ 0x40
 80047c0:	d138      	bne.n	8004834 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80047d2:	e086      	b.n	80048e2 <DMA_SetConfig+0x32a>
 80047d4:	40020010 	.word	0x40020010
 80047d8:	40020028 	.word	0x40020028
 80047dc:	40020040 	.word	0x40020040
 80047e0:	40020058 	.word	0x40020058
 80047e4:	40020070 	.word	0x40020070
 80047e8:	40020088 	.word	0x40020088
 80047ec:	400200a0 	.word	0x400200a0
 80047f0:	400200b8 	.word	0x400200b8
 80047f4:	40020410 	.word	0x40020410
 80047f8:	40020428 	.word	0x40020428
 80047fc:	40020440 	.word	0x40020440
 8004800:	40020458 	.word	0x40020458
 8004804:	40020470 	.word	0x40020470
 8004808:	40020488 	.word	0x40020488
 800480c:	400204a0 	.word	0x400204a0
 8004810:	400204b8 	.word	0x400204b8
 8004814:	58025408 	.word	0x58025408
 8004818:	5802541c 	.word	0x5802541c
 800481c:	58025430 	.word	0x58025430
 8004820:	58025444 	.word	0x58025444
 8004824:	58025458 	.word	0x58025458
 8004828:	5802546c 	.word	0x5802546c
 800482c:	58025480 	.word	0x58025480
 8004830:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	60da      	str	r2, [r3, #12]
}
 8004844:	e04d      	b.n	80048e2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a29      	ldr	r2, [pc, #164]	@ (80048f0 <DMA_SetConfig+0x338>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d022      	beq.n	8004896 <DMA_SetConfig+0x2de>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a27      	ldr	r2, [pc, #156]	@ (80048f4 <DMA_SetConfig+0x33c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d01d      	beq.n	8004896 <DMA_SetConfig+0x2de>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a26      	ldr	r2, [pc, #152]	@ (80048f8 <DMA_SetConfig+0x340>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d018      	beq.n	8004896 <DMA_SetConfig+0x2de>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a24      	ldr	r2, [pc, #144]	@ (80048fc <DMA_SetConfig+0x344>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d013      	beq.n	8004896 <DMA_SetConfig+0x2de>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a23      	ldr	r2, [pc, #140]	@ (8004900 <DMA_SetConfig+0x348>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d00e      	beq.n	8004896 <DMA_SetConfig+0x2de>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a21      	ldr	r2, [pc, #132]	@ (8004904 <DMA_SetConfig+0x34c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d009      	beq.n	8004896 <DMA_SetConfig+0x2de>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a20      	ldr	r2, [pc, #128]	@ (8004908 <DMA_SetConfig+0x350>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d004      	beq.n	8004896 <DMA_SetConfig+0x2de>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a1e      	ldr	r2, [pc, #120]	@ (800490c <DMA_SetConfig+0x354>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d101      	bne.n	800489a <DMA_SetConfig+0x2e2>
 8004896:	2301      	movs	r3, #1
 8004898:	e000      	b.n	800489c <DMA_SetConfig+0x2e4>
 800489a:	2300      	movs	r3, #0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d020      	beq.n	80048e2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a4:	f003 031f 	and.w	r3, r3, #31
 80048a8:	2201      	movs	r2, #1
 80048aa:	409a      	lsls	r2, r3
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	2b40      	cmp	r3, #64	@ 0x40
 80048be:	d108      	bne.n	80048d2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	60da      	str	r2, [r3, #12]
}
 80048d0:	e007      	b.n	80048e2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	60da      	str	r2, [r3, #12]
}
 80048e2:	bf00      	nop
 80048e4:	371c      	adds	r7, #28
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	58025408 	.word	0x58025408
 80048f4:	5802541c 	.word	0x5802541c
 80048f8:	58025430 	.word	0x58025430
 80048fc:	58025444 	.word	0x58025444
 8004900:	58025458 	.word	0x58025458
 8004904:	5802546c 	.word	0x5802546c
 8004908:	58025480 	.word	0x58025480
 800490c:	58025494 	.word	0x58025494

08004910 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a42      	ldr	r2, [pc, #264]	@ (8004a28 <DMA_CalcBaseAndBitshift+0x118>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d04a      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a41      	ldr	r2, [pc, #260]	@ (8004a2c <DMA_CalcBaseAndBitshift+0x11c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d045      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a3f      	ldr	r2, [pc, #252]	@ (8004a30 <DMA_CalcBaseAndBitshift+0x120>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d040      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a3e      	ldr	r2, [pc, #248]	@ (8004a34 <DMA_CalcBaseAndBitshift+0x124>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d03b      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a3c      	ldr	r2, [pc, #240]	@ (8004a38 <DMA_CalcBaseAndBitshift+0x128>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d036      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a3b      	ldr	r2, [pc, #236]	@ (8004a3c <DMA_CalcBaseAndBitshift+0x12c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d031      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a39      	ldr	r2, [pc, #228]	@ (8004a40 <DMA_CalcBaseAndBitshift+0x130>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d02c      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a38      	ldr	r2, [pc, #224]	@ (8004a44 <DMA_CalcBaseAndBitshift+0x134>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d027      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a36      	ldr	r2, [pc, #216]	@ (8004a48 <DMA_CalcBaseAndBitshift+0x138>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d022      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a35      	ldr	r2, [pc, #212]	@ (8004a4c <DMA_CalcBaseAndBitshift+0x13c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d01d      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a33      	ldr	r2, [pc, #204]	@ (8004a50 <DMA_CalcBaseAndBitshift+0x140>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d018      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a32      	ldr	r2, [pc, #200]	@ (8004a54 <DMA_CalcBaseAndBitshift+0x144>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d013      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a30      	ldr	r2, [pc, #192]	@ (8004a58 <DMA_CalcBaseAndBitshift+0x148>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d00e      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a2f      	ldr	r2, [pc, #188]	@ (8004a5c <DMA_CalcBaseAndBitshift+0x14c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d009      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a2d      	ldr	r2, [pc, #180]	@ (8004a60 <DMA_CalcBaseAndBitshift+0x150>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d004      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a2c      	ldr	r2, [pc, #176]	@ (8004a64 <DMA_CalcBaseAndBitshift+0x154>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d101      	bne.n	80049bc <DMA_CalcBaseAndBitshift+0xac>
 80049b8:	2301      	movs	r3, #1
 80049ba:	e000      	b.n	80049be <DMA_CalcBaseAndBitshift+0xae>
 80049bc:	2300      	movs	r3, #0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d024      	beq.n	8004a0c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	3b10      	subs	r3, #16
 80049ca:	4a27      	ldr	r2, [pc, #156]	@ (8004a68 <DMA_CalcBaseAndBitshift+0x158>)
 80049cc:	fba2 2303 	umull	r2, r3, r2, r3
 80049d0:	091b      	lsrs	r3, r3, #4
 80049d2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	4a24      	ldr	r2, [pc, #144]	@ (8004a6c <DMA_CalcBaseAndBitshift+0x15c>)
 80049dc:	5cd3      	ldrb	r3, [r2, r3]
 80049de:	461a      	mov	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	d908      	bls.n	80049fc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	461a      	mov	r2, r3
 80049f0:	4b1f      	ldr	r3, [pc, #124]	@ (8004a70 <DMA_CalcBaseAndBitshift+0x160>)
 80049f2:	4013      	ands	r3, r2
 80049f4:	1d1a      	adds	r2, r3, #4
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80049fa:	e00d      	b.n	8004a18 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	461a      	mov	r2, r3
 8004a02:	4b1b      	ldr	r3, [pc, #108]	@ (8004a70 <DMA_CalcBaseAndBitshift+0x160>)
 8004a04:	4013      	ands	r3, r2
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a0a:	e005      	b.n	8004a18 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	40020010 	.word	0x40020010
 8004a2c:	40020028 	.word	0x40020028
 8004a30:	40020040 	.word	0x40020040
 8004a34:	40020058 	.word	0x40020058
 8004a38:	40020070 	.word	0x40020070
 8004a3c:	40020088 	.word	0x40020088
 8004a40:	400200a0 	.word	0x400200a0
 8004a44:	400200b8 	.word	0x400200b8
 8004a48:	40020410 	.word	0x40020410
 8004a4c:	40020428 	.word	0x40020428
 8004a50:	40020440 	.word	0x40020440
 8004a54:	40020458 	.word	0x40020458
 8004a58:	40020470 	.word	0x40020470
 8004a5c:	40020488 	.word	0x40020488
 8004a60:	400204a0 	.word	0x400204a0
 8004a64:	400204b8 	.word	0x400204b8
 8004a68:	aaaaaaab 	.word	0xaaaaaaab
 8004a6c:	0800aacc 	.word	0x0800aacc
 8004a70:	fffffc00 	.word	0xfffffc00

08004a74 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d120      	bne.n	8004aca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8c:	2b03      	cmp	r3, #3
 8004a8e:	d858      	bhi.n	8004b42 <DMA_CheckFifoParam+0xce>
 8004a90:	a201      	add	r2, pc, #4	@ (adr r2, 8004a98 <DMA_CheckFifoParam+0x24>)
 8004a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a96:	bf00      	nop
 8004a98:	08004aa9 	.word	0x08004aa9
 8004a9c:	08004abb 	.word	0x08004abb
 8004aa0:	08004aa9 	.word	0x08004aa9
 8004aa4:	08004b43 	.word	0x08004b43
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d048      	beq.n	8004b46 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ab8:	e045      	b.n	8004b46 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004abe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ac2:	d142      	bne.n	8004b4a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ac8:	e03f      	b.n	8004b4a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ad2:	d123      	bne.n	8004b1c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad8:	2b03      	cmp	r3, #3
 8004ada:	d838      	bhi.n	8004b4e <DMA_CheckFifoParam+0xda>
 8004adc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae4 <DMA_CheckFifoParam+0x70>)
 8004ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae2:	bf00      	nop
 8004ae4:	08004af5 	.word	0x08004af5
 8004ae8:	08004afb 	.word	0x08004afb
 8004aec:	08004af5 	.word	0x08004af5
 8004af0:	08004b0d 	.word	0x08004b0d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	73fb      	strb	r3, [r7, #15]
        break;
 8004af8:	e030      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004afe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d025      	beq.n	8004b52 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b0a:	e022      	b.n	8004b52 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b10:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b14:	d11f      	bne.n	8004b56 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b1a:	e01c      	b.n	8004b56 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d902      	bls.n	8004b2a <DMA_CheckFifoParam+0xb6>
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d003      	beq.n	8004b30 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004b28:	e018      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	73fb      	strb	r3, [r7, #15]
        break;
 8004b2e:	e015      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00e      	beq.n	8004b5a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	73fb      	strb	r3, [r7, #15]
    break;
 8004b40:	e00b      	b.n	8004b5a <DMA_CheckFifoParam+0xe6>
        break;
 8004b42:	bf00      	nop
 8004b44:	e00a      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
        break;
 8004b46:	bf00      	nop
 8004b48:	e008      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
        break;
 8004b4a:	bf00      	nop
 8004b4c:	e006      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
        break;
 8004b4e:	bf00      	nop
 8004b50:	e004      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
        break;
 8004b52:	bf00      	nop
 8004b54:	e002      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
        break;
 8004b56:	bf00      	nop
 8004b58:	e000      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
    break;
 8004b5a:	bf00      	nop
    }
  }

  return status;
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop

08004b6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a38      	ldr	r2, [pc, #224]	@ (8004c60 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d022      	beq.n	8004bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a36      	ldr	r2, [pc, #216]	@ (8004c64 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d01d      	beq.n	8004bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a35      	ldr	r2, [pc, #212]	@ (8004c68 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d018      	beq.n	8004bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a33      	ldr	r2, [pc, #204]	@ (8004c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d013      	beq.n	8004bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a32      	ldr	r2, [pc, #200]	@ (8004c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d00e      	beq.n	8004bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a30      	ldr	r2, [pc, #192]	@ (8004c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d009      	beq.n	8004bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a2f      	ldr	r2, [pc, #188]	@ (8004c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d004      	beq.n	8004bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a2d      	ldr	r2, [pc, #180]	@ (8004c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d101      	bne.n	8004bce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e000      	b.n	8004bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d01a      	beq.n	8004c0a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	3b08      	subs	r3, #8
 8004bdc:	4a28      	ldr	r2, [pc, #160]	@ (8004c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004bde:	fba2 2303 	umull	r2, r3, r2, r3
 8004be2:	091b      	lsrs	r3, r3, #4
 8004be4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	4b26      	ldr	r3, [pc, #152]	@ (8004c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004bea:	4413      	add	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	461a      	mov	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a24      	ldr	r2, [pc, #144]	@ (8004c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004bf8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f003 031f 	and.w	r3, r3, #31
 8004c00:	2201      	movs	r2, #1
 8004c02:	409a      	lsls	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004c08:	e024      	b.n	8004c54 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	3b10      	subs	r3, #16
 8004c12:	4a1e      	ldr	r2, [pc, #120]	@ (8004c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004c14:	fba2 2303 	umull	r2, r3, r2, r3
 8004c18:	091b      	lsrs	r3, r3, #4
 8004c1a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8004c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d806      	bhi.n	8004c32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	4a1b      	ldr	r2, [pc, #108]	@ (8004c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d902      	bls.n	8004c32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	3308      	adds	r3, #8
 8004c30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	4b18      	ldr	r3, [pc, #96]	@ (8004c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004c36:	4413      	add	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a16      	ldr	r2, [pc, #88]	@ (8004c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004c44:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f003 031f 	and.w	r3, r3, #31
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	409a      	lsls	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004c54:	bf00      	nop
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	58025408 	.word	0x58025408
 8004c64:	5802541c 	.word	0x5802541c
 8004c68:	58025430 	.word	0x58025430
 8004c6c:	58025444 	.word	0x58025444
 8004c70:	58025458 	.word	0x58025458
 8004c74:	5802546c 	.word	0x5802546c
 8004c78:	58025480 	.word	0x58025480
 8004c7c:	58025494 	.word	0x58025494
 8004c80:	cccccccd 	.word	0xcccccccd
 8004c84:	16009600 	.word	0x16009600
 8004c88:	58025880 	.word	0x58025880
 8004c8c:	aaaaaaab 	.word	0xaaaaaaab
 8004c90:	400204b8 	.word	0x400204b8
 8004c94:	4002040f 	.word	0x4002040f
 8004c98:	10008200 	.word	0x10008200
 8004c9c:	40020880 	.word	0x40020880

08004ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d04a      	beq.n	8004d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d847      	bhi.n	8004d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a25      	ldr	r2, [pc, #148]	@ (8004d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d022      	beq.n	8004d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a24      	ldr	r2, [pc, #144]	@ (8004d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d01d      	beq.n	8004d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a22      	ldr	r2, [pc, #136]	@ (8004d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d018      	beq.n	8004d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a21      	ldr	r2, [pc, #132]	@ (8004d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d013      	beq.n	8004d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a1f      	ldr	r2, [pc, #124]	@ (8004d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00e      	beq.n	8004d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8004d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d009      	beq.n	8004d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a1c      	ldr	r2, [pc, #112]	@ (8004d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d004      	beq.n	8004d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a1b      	ldr	r2, [pc, #108]	@ (8004d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d101      	bne.n	8004d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e000      	b.n	8004d12 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004d10:	2300      	movs	r3, #0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4b17      	ldr	r3, [pc, #92]	@ (8004d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004d1a:	4413      	add	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	461a      	mov	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a15      	ldr	r2, [pc, #84]	@ (8004d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004d28:	671a      	str	r2, [r3, #112]	@ 0x70
 8004d2a:	e009      	b.n	8004d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	4b14      	ldr	r3, [pc, #80]	@ (8004d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004d30:	4413      	add	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	461a      	mov	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a11      	ldr	r2, [pc, #68]	@ (8004d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004d3e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	2201      	movs	r2, #1
 8004d46:	409a      	lsls	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004d4c:	bf00      	nop
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	58025408 	.word	0x58025408
 8004d5c:	5802541c 	.word	0x5802541c
 8004d60:	58025430 	.word	0x58025430
 8004d64:	58025444 	.word	0x58025444
 8004d68:	58025458 	.word	0x58025458
 8004d6c:	5802546c 	.word	0x5802546c
 8004d70:	58025480 	.word	0x58025480
 8004d74:	58025494 	.word	0x58025494
 8004d78:	1600963f 	.word	0x1600963f
 8004d7c:	58025940 	.word	0x58025940
 8004d80:	1000823f 	.word	0x1000823f
 8004d84:	40020940 	.word	0x40020940

08004d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b089      	sub	sp, #36	@ 0x24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004d96:	4b89      	ldr	r3, [pc, #548]	@ (8004fbc <HAL_GPIO_Init+0x234>)
 8004d98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004d9a:	e194      	b.n	80050c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	2101      	movs	r1, #1
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	fa01 f303 	lsl.w	r3, r1, r3
 8004da8:	4013      	ands	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 8186 	beq.w	80050c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 0303 	and.w	r3, r3, #3
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d005      	beq.n	8004dcc <HAL_GPIO_Init+0x44>
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f003 0303 	and.w	r3, r3, #3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d130      	bne.n	8004e2e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	2203      	movs	r2, #3
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	4013      	ands	r3, r2
 8004de2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e02:	2201      	movs	r2, #1
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0a:	43db      	mvns	r3, r3
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	091b      	lsrs	r3, r3, #4
 8004e18:	f003 0201 	and.w	r2, r3, #1
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f003 0303 	and.w	r3, r3, #3
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d017      	beq.n	8004e6a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	2203      	movs	r2, #3
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	43db      	mvns	r3, r3
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	689a      	ldr	r2, [r3, #8]
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d123      	bne.n	8004ebe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	08da      	lsrs	r2, r3, #3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	3208      	adds	r2, #8
 8004e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	f003 0307 	and.w	r3, r3, #7
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	220f      	movs	r2, #15
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	43db      	mvns	r3, r3
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	4013      	ands	r3, r2
 8004e98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	691a      	ldr	r2, [r3, #16]
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	08da      	lsrs	r2, r3, #3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3208      	adds	r2, #8
 8004eb8:	69b9      	ldr	r1, [r7, #24]
 8004eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	2203      	movs	r2, #3
 8004eca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f003 0203 	and.w	r2, r3, #3
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 80e0 	beq.w	80050c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f00:	4b2f      	ldr	r3, [pc, #188]	@ (8004fc0 <HAL_GPIO_Init+0x238>)
 8004f02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f06:	4a2e      	ldr	r2, [pc, #184]	@ (8004fc0 <HAL_GPIO_Init+0x238>)
 8004f08:	f043 0302 	orr.w	r3, r3, #2
 8004f0c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004f10:	4b2b      	ldr	r3, [pc, #172]	@ (8004fc0 <HAL_GPIO_Init+0x238>)
 8004f12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f1e:	4a29      	ldr	r2, [pc, #164]	@ (8004fc4 <HAL_GPIO_Init+0x23c>)
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	089b      	lsrs	r3, r3, #2
 8004f24:	3302      	adds	r3, #2
 8004f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	220f      	movs	r2, #15
 8004f36:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3a:	43db      	mvns	r3, r3
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	4013      	ands	r3, r2
 8004f40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a20      	ldr	r2, [pc, #128]	@ (8004fc8 <HAL_GPIO_Init+0x240>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d052      	beq.n	8004ff0 <HAL_GPIO_Init+0x268>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a1f      	ldr	r2, [pc, #124]	@ (8004fcc <HAL_GPIO_Init+0x244>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d031      	beq.n	8004fb6 <HAL_GPIO_Init+0x22e>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a1e      	ldr	r2, [pc, #120]	@ (8004fd0 <HAL_GPIO_Init+0x248>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d02b      	beq.n	8004fb2 <HAL_GPIO_Init+0x22a>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8004fd4 <HAL_GPIO_Init+0x24c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d025      	beq.n	8004fae <HAL_GPIO_Init+0x226>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a1c      	ldr	r2, [pc, #112]	@ (8004fd8 <HAL_GPIO_Init+0x250>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d01f      	beq.n	8004faa <HAL_GPIO_Init+0x222>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8004fdc <HAL_GPIO_Init+0x254>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d019      	beq.n	8004fa6 <HAL_GPIO_Init+0x21e>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a1a      	ldr	r2, [pc, #104]	@ (8004fe0 <HAL_GPIO_Init+0x258>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d013      	beq.n	8004fa2 <HAL_GPIO_Init+0x21a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a19      	ldr	r2, [pc, #100]	@ (8004fe4 <HAL_GPIO_Init+0x25c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00d      	beq.n	8004f9e <HAL_GPIO_Init+0x216>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a18      	ldr	r2, [pc, #96]	@ (8004fe8 <HAL_GPIO_Init+0x260>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d007      	beq.n	8004f9a <HAL_GPIO_Init+0x212>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a17      	ldr	r2, [pc, #92]	@ (8004fec <HAL_GPIO_Init+0x264>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d101      	bne.n	8004f96 <HAL_GPIO_Init+0x20e>
 8004f92:	2309      	movs	r3, #9
 8004f94:	e02d      	b.n	8004ff2 <HAL_GPIO_Init+0x26a>
 8004f96:	230a      	movs	r3, #10
 8004f98:	e02b      	b.n	8004ff2 <HAL_GPIO_Init+0x26a>
 8004f9a:	2308      	movs	r3, #8
 8004f9c:	e029      	b.n	8004ff2 <HAL_GPIO_Init+0x26a>
 8004f9e:	2307      	movs	r3, #7
 8004fa0:	e027      	b.n	8004ff2 <HAL_GPIO_Init+0x26a>
 8004fa2:	2306      	movs	r3, #6
 8004fa4:	e025      	b.n	8004ff2 <HAL_GPIO_Init+0x26a>
 8004fa6:	2305      	movs	r3, #5
 8004fa8:	e023      	b.n	8004ff2 <HAL_GPIO_Init+0x26a>
 8004faa:	2304      	movs	r3, #4
 8004fac:	e021      	b.n	8004ff2 <HAL_GPIO_Init+0x26a>
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e01f      	b.n	8004ff2 <HAL_GPIO_Init+0x26a>
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	e01d      	b.n	8004ff2 <HAL_GPIO_Init+0x26a>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e01b      	b.n	8004ff2 <HAL_GPIO_Init+0x26a>
 8004fba:	bf00      	nop
 8004fbc:	58000080 	.word	0x58000080
 8004fc0:	58024400 	.word	0x58024400
 8004fc4:	58000400 	.word	0x58000400
 8004fc8:	58020000 	.word	0x58020000
 8004fcc:	58020400 	.word	0x58020400
 8004fd0:	58020800 	.word	0x58020800
 8004fd4:	58020c00 	.word	0x58020c00
 8004fd8:	58021000 	.word	0x58021000
 8004fdc:	58021400 	.word	0x58021400
 8004fe0:	58021800 	.word	0x58021800
 8004fe4:	58021c00 	.word	0x58021c00
 8004fe8:	58022000 	.word	0x58022000
 8004fec:	58022400 	.word	0x58022400
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	69fa      	ldr	r2, [r7, #28]
 8004ff4:	f002 0203 	and.w	r2, r2, #3
 8004ff8:	0092      	lsls	r2, r2, #2
 8004ffa:	4093      	lsls	r3, r2
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005002:	4938      	ldr	r1, [pc, #224]	@ (80050e4 <HAL_GPIO_Init+0x35c>)
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	089b      	lsrs	r3, r3, #2
 8005008:	3302      	adds	r3, #2
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005010:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	43db      	mvns	r3, r3
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	4013      	ands	r3, r2
 8005020:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	4313      	orrs	r3, r2
 8005034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005036:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800503e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	43db      	mvns	r3, r3
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	4013      	ands	r3, r2
 800504e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	4313      	orrs	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005064:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	43db      	mvns	r3, r3
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	4013      	ands	r3, r2
 800507a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	4313      	orrs	r3, r2
 800508e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	43db      	mvns	r3, r3
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	4013      	ands	r3, r2
 80050a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	3301      	adds	r3, #1
 80050c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	fa22 f303 	lsr.w	r3, r2, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f47f ae63 	bne.w	8004d9c <HAL_GPIO_Init+0x14>
  }
}
 80050d6:	bf00      	nop
 80050d8:	bf00      	nop
 80050da:	3724      	adds	r7, #36	@ 0x24
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	58000400 	.word	0x58000400

080050e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	460b      	mov	r3, r1
 80050f2:	807b      	strh	r3, [r7, #2]
 80050f4:	4613      	mov	r3, r2
 80050f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050f8:	787b      	ldrb	r3, [r7, #1]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050fe:	887a      	ldrh	r2, [r7, #2]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005104:	e003      	b.n	800510e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005106:	887b      	ldrh	r3, [r7, #2]
 8005108:	041a      	lsls	r2, r3, #16
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	619a      	str	r2, [r3, #24]
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800511a:	b480      	push	{r7}
 800511c:	b085      	sub	sp, #20
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	460b      	mov	r3, r1
 8005124:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800512c:	887a      	ldrh	r2, [r7, #2]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4013      	ands	r3, r2
 8005132:	041a      	lsls	r2, r3, #16
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	43d9      	mvns	r1, r3
 8005138:	887b      	ldrh	r3, [r7, #2]
 800513a:	400b      	ands	r3, r1
 800513c:	431a      	orrs	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	619a      	str	r2, [r3, #24]
}
 8005142:	bf00      	nop
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b082      	sub	sp, #8
 8005152:	af00      	add	r7, sp, #0
 8005154:	4603      	mov	r3, r0
 8005156:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005158:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800515c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005160:	88fb      	ldrh	r3, [r7, #6]
 8005162:	4013      	ands	r3, r2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d008      	beq.n	800517a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005168:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800516c:	88fb      	ldrh	r3, [r7, #6]
 800516e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005172:	88fb      	ldrh	r3, [r7, #6]
 8005174:	4618      	mov	r0, r3
 8005176:	f7fb f9d1 	bl	800051c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800517a:	bf00      	nop
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
	...

08005184 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800518c:	4b29      	ldr	r3, [pc, #164]	@ (8005234 <HAL_PWREx_ConfigSupply+0xb0>)
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	2b06      	cmp	r3, #6
 8005196:	d00a      	beq.n	80051ae <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005198:	4b26      	ldr	r3, [pc, #152]	@ (8005234 <HAL_PWREx_ConfigSupply+0xb0>)
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d001      	beq.n	80051aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e040      	b.n	800522c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80051aa:	2300      	movs	r3, #0
 80051ac:	e03e      	b.n	800522c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80051ae:	4b21      	ldr	r3, [pc, #132]	@ (8005234 <HAL_PWREx_ConfigSupply+0xb0>)
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80051b6:	491f      	ldr	r1, [pc, #124]	@ (8005234 <HAL_PWREx_ConfigSupply+0xb0>)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80051be:	f7fb fe99 	bl	8000ef4 <HAL_GetTick>
 80051c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80051c4:	e009      	b.n	80051da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80051c6:	f7fb fe95 	bl	8000ef4 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80051d4:	d901      	bls.n	80051da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e028      	b.n	800522c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80051da:	4b16      	ldr	r3, [pc, #88]	@ (8005234 <HAL_PWREx_ConfigSupply+0xb0>)
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051e6:	d1ee      	bne.n	80051c6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b1e      	cmp	r3, #30
 80051ec:	d008      	beq.n	8005200 <HAL_PWREx_ConfigSupply+0x7c>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80051f2:	d005      	beq.n	8005200 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b1d      	cmp	r3, #29
 80051f8:	d002      	beq.n	8005200 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b2d      	cmp	r3, #45	@ 0x2d
 80051fe:	d114      	bne.n	800522a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005200:	f7fb fe78 	bl	8000ef4 <HAL_GetTick>
 8005204:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005206:	e009      	b.n	800521c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005208:	f7fb fe74 	bl	8000ef4 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005216:	d901      	bls.n	800521c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e007      	b.n	800522c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800521c:	4b05      	ldr	r3, [pc, #20]	@ (8005234 <HAL_PWREx_ConfigSupply+0xb0>)
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005228:	d1ee      	bne.n	8005208 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	58024800 	.word	0x58024800

08005238 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08c      	sub	sp, #48	@ 0x30
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d102      	bne.n	800524c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	f000 bc48 	b.w	8005adc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 8088 	beq.w	800536a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800525a:	4b99      	ldr	r3, [pc, #612]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005262:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005264:	4b96      	ldr	r3, [pc, #600]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 8005266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005268:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800526a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800526c:	2b10      	cmp	r3, #16
 800526e:	d007      	beq.n	8005280 <HAL_RCC_OscConfig+0x48>
 8005270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005272:	2b18      	cmp	r3, #24
 8005274:	d111      	bne.n	800529a <HAL_RCC_OscConfig+0x62>
 8005276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005278:	f003 0303 	and.w	r3, r3, #3
 800527c:	2b02      	cmp	r3, #2
 800527e:	d10c      	bne.n	800529a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005280:	4b8f      	ldr	r3, [pc, #572]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d06d      	beq.n	8005368 <HAL_RCC_OscConfig+0x130>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d169      	bne.n	8005368 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	f000 bc21 	b.w	8005adc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052a2:	d106      	bne.n	80052b2 <HAL_RCC_OscConfig+0x7a>
 80052a4:	4b86      	ldr	r3, [pc, #536]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a85      	ldr	r2, [pc, #532]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 80052aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052ae:	6013      	str	r3, [r2, #0]
 80052b0:	e02e      	b.n	8005310 <HAL_RCC_OscConfig+0xd8>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10c      	bne.n	80052d4 <HAL_RCC_OscConfig+0x9c>
 80052ba:	4b81      	ldr	r3, [pc, #516]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a80      	ldr	r2, [pc, #512]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 80052c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052c4:	6013      	str	r3, [r2, #0]
 80052c6:	4b7e      	ldr	r3, [pc, #504]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a7d      	ldr	r2, [pc, #500]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 80052cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052d0:	6013      	str	r3, [r2, #0]
 80052d2:	e01d      	b.n	8005310 <HAL_RCC_OscConfig+0xd8>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052dc:	d10c      	bne.n	80052f8 <HAL_RCC_OscConfig+0xc0>
 80052de:	4b78      	ldr	r3, [pc, #480]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a77      	ldr	r2, [pc, #476]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 80052e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052e8:	6013      	str	r3, [r2, #0]
 80052ea:	4b75      	ldr	r3, [pc, #468]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a74      	ldr	r2, [pc, #464]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 80052f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	e00b      	b.n	8005310 <HAL_RCC_OscConfig+0xd8>
 80052f8:	4b71      	ldr	r3, [pc, #452]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a70      	ldr	r2, [pc, #448]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 80052fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005302:	6013      	str	r3, [r2, #0]
 8005304:	4b6e      	ldr	r3, [pc, #440]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a6d      	ldr	r2, [pc, #436]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 800530a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800530e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d013      	beq.n	8005340 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005318:	f7fb fdec 	bl	8000ef4 <HAL_GetTick>
 800531c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005320:	f7fb fde8 	bl	8000ef4 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b64      	cmp	r3, #100	@ 0x64
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e3d4      	b.n	8005adc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005332:	4b63      	ldr	r3, [pc, #396]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0f0      	beq.n	8005320 <HAL_RCC_OscConfig+0xe8>
 800533e:	e014      	b.n	800536a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005340:	f7fb fdd8 	bl	8000ef4 <HAL_GetTick>
 8005344:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005348:	f7fb fdd4 	bl	8000ef4 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b64      	cmp	r3, #100	@ 0x64
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e3c0      	b.n	8005adc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800535a:	4b59      	ldr	r3, [pc, #356]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1f0      	bne.n	8005348 <HAL_RCC_OscConfig+0x110>
 8005366:	e000      	b.n	800536a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 80ca 	beq.w	800550c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005378:	4b51      	ldr	r3, [pc, #324]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005380:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005382:	4b4f      	ldr	r3, [pc, #316]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 8005384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005386:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d007      	beq.n	800539e <HAL_RCC_OscConfig+0x166>
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	2b18      	cmp	r3, #24
 8005392:	d156      	bne.n	8005442 <HAL_RCC_OscConfig+0x20a>
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	f003 0303 	and.w	r3, r3, #3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d151      	bne.n	8005442 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800539e:	4b48      	ldr	r3, [pc, #288]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0304 	and.w	r3, r3, #4
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d005      	beq.n	80053b6 <HAL_RCC_OscConfig+0x17e>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e392      	b.n	8005adc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80053b6:	4b42      	ldr	r3, [pc, #264]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f023 0219 	bic.w	r2, r3, #25
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	493f      	ldr	r1, [pc, #252]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c8:	f7fb fd94 	bl	8000ef4 <HAL_GetTick>
 80053cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053d0:	f7fb fd90 	bl	8000ef4 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e37c      	b.n	8005adc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053e2:	4b37      	ldr	r3, [pc, #220]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0304 	and.w	r3, r3, #4
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d0f0      	beq.n	80053d0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ee:	f7fb fd8d 	bl	8000f0c <HAL_GetREVID>
 80053f2:	4603      	mov	r3, r0
 80053f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d817      	bhi.n	800542c <HAL_RCC_OscConfig+0x1f4>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	2b40      	cmp	r3, #64	@ 0x40
 8005402:	d108      	bne.n	8005416 <HAL_RCC_OscConfig+0x1de>
 8005404:	4b2e      	ldr	r3, [pc, #184]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800540c:	4a2c      	ldr	r2, [pc, #176]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 800540e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005412:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005414:	e07a      	b.n	800550c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005416:	4b2a      	ldr	r3, [pc, #168]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	031b      	lsls	r3, r3, #12
 8005424:	4926      	ldr	r1, [pc, #152]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 8005426:	4313      	orrs	r3, r2
 8005428:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800542a:	e06f      	b.n	800550c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800542c:	4b24      	ldr	r3, [pc, #144]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	061b      	lsls	r3, r3, #24
 800543a:	4921      	ldr	r1, [pc, #132]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 800543c:	4313      	orrs	r3, r2
 800543e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005440:	e064      	b.n	800550c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d047      	beq.n	80054da <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800544a:	4b1d      	ldr	r3, [pc, #116]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f023 0219 	bic.w	r2, r3, #25
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	491a      	ldr	r1, [pc, #104]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 8005458:	4313      	orrs	r3, r2
 800545a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800545c:	f7fb fd4a 	bl	8000ef4 <HAL_GetTick>
 8005460:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005464:	f7fb fd46 	bl	8000ef4 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e332      	b.n	8005adc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005476:	4b12      	ldr	r3, [pc, #72]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0f0      	beq.n	8005464 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005482:	f7fb fd43 	bl	8000f0c <HAL_GetREVID>
 8005486:	4603      	mov	r3, r0
 8005488:	f241 0203 	movw	r2, #4099	@ 0x1003
 800548c:	4293      	cmp	r3, r2
 800548e:	d819      	bhi.n	80054c4 <HAL_RCC_OscConfig+0x28c>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	2b40      	cmp	r3, #64	@ 0x40
 8005496:	d108      	bne.n	80054aa <HAL_RCC_OscConfig+0x272>
 8005498:	4b09      	ldr	r3, [pc, #36]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80054a0:	4a07      	ldr	r2, [pc, #28]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 80054a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054a6:	6053      	str	r3, [r2, #4]
 80054a8:	e030      	b.n	800550c <HAL_RCC_OscConfig+0x2d4>
 80054aa:	4b05      	ldr	r3, [pc, #20]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	031b      	lsls	r3, r3, #12
 80054b8:	4901      	ldr	r1, [pc, #4]	@ (80054c0 <HAL_RCC_OscConfig+0x288>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	604b      	str	r3, [r1, #4]
 80054be:	e025      	b.n	800550c <HAL_RCC_OscConfig+0x2d4>
 80054c0:	58024400 	.word	0x58024400
 80054c4:	4b9a      	ldr	r3, [pc, #616]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	061b      	lsls	r3, r3, #24
 80054d2:	4997      	ldr	r1, [pc, #604]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	604b      	str	r3, [r1, #4]
 80054d8:	e018      	b.n	800550c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054da:	4b95      	ldr	r3, [pc, #596]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a94      	ldr	r2, [pc, #592]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 80054e0:	f023 0301 	bic.w	r3, r3, #1
 80054e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e6:	f7fb fd05 	bl	8000ef4 <HAL_GetTick>
 80054ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054ec:	e008      	b.n	8005500 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054ee:	f7fb fd01 	bl	8000ef4 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e2ed      	b.n	8005adc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005500:	4b8b      	ldr	r3, [pc, #556]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1f0      	bne.n	80054ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0310 	and.w	r3, r3, #16
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 80a9 	beq.w	800566c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800551a:	4b85      	ldr	r3, [pc, #532]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005522:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005524:	4b82      	ldr	r3, [pc, #520]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 8005526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005528:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	2b08      	cmp	r3, #8
 800552e:	d007      	beq.n	8005540 <HAL_RCC_OscConfig+0x308>
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	2b18      	cmp	r3, #24
 8005534:	d13a      	bne.n	80055ac <HAL_RCC_OscConfig+0x374>
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f003 0303 	and.w	r3, r3, #3
 800553c:	2b01      	cmp	r3, #1
 800553e:	d135      	bne.n	80055ac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005540:	4b7b      	ldr	r3, [pc, #492]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005548:	2b00      	cmp	r3, #0
 800554a:	d005      	beq.n	8005558 <HAL_RCC_OscConfig+0x320>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	2b80      	cmp	r3, #128	@ 0x80
 8005552:	d001      	beq.n	8005558 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e2c1      	b.n	8005adc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005558:	f7fb fcd8 	bl	8000f0c <HAL_GetREVID>
 800555c:	4603      	mov	r3, r0
 800555e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005562:	4293      	cmp	r3, r2
 8005564:	d817      	bhi.n	8005596 <HAL_RCC_OscConfig+0x35e>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	2b20      	cmp	r3, #32
 800556c:	d108      	bne.n	8005580 <HAL_RCC_OscConfig+0x348>
 800556e:	4b70      	ldr	r3, [pc, #448]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005576:	4a6e      	ldr	r2, [pc, #440]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 8005578:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800557c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800557e:	e075      	b.n	800566c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005580:	4b6b      	ldr	r3, [pc, #428]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	069b      	lsls	r3, r3, #26
 800558e:	4968      	ldr	r1, [pc, #416]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 8005590:	4313      	orrs	r3, r2
 8005592:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005594:	e06a      	b.n	800566c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005596:	4b66      	ldr	r3, [pc, #408]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	061b      	lsls	r3, r3, #24
 80055a4:	4962      	ldr	r1, [pc, #392]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055aa:	e05f      	b.n	800566c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d042      	beq.n	800563a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80055b4:	4b5e      	ldr	r3, [pc, #376]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a5d      	ldr	r2, [pc, #372]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 80055ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c0:	f7fb fc98 	bl	8000ef4 <HAL_GetTick>
 80055c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055c6:	e008      	b.n	80055da <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80055c8:	f7fb fc94 	bl	8000ef4 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d901      	bls.n	80055da <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e280      	b.n	8005adc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055da:	4b55      	ldr	r3, [pc, #340]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0f0      	beq.n	80055c8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055e6:	f7fb fc91 	bl	8000f0c <HAL_GetREVID>
 80055ea:	4603      	mov	r3, r0
 80055ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d817      	bhi.n	8005624 <HAL_RCC_OscConfig+0x3ec>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	2b20      	cmp	r3, #32
 80055fa:	d108      	bne.n	800560e <HAL_RCC_OscConfig+0x3d6>
 80055fc:	4b4c      	ldr	r3, [pc, #304]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005604:	4a4a      	ldr	r2, [pc, #296]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 8005606:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800560a:	6053      	str	r3, [r2, #4]
 800560c:	e02e      	b.n	800566c <HAL_RCC_OscConfig+0x434>
 800560e:	4b48      	ldr	r3, [pc, #288]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	069b      	lsls	r3, r3, #26
 800561c:	4944      	ldr	r1, [pc, #272]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 800561e:	4313      	orrs	r3, r2
 8005620:	604b      	str	r3, [r1, #4]
 8005622:	e023      	b.n	800566c <HAL_RCC_OscConfig+0x434>
 8005624:	4b42      	ldr	r3, [pc, #264]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	061b      	lsls	r3, r3, #24
 8005632:	493f      	ldr	r1, [pc, #252]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 8005634:	4313      	orrs	r3, r2
 8005636:	60cb      	str	r3, [r1, #12]
 8005638:	e018      	b.n	800566c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800563a:	4b3d      	ldr	r3, [pc, #244]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a3c      	ldr	r2, [pc, #240]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 8005640:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005646:	f7fb fc55 	bl	8000ef4 <HAL_GetTick>
 800564a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800564c:	e008      	b.n	8005660 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800564e:	f7fb fc51 	bl	8000ef4 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e23d      	b.n	8005adc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005660:	4b33      	ldr	r3, [pc, #204]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1f0      	bne.n	800564e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b00      	cmp	r3, #0
 8005676:	d036      	beq.n	80056e6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d019      	beq.n	80056b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005680:	4b2b      	ldr	r3, [pc, #172]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 8005682:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005684:	4a2a      	ldr	r2, [pc, #168]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 8005686:	f043 0301 	orr.w	r3, r3, #1
 800568a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800568c:	f7fb fc32 	bl	8000ef4 <HAL_GetTick>
 8005690:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005692:	e008      	b.n	80056a6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005694:	f7fb fc2e 	bl	8000ef4 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e21a      	b.n	8005adc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056a6:	4b22      	ldr	r3, [pc, #136]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 80056a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d0f0      	beq.n	8005694 <HAL_RCC_OscConfig+0x45c>
 80056b2:	e018      	b.n	80056e6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056b4:	4b1e      	ldr	r3, [pc, #120]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 80056b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 80056ba:	f023 0301 	bic.w	r3, r3, #1
 80056be:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c0:	f7fb fc18 	bl	8000ef4 <HAL_GetTick>
 80056c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056c6:	e008      	b.n	80056da <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056c8:	f7fb fc14 	bl	8000ef4 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e200      	b.n	8005adc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056da:	4b15      	ldr	r3, [pc, #84]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 80056dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1f0      	bne.n	80056c8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0320 	and.w	r3, r3, #32
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d039      	beq.n	8005766 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d01c      	beq.n	8005734 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a0c      	ldr	r2, [pc, #48]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 8005700:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005704:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005706:	f7fb fbf5 	bl	8000ef4 <HAL_GetTick>
 800570a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800570c:	e008      	b.n	8005720 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800570e:	f7fb fbf1 	bl	8000ef4 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d901      	bls.n	8005720 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e1dd      	b.n	8005adc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005720:	4b03      	ldr	r3, [pc, #12]	@ (8005730 <HAL_RCC_OscConfig+0x4f8>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0f0      	beq.n	800570e <HAL_RCC_OscConfig+0x4d6>
 800572c:	e01b      	b.n	8005766 <HAL_RCC_OscConfig+0x52e>
 800572e:	bf00      	nop
 8005730:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005734:	4b9b      	ldr	r3, [pc, #620]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a9a      	ldr	r2, [pc, #616]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 800573a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800573e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005740:	f7fb fbd8 	bl	8000ef4 <HAL_GetTick>
 8005744:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005746:	e008      	b.n	800575a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005748:	f7fb fbd4 	bl	8000ef4 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b02      	cmp	r3, #2
 8005754:	d901      	bls.n	800575a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e1c0      	b.n	8005adc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800575a:	4b92      	ldr	r3, [pc, #584]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1f0      	bne.n	8005748 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0304 	and.w	r3, r3, #4
 800576e:	2b00      	cmp	r3, #0
 8005770:	f000 8081 	beq.w	8005876 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005774:	4b8c      	ldr	r3, [pc, #560]	@ (80059a8 <HAL_RCC_OscConfig+0x770>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a8b      	ldr	r2, [pc, #556]	@ (80059a8 <HAL_RCC_OscConfig+0x770>)
 800577a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800577e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005780:	f7fb fbb8 	bl	8000ef4 <HAL_GetTick>
 8005784:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005786:	e008      	b.n	800579a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005788:	f7fb fbb4 	bl	8000ef4 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b64      	cmp	r3, #100	@ 0x64
 8005794:	d901      	bls.n	800579a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e1a0      	b.n	8005adc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800579a:	4b83      	ldr	r3, [pc, #524]	@ (80059a8 <HAL_RCC_OscConfig+0x770>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d0f0      	beq.n	8005788 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d106      	bne.n	80057bc <HAL_RCC_OscConfig+0x584>
 80057ae:	4b7d      	ldr	r3, [pc, #500]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 80057b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057b2:	4a7c      	ldr	r2, [pc, #496]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 80057b4:	f043 0301 	orr.w	r3, r3, #1
 80057b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80057ba:	e02d      	b.n	8005818 <HAL_RCC_OscConfig+0x5e0>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10c      	bne.n	80057de <HAL_RCC_OscConfig+0x5a6>
 80057c4:	4b77      	ldr	r3, [pc, #476]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 80057c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057c8:	4a76      	ldr	r2, [pc, #472]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 80057ca:	f023 0301 	bic.w	r3, r3, #1
 80057ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80057d0:	4b74      	ldr	r3, [pc, #464]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 80057d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057d4:	4a73      	ldr	r2, [pc, #460]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 80057d6:	f023 0304 	bic.w	r3, r3, #4
 80057da:	6713      	str	r3, [r2, #112]	@ 0x70
 80057dc:	e01c      	b.n	8005818 <HAL_RCC_OscConfig+0x5e0>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	2b05      	cmp	r3, #5
 80057e4:	d10c      	bne.n	8005800 <HAL_RCC_OscConfig+0x5c8>
 80057e6:	4b6f      	ldr	r3, [pc, #444]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 80057e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ea:	4a6e      	ldr	r2, [pc, #440]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 80057ec:	f043 0304 	orr.w	r3, r3, #4
 80057f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80057f2:	4b6c      	ldr	r3, [pc, #432]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 80057f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f6:	4a6b      	ldr	r2, [pc, #428]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 80057f8:	f043 0301 	orr.w	r3, r3, #1
 80057fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80057fe:	e00b      	b.n	8005818 <HAL_RCC_OscConfig+0x5e0>
 8005800:	4b68      	ldr	r3, [pc, #416]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 8005802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005804:	4a67      	ldr	r2, [pc, #412]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 8005806:	f023 0301 	bic.w	r3, r3, #1
 800580a:	6713      	str	r3, [r2, #112]	@ 0x70
 800580c:	4b65      	ldr	r3, [pc, #404]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 800580e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005810:	4a64      	ldr	r2, [pc, #400]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 8005812:	f023 0304 	bic.w	r3, r3, #4
 8005816:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d015      	beq.n	800584c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005820:	f7fb fb68 	bl	8000ef4 <HAL_GetTick>
 8005824:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005826:	e00a      	b.n	800583e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005828:	f7fb fb64 	bl	8000ef4 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005836:	4293      	cmp	r3, r2
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e14e      	b.n	8005adc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800583e:	4b59      	ldr	r3, [pc, #356]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 8005840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0ee      	beq.n	8005828 <HAL_RCC_OscConfig+0x5f0>
 800584a:	e014      	b.n	8005876 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800584c:	f7fb fb52 	bl	8000ef4 <HAL_GetTick>
 8005850:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005852:	e00a      	b.n	800586a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005854:	f7fb fb4e 	bl	8000ef4 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005862:	4293      	cmp	r3, r2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e138      	b.n	8005adc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800586a:	4b4e      	ldr	r3, [pc, #312]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 800586c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1ee      	bne.n	8005854 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587a:	2b00      	cmp	r3, #0
 800587c:	f000 812d 	beq.w	8005ada <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005880:	4b48      	ldr	r3, [pc, #288]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005888:	2b18      	cmp	r3, #24
 800588a:	f000 80bd 	beq.w	8005a08 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005892:	2b02      	cmp	r3, #2
 8005894:	f040 809e 	bne.w	80059d4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005898:	4b42      	ldr	r3, [pc, #264]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a41      	ldr	r2, [pc, #260]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 800589e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a4:	f7fb fb26 	bl	8000ef4 <HAL_GetTick>
 80058a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058aa:	e008      	b.n	80058be <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ac:	f7fb fb22 	bl	8000ef4 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e10e      	b.n	8005adc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058be:	4b39      	ldr	r3, [pc, #228]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1f0      	bne.n	80058ac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058ca:	4b36      	ldr	r3, [pc, #216]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 80058cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058ce:	4b37      	ldr	r3, [pc, #220]	@ (80059ac <HAL_RCC_OscConfig+0x774>)
 80058d0:	4013      	ands	r3, r2
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80058da:	0112      	lsls	r2, r2, #4
 80058dc:	430a      	orrs	r2, r1
 80058de:	4931      	ldr	r1, [pc, #196]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e8:	3b01      	subs	r3, #1
 80058ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058f2:	3b01      	subs	r3, #1
 80058f4:	025b      	lsls	r3, r3, #9
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	431a      	orrs	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058fe:	3b01      	subs	r3, #1
 8005900:	041b      	lsls	r3, r3, #16
 8005902:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005906:	431a      	orrs	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800590c:	3b01      	subs	r3, #1
 800590e:	061b      	lsls	r3, r3, #24
 8005910:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005914:	4923      	ldr	r1, [pc, #140]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 8005916:	4313      	orrs	r3, r2
 8005918:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800591a:	4b22      	ldr	r3, [pc, #136]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 800591c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800591e:	4a21      	ldr	r2, [pc, #132]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 8005920:	f023 0301 	bic.w	r3, r3, #1
 8005924:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005926:	4b1f      	ldr	r3, [pc, #124]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 8005928:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800592a:	4b21      	ldr	r3, [pc, #132]	@ (80059b0 <HAL_RCC_OscConfig+0x778>)
 800592c:	4013      	ands	r3, r2
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005932:	00d2      	lsls	r2, r2, #3
 8005934:	491b      	ldr	r1, [pc, #108]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 8005936:	4313      	orrs	r3, r2
 8005938:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800593a:	4b1a      	ldr	r3, [pc, #104]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 800593c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593e:	f023 020c 	bic.w	r2, r3, #12
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005946:	4917      	ldr	r1, [pc, #92]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 8005948:	4313      	orrs	r3, r2
 800594a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800594c:	4b15      	ldr	r3, [pc, #84]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 800594e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005950:	f023 0202 	bic.w	r2, r3, #2
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005958:	4912      	ldr	r1, [pc, #72]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 800595a:	4313      	orrs	r3, r2
 800595c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800595e:	4b11      	ldr	r3, [pc, #68]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 8005960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005962:	4a10      	ldr	r2, [pc, #64]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 8005964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005968:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800596a:	4b0e      	ldr	r3, [pc, #56]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 800596c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596e:	4a0d      	ldr	r2, [pc, #52]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 8005970:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005974:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005976:	4b0b      	ldr	r3, [pc, #44]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 8005978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800597a:	4a0a      	ldr	r2, [pc, #40]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 800597c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005980:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005982:	4b08      	ldr	r3, [pc, #32]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 8005984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005986:	4a07      	ldr	r2, [pc, #28]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 8005988:	f043 0301 	orr.w	r3, r3, #1
 800598c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800598e:	4b05      	ldr	r3, [pc, #20]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a04      	ldr	r2, [pc, #16]	@ (80059a4 <HAL_RCC_OscConfig+0x76c>)
 8005994:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800599a:	f7fb faab 	bl	8000ef4 <HAL_GetTick>
 800599e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059a0:	e011      	b.n	80059c6 <HAL_RCC_OscConfig+0x78e>
 80059a2:	bf00      	nop
 80059a4:	58024400 	.word	0x58024400
 80059a8:	58024800 	.word	0x58024800
 80059ac:	fffffc0c 	.word	0xfffffc0c
 80059b0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059b4:	f7fb fa9e 	bl	8000ef4 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e08a      	b.n	8005adc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059c6:	4b47      	ldr	r3, [pc, #284]	@ (8005ae4 <HAL_RCC_OscConfig+0x8ac>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0f0      	beq.n	80059b4 <HAL_RCC_OscConfig+0x77c>
 80059d2:	e082      	b.n	8005ada <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059d4:	4b43      	ldr	r3, [pc, #268]	@ (8005ae4 <HAL_RCC_OscConfig+0x8ac>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a42      	ldr	r2, [pc, #264]	@ (8005ae4 <HAL_RCC_OscConfig+0x8ac>)
 80059da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e0:	f7fb fa88 	bl	8000ef4 <HAL_GetTick>
 80059e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059e6:	e008      	b.n	80059fa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059e8:	f7fb fa84 	bl	8000ef4 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e070      	b.n	8005adc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059fa:	4b3a      	ldr	r3, [pc, #232]	@ (8005ae4 <HAL_RCC_OscConfig+0x8ac>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1f0      	bne.n	80059e8 <HAL_RCC_OscConfig+0x7b0>
 8005a06:	e068      	b.n	8005ada <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005a08:	4b36      	ldr	r3, [pc, #216]	@ (8005ae4 <HAL_RCC_OscConfig+0x8ac>)
 8005a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005a0e:	4b35      	ldr	r3, [pc, #212]	@ (8005ae4 <HAL_RCC_OscConfig+0x8ac>)
 8005a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a12:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d031      	beq.n	8005a80 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	f003 0203 	and.w	r2, r3, #3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d12a      	bne.n	8005a80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	091b      	lsrs	r3, r3, #4
 8005a2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d122      	bne.n	8005a80 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a44:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d11a      	bne.n	8005a80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	0a5b      	lsrs	r3, r3, #9
 8005a4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a56:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d111      	bne.n	8005a80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	0c1b      	lsrs	r3, r3, #16
 8005a60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a68:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d108      	bne.n	8005a80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	0e1b      	lsrs	r3, r3, #24
 8005a72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a7a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d001      	beq.n	8005a84 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e02b      	b.n	8005adc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005a84:	4b17      	ldr	r3, [pc, #92]	@ (8005ae4 <HAL_RCC_OscConfig+0x8ac>)
 8005a86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a88:	08db      	lsrs	r3, r3, #3
 8005a8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a8e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d01f      	beq.n	8005ada <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005a9a:	4b12      	ldr	r3, [pc, #72]	@ (8005ae4 <HAL_RCC_OscConfig+0x8ac>)
 8005a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9e:	4a11      	ldr	r2, [pc, #68]	@ (8005ae4 <HAL_RCC_OscConfig+0x8ac>)
 8005aa0:	f023 0301 	bic.w	r3, r3, #1
 8005aa4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005aa6:	f7fb fa25 	bl	8000ef4 <HAL_GetTick>
 8005aaa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005aac:	bf00      	nop
 8005aae:	f7fb fa21 	bl	8000ef4 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d0f9      	beq.n	8005aae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005aba:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae4 <HAL_RCC_OscConfig+0x8ac>)
 8005abc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005abe:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae8 <HAL_RCC_OscConfig+0x8b0>)
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005ac6:	00d2      	lsls	r2, r2, #3
 8005ac8:	4906      	ldr	r1, [pc, #24]	@ (8005ae4 <HAL_RCC_OscConfig+0x8ac>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005ace:	4b05      	ldr	r3, [pc, #20]	@ (8005ae4 <HAL_RCC_OscConfig+0x8ac>)
 8005ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad2:	4a04      	ldr	r2, [pc, #16]	@ (8005ae4 <HAL_RCC_OscConfig+0x8ac>)
 8005ad4:	f043 0301 	orr.w	r3, r3, #1
 8005ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3730      	adds	r7, #48	@ 0x30
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	58024400 	.word	0x58024400
 8005ae8:	ffff0007 	.word	0xffff0007

08005aec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e19c      	b.n	8005e3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b00:	4b8a      	ldr	r3, [pc, #552]	@ (8005d2c <HAL_RCC_ClockConfig+0x240>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 030f 	and.w	r3, r3, #15
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d910      	bls.n	8005b30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b0e:	4b87      	ldr	r3, [pc, #540]	@ (8005d2c <HAL_RCC_ClockConfig+0x240>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f023 020f 	bic.w	r2, r3, #15
 8005b16:	4985      	ldr	r1, [pc, #532]	@ (8005d2c <HAL_RCC_ClockConfig+0x240>)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b1e:	4b83      	ldr	r3, [pc, #524]	@ (8005d2c <HAL_RCC_ClockConfig+0x240>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 030f 	and.w	r3, r3, #15
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d001      	beq.n	8005b30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e184      	b.n	8005e3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0304 	and.w	r3, r3, #4
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d010      	beq.n	8005b5e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	4b7b      	ldr	r3, [pc, #492]	@ (8005d30 <HAL_RCC_ClockConfig+0x244>)
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d908      	bls.n	8005b5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b4c:	4b78      	ldr	r3, [pc, #480]	@ (8005d30 <HAL_RCC_ClockConfig+0x244>)
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	4975      	ldr	r1, [pc, #468]	@ (8005d30 <HAL_RCC_ClockConfig+0x244>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0308 	and.w	r3, r3, #8
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d010      	beq.n	8005b8c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	695a      	ldr	r2, [r3, #20]
 8005b6e:	4b70      	ldr	r3, [pc, #448]	@ (8005d30 <HAL_RCC_ClockConfig+0x244>)
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d908      	bls.n	8005b8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b7a:	4b6d      	ldr	r3, [pc, #436]	@ (8005d30 <HAL_RCC_ClockConfig+0x244>)
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	496a      	ldr	r1, [pc, #424]	@ (8005d30 <HAL_RCC_ClockConfig+0x244>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0310 	and.w	r3, r3, #16
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d010      	beq.n	8005bba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	699a      	ldr	r2, [r3, #24]
 8005b9c:	4b64      	ldr	r3, [pc, #400]	@ (8005d30 <HAL_RCC_ClockConfig+0x244>)
 8005b9e:	69db      	ldr	r3, [r3, #28]
 8005ba0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d908      	bls.n	8005bba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ba8:	4b61      	ldr	r3, [pc, #388]	@ (8005d30 <HAL_RCC_ClockConfig+0x244>)
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	495e      	ldr	r1, [pc, #376]	@ (8005d30 <HAL_RCC_ClockConfig+0x244>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0320 	and.w	r3, r3, #32
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d010      	beq.n	8005be8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69da      	ldr	r2, [r3, #28]
 8005bca:	4b59      	ldr	r3, [pc, #356]	@ (8005d30 <HAL_RCC_ClockConfig+0x244>)
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d908      	bls.n	8005be8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005bd6:	4b56      	ldr	r3, [pc, #344]	@ (8005d30 <HAL_RCC_ClockConfig+0x244>)
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	4953      	ldr	r1, [pc, #332]	@ (8005d30 <HAL_RCC_ClockConfig+0x244>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d010      	beq.n	8005c16 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	4b4d      	ldr	r3, [pc, #308]	@ (8005d30 <HAL_RCC_ClockConfig+0x244>)
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	f003 030f 	and.w	r3, r3, #15
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d908      	bls.n	8005c16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c04:	4b4a      	ldr	r3, [pc, #296]	@ (8005d30 <HAL_RCC_ClockConfig+0x244>)
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	f023 020f 	bic.w	r2, r3, #15
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	4947      	ldr	r1, [pc, #284]	@ (8005d30 <HAL_RCC_ClockConfig+0x244>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d055      	beq.n	8005cce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005c22:	4b43      	ldr	r3, [pc, #268]	@ (8005d30 <HAL_RCC_ClockConfig+0x244>)
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	4940      	ldr	r1, [pc, #256]	@ (8005d30 <HAL_RCC_ClockConfig+0x244>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d107      	bne.n	8005c4c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c3c:	4b3c      	ldr	r3, [pc, #240]	@ (8005d30 <HAL_RCC_ClockConfig+0x244>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d121      	bne.n	8005c8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e0f6      	b.n	8005e3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d107      	bne.n	8005c64 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c54:	4b36      	ldr	r3, [pc, #216]	@ (8005d30 <HAL_RCC_ClockConfig+0x244>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d115      	bne.n	8005c8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e0ea      	b.n	8005e3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d107      	bne.n	8005c7c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c6c:	4b30      	ldr	r3, [pc, #192]	@ (8005d30 <HAL_RCC_ClockConfig+0x244>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d109      	bne.n	8005c8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e0de      	b.n	8005e3a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c7c:	4b2c      	ldr	r3, [pc, #176]	@ (8005d30 <HAL_RCC_ClockConfig+0x244>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e0d6      	b.n	8005e3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c8c:	4b28      	ldr	r3, [pc, #160]	@ (8005d30 <HAL_RCC_ClockConfig+0x244>)
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f023 0207 	bic.w	r2, r3, #7
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	4925      	ldr	r1, [pc, #148]	@ (8005d30 <HAL_RCC_ClockConfig+0x244>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c9e:	f7fb f929 	bl	8000ef4 <HAL_GetTick>
 8005ca2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ca4:	e00a      	b.n	8005cbc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ca6:	f7fb f925 	bl	8000ef4 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d901      	bls.n	8005cbc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e0be      	b.n	8005e3a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8005d30 <HAL_RCC_ClockConfig+0x244>)
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d1eb      	bne.n	8005ca6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d010      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	4b14      	ldr	r3, [pc, #80]	@ (8005d30 <HAL_RCC_ClockConfig+0x244>)
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	f003 030f 	and.w	r3, r3, #15
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d208      	bcs.n	8005cfc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cea:	4b11      	ldr	r3, [pc, #68]	@ (8005d30 <HAL_RCC_ClockConfig+0x244>)
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	f023 020f 	bic.w	r2, r3, #15
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	490e      	ldr	r1, [pc, #56]	@ (8005d30 <HAL_RCC_ClockConfig+0x244>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8005d2c <HAL_RCC_ClockConfig+0x240>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 030f 	and.w	r3, r3, #15
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d214      	bcs.n	8005d34 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d0a:	4b08      	ldr	r3, [pc, #32]	@ (8005d2c <HAL_RCC_ClockConfig+0x240>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f023 020f 	bic.w	r2, r3, #15
 8005d12:	4906      	ldr	r1, [pc, #24]	@ (8005d2c <HAL_RCC_ClockConfig+0x240>)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d1a:	4b04      	ldr	r3, [pc, #16]	@ (8005d2c <HAL_RCC_ClockConfig+0x240>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d005      	beq.n	8005d34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e086      	b.n	8005e3a <HAL_RCC_ClockConfig+0x34e>
 8005d2c:	52002000 	.word	0x52002000
 8005d30:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0304 	and.w	r3, r3, #4
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d010      	beq.n	8005d62 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	691a      	ldr	r2, [r3, #16]
 8005d44:	4b3f      	ldr	r3, [pc, #252]	@ (8005e44 <HAL_RCC_ClockConfig+0x358>)
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d208      	bcs.n	8005d62 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d50:	4b3c      	ldr	r3, [pc, #240]	@ (8005e44 <HAL_RCC_ClockConfig+0x358>)
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	4939      	ldr	r1, [pc, #228]	@ (8005e44 <HAL_RCC_ClockConfig+0x358>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0308 	and.w	r3, r3, #8
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d010      	beq.n	8005d90 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	695a      	ldr	r2, [r3, #20]
 8005d72:	4b34      	ldr	r3, [pc, #208]	@ (8005e44 <HAL_RCC_ClockConfig+0x358>)
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d208      	bcs.n	8005d90 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d7e:	4b31      	ldr	r3, [pc, #196]	@ (8005e44 <HAL_RCC_ClockConfig+0x358>)
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	492e      	ldr	r1, [pc, #184]	@ (8005e44 <HAL_RCC_ClockConfig+0x358>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0310 	and.w	r3, r3, #16
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d010      	beq.n	8005dbe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	699a      	ldr	r2, [r3, #24]
 8005da0:	4b28      	ldr	r3, [pc, #160]	@ (8005e44 <HAL_RCC_ClockConfig+0x358>)
 8005da2:	69db      	ldr	r3, [r3, #28]
 8005da4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d208      	bcs.n	8005dbe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005dac:	4b25      	ldr	r3, [pc, #148]	@ (8005e44 <HAL_RCC_ClockConfig+0x358>)
 8005dae:	69db      	ldr	r3, [r3, #28]
 8005db0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	4922      	ldr	r1, [pc, #136]	@ (8005e44 <HAL_RCC_ClockConfig+0x358>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0320 	and.w	r3, r3, #32
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d010      	beq.n	8005dec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	69da      	ldr	r2, [r3, #28]
 8005dce:	4b1d      	ldr	r3, [pc, #116]	@ (8005e44 <HAL_RCC_ClockConfig+0x358>)
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d208      	bcs.n	8005dec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005dda:	4b1a      	ldr	r3, [pc, #104]	@ (8005e44 <HAL_RCC_ClockConfig+0x358>)
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	4917      	ldr	r1, [pc, #92]	@ (8005e44 <HAL_RCC_ClockConfig+0x358>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005dec:	f000 f834 	bl	8005e58 <HAL_RCC_GetSysClockFreq>
 8005df0:	4602      	mov	r2, r0
 8005df2:	4b14      	ldr	r3, [pc, #80]	@ (8005e44 <HAL_RCC_ClockConfig+0x358>)
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	0a1b      	lsrs	r3, r3, #8
 8005df8:	f003 030f 	and.w	r3, r3, #15
 8005dfc:	4912      	ldr	r1, [pc, #72]	@ (8005e48 <HAL_RCC_ClockConfig+0x35c>)
 8005dfe:	5ccb      	ldrb	r3, [r1, r3]
 8005e00:	f003 031f 	and.w	r3, r3, #31
 8005e04:	fa22 f303 	lsr.w	r3, r2, r3
 8005e08:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8005e44 <HAL_RCC_ClockConfig+0x358>)
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	f003 030f 	and.w	r3, r3, #15
 8005e12:	4a0d      	ldr	r2, [pc, #52]	@ (8005e48 <HAL_RCC_ClockConfig+0x35c>)
 8005e14:	5cd3      	ldrb	r3, [r2, r3]
 8005e16:	f003 031f 	and.w	r3, r3, #31
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e20:	4a0a      	ldr	r2, [pc, #40]	@ (8005e4c <HAL_RCC_ClockConfig+0x360>)
 8005e22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e24:	4a0a      	ldr	r2, [pc, #40]	@ (8005e50 <HAL_RCC_ClockConfig+0x364>)
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8005e54 <HAL_RCC_ClockConfig+0x368>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fb f816 	bl	8000e60 <HAL_InitTick>
 8005e34:	4603      	mov	r3, r0
 8005e36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3718      	adds	r7, #24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	58024400 	.word	0x58024400
 8005e48:	0800aabc 	.word	0x0800aabc
 8005e4c:	24000004 	.word	0x24000004
 8005e50:	24000000 	.word	0x24000000
 8005e54:	24000008 	.word	0x24000008

08005e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b089      	sub	sp, #36	@ 0x24
 8005e5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e5e:	4bb3      	ldr	r3, [pc, #716]	@ (800612c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e66:	2b18      	cmp	r3, #24
 8005e68:	f200 8155 	bhi.w	8006116 <HAL_RCC_GetSysClockFreq+0x2be>
 8005e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e74 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e72:	bf00      	nop
 8005e74:	08005ed9 	.word	0x08005ed9
 8005e78:	08006117 	.word	0x08006117
 8005e7c:	08006117 	.word	0x08006117
 8005e80:	08006117 	.word	0x08006117
 8005e84:	08006117 	.word	0x08006117
 8005e88:	08006117 	.word	0x08006117
 8005e8c:	08006117 	.word	0x08006117
 8005e90:	08006117 	.word	0x08006117
 8005e94:	08005eff 	.word	0x08005eff
 8005e98:	08006117 	.word	0x08006117
 8005e9c:	08006117 	.word	0x08006117
 8005ea0:	08006117 	.word	0x08006117
 8005ea4:	08006117 	.word	0x08006117
 8005ea8:	08006117 	.word	0x08006117
 8005eac:	08006117 	.word	0x08006117
 8005eb0:	08006117 	.word	0x08006117
 8005eb4:	08005f05 	.word	0x08005f05
 8005eb8:	08006117 	.word	0x08006117
 8005ebc:	08006117 	.word	0x08006117
 8005ec0:	08006117 	.word	0x08006117
 8005ec4:	08006117 	.word	0x08006117
 8005ec8:	08006117 	.word	0x08006117
 8005ecc:	08006117 	.word	0x08006117
 8005ed0:	08006117 	.word	0x08006117
 8005ed4:	08005f0b 	.word	0x08005f0b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ed8:	4b94      	ldr	r3, [pc, #592]	@ (800612c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0320 	and.w	r3, r3, #32
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d009      	beq.n	8005ef8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ee4:	4b91      	ldr	r3, [pc, #580]	@ (800612c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	08db      	lsrs	r3, r3, #3
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	4a90      	ldr	r2, [pc, #576]	@ (8006130 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005ef6:	e111      	b.n	800611c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005ef8:	4b8d      	ldr	r3, [pc, #564]	@ (8006130 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005efa:	61bb      	str	r3, [r7, #24]
      break;
 8005efc:	e10e      	b.n	800611c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005efe:	4b8d      	ldr	r3, [pc, #564]	@ (8006134 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f00:	61bb      	str	r3, [r7, #24]
      break;
 8005f02:	e10b      	b.n	800611c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005f04:	4b8c      	ldr	r3, [pc, #560]	@ (8006138 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005f06:	61bb      	str	r3, [r7, #24]
      break;
 8005f08:	e108      	b.n	800611c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f0a:	4b88      	ldr	r3, [pc, #544]	@ (800612c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f0e:	f003 0303 	and.w	r3, r3, #3
 8005f12:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005f14:	4b85      	ldr	r3, [pc, #532]	@ (800612c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f18:	091b      	lsrs	r3, r3, #4
 8005f1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f1e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005f20:	4b82      	ldr	r3, [pc, #520]	@ (800612c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f24:	f003 0301 	and.w	r3, r3, #1
 8005f28:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005f2a:	4b80      	ldr	r3, [pc, #512]	@ (800612c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f2e:	08db      	lsrs	r3, r3, #3
 8005f30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	fb02 f303 	mul.w	r3, r2, r3
 8005f3a:	ee07 3a90 	vmov	s15, r3
 8005f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f42:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 80e1 	beq.w	8006110 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	f000 8083 	beq.w	800605c <HAL_RCC_GetSysClockFreq+0x204>
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	f200 80a1 	bhi.w	80060a0 <HAL_RCC_GetSysClockFreq+0x248>
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d003      	beq.n	8005f6c <HAL_RCC_GetSysClockFreq+0x114>
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d056      	beq.n	8006018 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005f6a:	e099      	b.n	80060a0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f6c:	4b6f      	ldr	r3, [pc, #444]	@ (800612c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0320 	and.w	r3, r3, #32
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d02d      	beq.n	8005fd4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f78:	4b6c      	ldr	r3, [pc, #432]	@ (800612c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	08db      	lsrs	r3, r3, #3
 8005f7e:	f003 0303 	and.w	r3, r3, #3
 8005f82:	4a6b      	ldr	r2, [pc, #428]	@ (8006130 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f84:	fa22 f303 	lsr.w	r3, r2, r3
 8005f88:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	ee07 3a90 	vmov	s15, r3
 8005f90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	ee07 3a90 	vmov	s15, r3
 8005f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fa2:	4b62      	ldr	r3, [pc, #392]	@ (800612c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005faa:	ee07 3a90 	vmov	s15, r3
 8005fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fb6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800613c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005fd2:	e087      	b.n	80060e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	ee07 3a90 	vmov	s15, r3
 8005fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fde:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006140 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fe6:	4b51      	ldr	r3, [pc, #324]	@ (800612c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fee:	ee07 3a90 	vmov	s15, r3
 8005ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ffa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800613c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800600a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800600e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006012:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006016:	e065      	b.n	80060e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006022:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006144 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800602a:	4b40      	ldr	r3, [pc, #256]	@ (800612c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800602c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800602e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006032:	ee07 3a90 	vmov	s15, r3
 8006036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800603a:	ed97 6a02 	vldr	s12, [r7, #8]
 800603e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800613c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800604a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800604e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006056:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800605a:	e043      	b.n	80060e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	ee07 3a90 	vmov	s15, r3
 8006062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006066:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006148 <HAL_RCC_GetSysClockFreq+0x2f0>
 800606a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800606e:	4b2f      	ldr	r3, [pc, #188]	@ (800612c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006076:	ee07 3a90 	vmov	s15, r3
 800607a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800607e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006082:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800613c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800608a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800608e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800609a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800609e:	e021      	b.n	80060e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	ee07 3a90 	vmov	s15, r3
 80060a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060aa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006144 <HAL_RCC_GetSysClockFreq+0x2ec>
 80060ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060b2:	4b1e      	ldr	r3, [pc, #120]	@ (800612c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ba:	ee07 3a90 	vmov	s15, r3
 80060be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80060c6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800613c <HAL_RCC_GetSysClockFreq+0x2e4>
 80060ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80060e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80060e4:	4b11      	ldr	r3, [pc, #68]	@ (800612c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060e8:	0a5b      	lsrs	r3, r3, #9
 80060ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060ee:	3301      	adds	r3, #1
 80060f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	ee07 3a90 	vmov	s15, r3
 80060f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006108:	ee17 3a90 	vmov	r3, s15
 800610c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800610e:	e005      	b.n	800611c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	61bb      	str	r3, [r7, #24]
      break;
 8006114:	e002      	b.n	800611c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006116:	4b07      	ldr	r3, [pc, #28]	@ (8006134 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006118:	61bb      	str	r3, [r7, #24]
      break;
 800611a:	bf00      	nop
  }

  return sysclockfreq;
 800611c:	69bb      	ldr	r3, [r7, #24]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3724      	adds	r7, #36	@ 0x24
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	58024400 	.word	0x58024400
 8006130:	03d09000 	.word	0x03d09000
 8006134:	003d0900 	.word	0x003d0900
 8006138:	017d7840 	.word	0x017d7840
 800613c:	46000000 	.word	0x46000000
 8006140:	4c742400 	.word	0x4c742400
 8006144:	4a742400 	.word	0x4a742400
 8006148:	4bbebc20 	.word	0x4bbebc20

0800614c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006152:	f7ff fe81 	bl	8005e58 <HAL_RCC_GetSysClockFreq>
 8006156:	4602      	mov	r2, r0
 8006158:	4b10      	ldr	r3, [pc, #64]	@ (800619c <HAL_RCC_GetHCLKFreq+0x50>)
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	0a1b      	lsrs	r3, r3, #8
 800615e:	f003 030f 	and.w	r3, r3, #15
 8006162:	490f      	ldr	r1, [pc, #60]	@ (80061a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006164:	5ccb      	ldrb	r3, [r1, r3]
 8006166:	f003 031f 	and.w	r3, r3, #31
 800616a:	fa22 f303 	lsr.w	r3, r2, r3
 800616e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006170:	4b0a      	ldr	r3, [pc, #40]	@ (800619c <HAL_RCC_GetHCLKFreq+0x50>)
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	f003 030f 	and.w	r3, r3, #15
 8006178:	4a09      	ldr	r2, [pc, #36]	@ (80061a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800617a:	5cd3      	ldrb	r3, [r2, r3]
 800617c:	f003 031f 	and.w	r3, r3, #31
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	fa22 f303 	lsr.w	r3, r2, r3
 8006186:	4a07      	ldr	r2, [pc, #28]	@ (80061a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006188:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800618a:	4a07      	ldr	r2, [pc, #28]	@ (80061a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006190:	4b04      	ldr	r3, [pc, #16]	@ (80061a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006192:	681b      	ldr	r3, [r3, #0]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	58024400 	.word	0x58024400
 80061a0:	0800aabc 	.word	0x0800aabc
 80061a4:	24000004 	.word	0x24000004
 80061a8:	24000000 	.word	0x24000000

080061ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80061b0:	f7ff ffcc 	bl	800614c <HAL_RCC_GetHCLKFreq>
 80061b4:	4602      	mov	r2, r0
 80061b6:	4b06      	ldr	r3, [pc, #24]	@ (80061d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	091b      	lsrs	r3, r3, #4
 80061bc:	f003 0307 	and.w	r3, r3, #7
 80061c0:	4904      	ldr	r1, [pc, #16]	@ (80061d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80061c2:	5ccb      	ldrb	r3, [r1, r3]
 80061c4:	f003 031f 	and.w	r3, r3, #31
 80061c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	58024400 	.word	0x58024400
 80061d4:	0800aabc 	.word	0x0800aabc

080061d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061dc:	b0cc      	sub	sp, #304	@ 0x130
 80061de:	af00      	add	r7, sp, #0
 80061e0:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061e4:	2300      	movs	r3, #0
 80061e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061ea:	2300      	movs	r3, #0
 80061ec:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80061fc:	2500      	movs	r5, #0
 80061fe:	ea54 0305 	orrs.w	r3, r4, r5
 8006202:	d049      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006204:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006208:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800620a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800620e:	d02f      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006210:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006214:	d828      	bhi.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006216:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800621a:	d01a      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800621c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006220:	d822      	bhi.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006222:	2b00      	cmp	r3, #0
 8006224:	d003      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006226:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800622a:	d007      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800622c:	e01c      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800622e:	4bb8      	ldr	r3, [pc, #736]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006232:	4ab7      	ldr	r2, [pc, #732]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006234:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006238:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800623a:	e01a      	b.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800623c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006240:	3308      	adds	r3, #8
 8006242:	2102      	movs	r1, #2
 8006244:	4618      	mov	r0, r3
 8006246:	f002 fba1 	bl	800898c <RCCEx_PLL2_Config>
 800624a:	4603      	mov	r3, r0
 800624c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006250:	e00f      	b.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006252:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006256:	3328      	adds	r3, #40	@ 0x28
 8006258:	2102      	movs	r1, #2
 800625a:	4618      	mov	r0, r3
 800625c:	f002 fc48 	bl	8008af0 <RCCEx_PLL3_Config>
 8006260:	4603      	mov	r3, r0
 8006262:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006266:	e004      	b.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800626e:	e000      	b.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006270:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006272:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10a      	bne.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800627a:	4ba5      	ldr	r3, [pc, #660]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800627c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800627e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006282:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006286:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006288:	4aa1      	ldr	r2, [pc, #644]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800628a:	430b      	orrs	r3, r1
 800628c:	6513      	str	r3, [r2, #80]	@ 0x50
 800628e:	e003      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006290:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006294:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006298:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800629c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80062a4:	f04f 0900 	mov.w	r9, #0
 80062a8:	ea58 0309 	orrs.w	r3, r8, r9
 80062ac:	d047      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80062ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062b4:	2b04      	cmp	r3, #4
 80062b6:	d82a      	bhi.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80062b8:	a201      	add	r2, pc, #4	@ (adr r2, 80062c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80062ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062be:	bf00      	nop
 80062c0:	080062d5 	.word	0x080062d5
 80062c4:	080062e3 	.word	0x080062e3
 80062c8:	080062f9 	.word	0x080062f9
 80062cc:	08006317 	.word	0x08006317
 80062d0:	08006317 	.word	0x08006317
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062d4:	4b8e      	ldr	r3, [pc, #568]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d8:	4a8d      	ldr	r2, [pc, #564]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062e0:	e01a      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062e6:	3308      	adds	r3, #8
 80062e8:	2100      	movs	r1, #0
 80062ea:	4618      	mov	r0, r3
 80062ec:	f002 fb4e 	bl	800898c <RCCEx_PLL2_Config>
 80062f0:	4603      	mov	r3, r0
 80062f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062f6:	e00f      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062fc:	3328      	adds	r3, #40	@ 0x28
 80062fe:	2100      	movs	r1, #0
 8006300:	4618      	mov	r0, r3
 8006302:	f002 fbf5 	bl	8008af0 <RCCEx_PLL3_Config>
 8006306:	4603      	mov	r3, r0
 8006308:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800630c:	e004      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006314:	e000      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006316:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006318:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10a      	bne.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006320:	4b7b      	ldr	r3, [pc, #492]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006324:	f023 0107 	bic.w	r1, r3, #7
 8006328:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800632c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800632e:	4a78      	ldr	r2, [pc, #480]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006330:	430b      	orrs	r3, r1
 8006332:	6513      	str	r3, [r2, #80]	@ 0x50
 8006334:	e003      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006336:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800633a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800633e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006346:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800634a:	f04f 0b00 	mov.w	fp, #0
 800634e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006352:	d04c      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006354:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800635a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800635e:	d030      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006360:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006364:	d829      	bhi.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006366:	2bc0      	cmp	r3, #192	@ 0xc0
 8006368:	d02d      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800636a:	2bc0      	cmp	r3, #192	@ 0xc0
 800636c:	d825      	bhi.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800636e:	2b80      	cmp	r3, #128	@ 0x80
 8006370:	d018      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006372:	2b80      	cmp	r3, #128	@ 0x80
 8006374:	d821      	bhi.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006376:	2b00      	cmp	r3, #0
 8006378:	d002      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800637a:	2b40      	cmp	r3, #64	@ 0x40
 800637c:	d007      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800637e:	e01c      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006380:	4b63      	ldr	r3, [pc, #396]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006384:	4a62      	ldr	r2, [pc, #392]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006386:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800638a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800638c:	e01c      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800638e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006392:	3308      	adds	r3, #8
 8006394:	2100      	movs	r1, #0
 8006396:	4618      	mov	r0, r3
 8006398:	f002 faf8 	bl	800898c <RCCEx_PLL2_Config>
 800639c:	4603      	mov	r3, r0
 800639e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80063a2:	e011      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063a8:	3328      	adds	r3, #40	@ 0x28
 80063aa:	2100      	movs	r1, #0
 80063ac:	4618      	mov	r0, r3
 80063ae:	f002 fb9f 	bl	8008af0 <RCCEx_PLL3_Config>
 80063b2:	4603      	mov	r3, r0
 80063b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80063b8:	e006      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80063c0:	e002      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80063c2:	bf00      	nop
 80063c4:	e000      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80063c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10a      	bne.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80063d0:	4b4f      	ldr	r3, [pc, #316]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063d4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80063d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063de:	4a4c      	ldr	r2, [pc, #304]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063e0:	430b      	orrs	r3, r1
 80063e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80063e4:	e003      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063ea:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80063ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80063fa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80063fe:	2300      	movs	r3, #0
 8006400:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8006404:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8006408:	460b      	mov	r3, r1
 800640a:	4313      	orrs	r3, r2
 800640c:	d053      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800640e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006412:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006416:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800641a:	d035      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800641c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006420:	d82e      	bhi.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006422:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006426:	d031      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006428:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800642c:	d828      	bhi.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800642e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006432:	d01a      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006434:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006438:	d822      	bhi.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800643a:	2b00      	cmp	r3, #0
 800643c:	d003      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800643e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006442:	d007      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006444:	e01c      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006446:	4b32      	ldr	r3, [pc, #200]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800644a:	4a31      	ldr	r2, [pc, #196]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800644c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006450:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006452:	e01c      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006454:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006458:	3308      	adds	r3, #8
 800645a:	2100      	movs	r1, #0
 800645c:	4618      	mov	r0, r3
 800645e:	f002 fa95 	bl	800898c <RCCEx_PLL2_Config>
 8006462:	4603      	mov	r3, r0
 8006464:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006468:	e011      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800646a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800646e:	3328      	adds	r3, #40	@ 0x28
 8006470:	2100      	movs	r1, #0
 8006472:	4618      	mov	r0, r3
 8006474:	f002 fb3c 	bl	8008af0 <RCCEx_PLL3_Config>
 8006478:	4603      	mov	r3, r0
 800647a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800647e:	e006      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006486:	e002      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006488:	bf00      	nop
 800648a:	e000      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800648c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800648e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10b      	bne.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006496:	4b1e      	ldr	r3, [pc, #120]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800649a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800649e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80064a6:	4a1a      	ldr	r2, [pc, #104]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064a8:	430b      	orrs	r3, r1
 80064aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80064ac:	e003      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80064b2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80064b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064be:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80064c2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80064c6:	2300      	movs	r3, #0
 80064c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80064cc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80064d0:	460b      	mov	r3, r1
 80064d2:	4313      	orrs	r3, r2
 80064d4:	d056      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80064d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80064de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064e2:	d038      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80064e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064e8:	d831      	bhi.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80064ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80064ee:	d034      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80064f0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80064f4:	d82b      	bhi.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80064f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064fa:	d01d      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80064fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006500:	d825      	bhi.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006502:	2b00      	cmp	r3, #0
 8006504:	d006      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006506:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800650a:	d00a      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800650c:	e01f      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800650e:	bf00      	nop
 8006510:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006514:	4ba2      	ldr	r3, [pc, #648]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006518:	4aa1      	ldr	r2, [pc, #644]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800651a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800651e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006520:	e01c      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006522:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006526:	3308      	adds	r3, #8
 8006528:	2100      	movs	r1, #0
 800652a:	4618      	mov	r0, r3
 800652c:	f002 fa2e 	bl	800898c <RCCEx_PLL2_Config>
 8006530:	4603      	mov	r3, r0
 8006532:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006536:	e011      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006538:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800653c:	3328      	adds	r3, #40	@ 0x28
 800653e:	2100      	movs	r1, #0
 8006540:	4618      	mov	r0, r3
 8006542:	f002 fad5 	bl	8008af0 <RCCEx_PLL3_Config>
 8006546:	4603      	mov	r3, r0
 8006548:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800654c:	e006      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006554:	e002      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006556:	bf00      	nop
 8006558:	e000      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800655a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800655c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10b      	bne.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006564:	4b8e      	ldr	r3, [pc, #568]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006568:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800656c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006570:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006574:	4a8a      	ldr	r2, [pc, #552]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006576:	430b      	orrs	r3, r1
 8006578:	6593      	str	r3, [r2, #88]	@ 0x58
 800657a:	e003      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800657c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006580:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006584:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006590:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006594:	2300      	movs	r3, #0
 8006596:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800659a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800659e:	460b      	mov	r3, r1
 80065a0:	4313      	orrs	r3, r2
 80065a2:	d03a      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80065a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065aa:	2b30      	cmp	r3, #48	@ 0x30
 80065ac:	d01f      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x416>
 80065ae:	2b30      	cmp	r3, #48	@ 0x30
 80065b0:	d819      	bhi.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80065b2:	2b20      	cmp	r3, #32
 80065b4:	d00c      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80065b6:	2b20      	cmp	r3, #32
 80065b8:	d815      	bhi.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d019      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80065be:	2b10      	cmp	r3, #16
 80065c0:	d111      	bne.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065c2:	4b77      	ldr	r3, [pc, #476]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c6:	4a76      	ldr	r2, [pc, #472]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80065ce:	e011      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065d4:	3308      	adds	r3, #8
 80065d6:	2102      	movs	r1, #2
 80065d8:	4618      	mov	r0, r3
 80065da:	f002 f9d7 	bl	800898c <RCCEx_PLL2_Config>
 80065de:	4603      	mov	r3, r0
 80065e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80065e4:	e006      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80065ec:	e002      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80065ee:	bf00      	nop
 80065f0:	e000      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80065f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10a      	bne.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80065fc:	4b68      	ldr	r3, [pc, #416]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006600:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006604:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800660a:	4a65      	ldr	r2, [pc, #404]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800660c:	430b      	orrs	r3, r1
 800660e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006610:	e003      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006612:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006616:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800661a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800661e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006622:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006626:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800662a:	2300      	movs	r3, #0
 800662c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006630:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006634:	460b      	mov	r3, r1
 8006636:	4313      	orrs	r3, r2
 8006638:	d051      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800663a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800663e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006640:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006644:	d035      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006646:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800664a:	d82e      	bhi.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800664c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006650:	d031      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006652:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006656:	d828      	bhi.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006658:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800665c:	d01a      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800665e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006662:	d822      	bhi.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006664:	2b00      	cmp	r3, #0
 8006666:	d003      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006668:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800666c:	d007      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800666e:	e01c      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006670:	4b4b      	ldr	r3, [pc, #300]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006674:	4a4a      	ldr	r2, [pc, #296]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006676:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800667a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800667c:	e01c      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800667e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006682:	3308      	adds	r3, #8
 8006684:	2100      	movs	r1, #0
 8006686:	4618      	mov	r0, r3
 8006688:	f002 f980 	bl	800898c <RCCEx_PLL2_Config>
 800668c:	4603      	mov	r3, r0
 800668e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006692:	e011      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006694:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006698:	3328      	adds	r3, #40	@ 0x28
 800669a:	2100      	movs	r1, #0
 800669c:	4618      	mov	r0, r3
 800669e:	f002 fa27 	bl	8008af0 <RCCEx_PLL3_Config>
 80066a2:	4603      	mov	r3, r0
 80066a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80066a8:	e006      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80066b0:	e002      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80066b2:	bf00      	nop
 80066b4:	e000      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80066b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10a      	bne.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80066c0:	4b37      	ldr	r3, [pc, #220]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066c4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80066c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066ce:	4a34      	ldr	r2, [pc, #208]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066d0:	430b      	orrs	r3, r1
 80066d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80066d4:	e003      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80066da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80066de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80066ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80066ee:	2300      	movs	r3, #0
 80066f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80066f4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80066f8:	460b      	mov	r3, r1
 80066fa:	4313      	orrs	r3, r2
 80066fc:	d056      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80066fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006702:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006704:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006708:	d033      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800670a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800670e:	d82c      	bhi.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006710:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006714:	d02f      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006716:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800671a:	d826      	bhi.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800671c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006720:	d02b      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006722:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006726:	d820      	bhi.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006728:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800672c:	d012      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800672e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006732:	d81a      	bhi.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006734:	2b00      	cmp	r3, #0
 8006736:	d022      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800673c:	d115      	bne.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800673e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006742:	3308      	adds	r3, #8
 8006744:	2101      	movs	r1, #1
 8006746:	4618      	mov	r0, r3
 8006748:	f002 f920 	bl	800898c <RCCEx_PLL2_Config>
 800674c:	4603      	mov	r3, r0
 800674e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006752:	e015      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006754:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006758:	3328      	adds	r3, #40	@ 0x28
 800675a:	2101      	movs	r1, #1
 800675c:	4618      	mov	r0, r3
 800675e:	f002 f9c7 	bl	8008af0 <RCCEx_PLL3_Config>
 8006762:	4603      	mov	r3, r0
 8006764:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006768:	e00a      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006770:	e006      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006772:	bf00      	nop
 8006774:	e004      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006776:	bf00      	nop
 8006778:	e002      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800677a:	bf00      	nop
 800677c:	e000      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800677e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006780:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10d      	bne.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006788:	4b05      	ldr	r3, [pc, #20]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800678a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800678c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006790:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006794:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006796:	4a02      	ldr	r2, [pc, #8]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006798:	430b      	orrs	r3, r1
 800679a:	6513      	str	r3, [r2, #80]	@ 0x50
 800679c:	e006      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800679e:	bf00      	nop
 80067a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80067a8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80067ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80067b8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80067bc:	2300      	movs	r3, #0
 80067be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80067c2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80067c6:	460b      	mov	r3, r1
 80067c8:	4313      	orrs	r3, r2
 80067ca:	d055      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80067cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80067d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067d8:	d033      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80067da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067de:	d82c      	bhi.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80067e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067e4:	d02f      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80067e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067ea:	d826      	bhi.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80067ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80067f0:	d02b      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80067f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80067f6:	d820      	bhi.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80067f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067fc:	d012      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80067fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006802:	d81a      	bhi.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006804:	2b00      	cmp	r3, #0
 8006806:	d022      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006808:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800680c:	d115      	bne.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800680e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006812:	3308      	adds	r3, #8
 8006814:	2101      	movs	r1, #1
 8006816:	4618      	mov	r0, r3
 8006818:	f002 f8b8 	bl	800898c <RCCEx_PLL2_Config>
 800681c:	4603      	mov	r3, r0
 800681e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006822:	e015      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006824:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006828:	3328      	adds	r3, #40	@ 0x28
 800682a:	2101      	movs	r1, #1
 800682c:	4618      	mov	r0, r3
 800682e:	f002 f95f 	bl	8008af0 <RCCEx_PLL3_Config>
 8006832:	4603      	mov	r3, r0
 8006834:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006838:	e00a      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006840:	e006      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006842:	bf00      	nop
 8006844:	e004      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006846:	bf00      	nop
 8006848:	e002      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800684a:	bf00      	nop
 800684c:	e000      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800684e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006850:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10b      	bne.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006858:	4bb6      	ldr	r3, [pc, #728]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800685a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800685c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006860:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006864:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006868:	4ab2      	ldr	r2, [pc, #712]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800686a:	430b      	orrs	r3, r1
 800686c:	6593      	str	r3, [r2, #88]	@ 0x58
 800686e:	e003      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006870:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006874:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8006878:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800687c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006880:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006884:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006888:	2300      	movs	r3, #0
 800688a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800688e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006892:	460b      	mov	r3, r1
 8006894:	4313      	orrs	r3, r2
 8006896:	d02a      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8006898:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800689c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d011      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80068a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068a6:	d10a      	bne.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068ac:	3308      	adds	r3, #8
 80068ae:	2101      	movs	r1, #1
 80068b0:	4618      	mov	r0, r3
 80068b2:	f002 f86b 	bl	800898c <RCCEx_PLL2_Config>
 80068b6:	4603      	mov	r3, r0
 80068b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80068bc:	e004      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80068c4:	e000      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 80068c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10a      	bne.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80068d0:	4b98      	ldr	r3, [pc, #608]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80068d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068d4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80068d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068de:	4a95      	ldr	r2, [pc, #596]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80068e0:	430b      	orrs	r3, r1
 80068e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80068e4:	e003      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80068ea:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80068ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80068fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068fe:	2300      	movs	r3, #0
 8006900:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006904:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006908:	460b      	mov	r3, r1
 800690a:	4313      	orrs	r3, r2
 800690c:	d037      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800690e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006914:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006918:	d00e      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x760>
 800691a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800691e:	d816      	bhi.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x776>
 8006920:	2b00      	cmp	r3, #0
 8006922:	d018      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8006924:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006928:	d111      	bne.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800692a:	4b82      	ldr	r3, [pc, #520]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800692c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692e:	4a81      	ldr	r2, [pc, #516]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006930:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006934:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006936:	e00f      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006938:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800693c:	3308      	adds	r3, #8
 800693e:	2101      	movs	r1, #1
 8006940:	4618      	mov	r0, r3
 8006942:	f002 f823 	bl	800898c <RCCEx_PLL2_Config>
 8006946:	4603      	mov	r3, r0
 8006948:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800694c:	e004      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006954:	e000      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8006956:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006958:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10a      	bne.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006960:	4b74      	ldr	r3, [pc, #464]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006964:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006968:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800696c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800696e:	4a71      	ldr	r2, [pc, #452]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006970:	430b      	orrs	r3, r1
 8006972:	6513      	str	r3, [r2, #80]	@ 0x50
 8006974:	e003      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006976:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800697a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800697e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006986:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800698a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800698e:	2300      	movs	r3, #0
 8006990:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006994:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006998:	460b      	mov	r3, r1
 800699a:	4313      	orrs	r3, r2
 800699c:	d03a      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800699e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069a4:	2b03      	cmp	r3, #3
 80069a6:	d81d      	bhi.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80069a8:	a201      	add	r2, pc, #4	@ (adr r2, 80069b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80069aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ae:	bf00      	nop
 80069b0:	080069ed 	.word	0x080069ed
 80069b4:	080069c1 	.word	0x080069c1
 80069b8:	080069cf 	.word	0x080069cf
 80069bc:	080069ed 	.word	0x080069ed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069c0:	4b5c      	ldr	r3, [pc, #368]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80069c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c4:	4a5b      	ldr	r2, [pc, #364]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80069c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80069cc:	e00f      	b.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80069ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069d2:	3308      	adds	r3, #8
 80069d4:	2102      	movs	r1, #2
 80069d6:	4618      	mov	r0, r3
 80069d8:	f001 ffd8 	bl	800898c <RCCEx_PLL2_Config>
 80069dc:	4603      	mov	r3, r0
 80069de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80069e2:	e004      	b.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80069ea:	e000      	b.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 80069ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10a      	bne.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80069f6:	4b4f      	ldr	r3, [pc, #316]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80069f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069fa:	f023 0103 	bic.w	r1, r3, #3
 80069fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a04:	4a4b      	ldr	r2, [pc, #300]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006a06:	430b      	orrs	r3, r1
 8006a08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a0a:	e003      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a0c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006a10:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006a20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a24:	2300      	movs	r3, #0
 8006a26:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006a2a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006a2e:	460b      	mov	r3, r1
 8006a30:	4313      	orrs	r3, r2
 8006a32:	f000 80a0 	beq.w	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a36:	4b40      	ldr	r3, [pc, #256]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a3f      	ldr	r2, [pc, #252]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006a3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a42:	f7fa fa57 	bl	8000ef4 <HAL_GetTick>
 8006a46:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a4a:	e00b      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a4c:	f7fa fa52 	bl	8000ef4 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	2b64      	cmp	r3, #100	@ 0x64
 8006a5a:	d903      	bls.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006a62:	e005      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a64:	4b34      	ldr	r3, [pc, #208]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d0ed      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8006a70:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d17a      	bne.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006a78:	4b2e      	ldr	r3, [pc, #184]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006a7a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006a7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a80:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006a84:	4053      	eors	r3, r2
 8006a86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d015      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a8e:	4b29      	ldr	r3, [pc, #164]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a96:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a9a:	4b26      	ldr	r3, [pc, #152]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a9e:	4a25      	ldr	r2, [pc, #148]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006aa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006aa4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006aa6:	4b23      	ldr	r3, [pc, #140]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aaa:	4a22      	ldr	r2, [pc, #136]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006aac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ab0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006ab2:	4a20      	ldr	r2, [pc, #128]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006ab4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8006ab8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006aba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006abe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006ac2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ac6:	d118      	bne.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac8:	f7fa fa14 	bl	8000ef4 <HAL_GetTick>
 8006acc:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ad0:	e00d      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ad2:	f7fa fa0f 	bl	8000ef4 <HAL_GetTick>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006adc:	1ad2      	subs	r2, r2, r3
 8006ade:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d903      	bls.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8006aec:	e005      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006aee:	4b11      	ldr	r3, [pc, #68]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d0eb      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8006afa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d130      	bne.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b06:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006b0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b12:	d115      	bne.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8006b14:	4b07      	ldr	r3, [pc, #28]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006b1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b20:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006b24:	091a      	lsrs	r2, r3, #4
 8006b26:	4b05      	ldr	r3, [pc, #20]	@ (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8006b28:	4013      	ands	r3, r2
 8006b2a:	4a02      	ldr	r2, [pc, #8]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006b2c:	430b      	orrs	r3, r1
 8006b2e:	6113      	str	r3, [r2, #16]
 8006b30:	e00c      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x974>
 8006b32:	bf00      	nop
 8006b34:	58024400 	.word	0x58024400
 8006b38:	58024800 	.word	0x58024800
 8006b3c:	00ffffcf 	.word	0x00ffffcf
 8006b40:	4bd4      	ldr	r3, [pc, #848]	@ (8006e94 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	4ad3      	ldr	r2, [pc, #844]	@ (8006e94 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006b46:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006b4a:	6113      	str	r3, [r2, #16]
 8006b4c:	4bd1      	ldr	r3, [pc, #836]	@ (8006e94 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006b4e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006b50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b54:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b5c:	4acd      	ldr	r2, [pc, #820]	@ (8006e94 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006b5e:	430b      	orrs	r3, r1
 8006b60:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b62:	e008      	b.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b64:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b68:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8006b6c:	e003      	b.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b72:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006b76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7e:	f002 0301 	and.w	r3, r2, #1
 8006b82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b86:	2300      	movs	r3, #0
 8006b88:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006b8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006b90:	460b      	mov	r3, r1
 8006b92:	4313      	orrs	r3, r2
 8006b94:	f000 808b 	beq.w	8006cae <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006b98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ba0:	2b28      	cmp	r3, #40	@ 0x28
 8006ba2:	d86b      	bhi.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8006bac <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8006ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006baa:	bf00      	nop
 8006bac:	08006c85 	.word	0x08006c85
 8006bb0:	08006c7d 	.word	0x08006c7d
 8006bb4:	08006c7d 	.word	0x08006c7d
 8006bb8:	08006c7d 	.word	0x08006c7d
 8006bbc:	08006c7d 	.word	0x08006c7d
 8006bc0:	08006c7d 	.word	0x08006c7d
 8006bc4:	08006c7d 	.word	0x08006c7d
 8006bc8:	08006c7d 	.word	0x08006c7d
 8006bcc:	08006c51 	.word	0x08006c51
 8006bd0:	08006c7d 	.word	0x08006c7d
 8006bd4:	08006c7d 	.word	0x08006c7d
 8006bd8:	08006c7d 	.word	0x08006c7d
 8006bdc:	08006c7d 	.word	0x08006c7d
 8006be0:	08006c7d 	.word	0x08006c7d
 8006be4:	08006c7d 	.word	0x08006c7d
 8006be8:	08006c7d 	.word	0x08006c7d
 8006bec:	08006c67 	.word	0x08006c67
 8006bf0:	08006c7d 	.word	0x08006c7d
 8006bf4:	08006c7d 	.word	0x08006c7d
 8006bf8:	08006c7d 	.word	0x08006c7d
 8006bfc:	08006c7d 	.word	0x08006c7d
 8006c00:	08006c7d 	.word	0x08006c7d
 8006c04:	08006c7d 	.word	0x08006c7d
 8006c08:	08006c7d 	.word	0x08006c7d
 8006c0c:	08006c85 	.word	0x08006c85
 8006c10:	08006c7d 	.word	0x08006c7d
 8006c14:	08006c7d 	.word	0x08006c7d
 8006c18:	08006c7d 	.word	0x08006c7d
 8006c1c:	08006c7d 	.word	0x08006c7d
 8006c20:	08006c7d 	.word	0x08006c7d
 8006c24:	08006c7d 	.word	0x08006c7d
 8006c28:	08006c7d 	.word	0x08006c7d
 8006c2c:	08006c85 	.word	0x08006c85
 8006c30:	08006c7d 	.word	0x08006c7d
 8006c34:	08006c7d 	.word	0x08006c7d
 8006c38:	08006c7d 	.word	0x08006c7d
 8006c3c:	08006c7d 	.word	0x08006c7d
 8006c40:	08006c7d 	.word	0x08006c7d
 8006c44:	08006c7d 	.word	0x08006c7d
 8006c48:	08006c7d 	.word	0x08006c7d
 8006c4c:	08006c85 	.word	0x08006c85
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c54:	3308      	adds	r3, #8
 8006c56:	2101      	movs	r1, #1
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f001 fe97 	bl	800898c <RCCEx_PLL2_Config>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006c64:	e00f      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c6a:	3328      	adds	r3, #40	@ 0x28
 8006c6c:	2101      	movs	r1, #1
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f001 ff3e 	bl	8008af0 <RCCEx_PLL3_Config>
 8006c74:	4603      	mov	r3, r0
 8006c76:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006c7a:	e004      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006c82:	e000      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8006c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c86:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d10b      	bne.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006c8e:	4b81      	ldr	r3, [pc, #516]	@ (8006e94 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c92:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006c96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c9e:	4a7d      	ldr	r2, [pc, #500]	@ (8006e94 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006ca0:	430b      	orrs	r3, r1
 8006ca2:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ca4:	e003      	b.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ca6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006caa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006cae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb6:	f002 0302 	and.w	r3, r2, #2
 8006cba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006cc4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006cc8:	460b      	mov	r3, r1
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	d042      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006cce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006cd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006cd4:	2b05      	cmp	r3, #5
 8006cd6:	d825      	bhi.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8006cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ce0 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8006cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cde:	bf00      	nop
 8006ce0:	08006d2d 	.word	0x08006d2d
 8006ce4:	08006cf9 	.word	0x08006cf9
 8006ce8:	08006d0f 	.word	0x08006d0f
 8006cec:	08006d2d 	.word	0x08006d2d
 8006cf0:	08006d2d 	.word	0x08006d2d
 8006cf4:	08006d2d 	.word	0x08006d2d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006cfc:	3308      	adds	r3, #8
 8006cfe:	2101      	movs	r1, #1
 8006d00:	4618      	mov	r0, r3
 8006d02:	f001 fe43 	bl	800898c <RCCEx_PLL2_Config>
 8006d06:	4603      	mov	r3, r0
 8006d08:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006d0c:	e00f      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d12:	3328      	adds	r3, #40	@ 0x28
 8006d14:	2101      	movs	r1, #1
 8006d16:	4618      	mov	r0, r3
 8006d18:	f001 feea 	bl	8008af0 <RCCEx_PLL3_Config>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006d22:	e004      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006d2a:	e000      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8006d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10a      	bne.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006d36:	4b57      	ldr	r3, [pc, #348]	@ (8006e94 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d3a:	f023 0107 	bic.w	r1, r3, #7
 8006d3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d44:	4a53      	ldr	r2, [pc, #332]	@ (8006e94 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006d46:	430b      	orrs	r3, r1
 8006d48:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d4a:	e003      	b.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d4c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006d50:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5c:	f002 0304 	and.w	r3, r2, #4
 8006d60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d64:	2300      	movs	r3, #0
 8006d66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d6a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006d6e:	460b      	mov	r3, r1
 8006d70:	4313      	orrs	r3, r2
 8006d72:	d044      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006d74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d7c:	2b05      	cmp	r3, #5
 8006d7e:	d825      	bhi.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8006d80:	a201      	add	r2, pc, #4	@ (adr r2, 8006d88 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8006d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d86:	bf00      	nop
 8006d88:	08006dd5 	.word	0x08006dd5
 8006d8c:	08006da1 	.word	0x08006da1
 8006d90:	08006db7 	.word	0x08006db7
 8006d94:	08006dd5 	.word	0x08006dd5
 8006d98:	08006dd5 	.word	0x08006dd5
 8006d9c:	08006dd5 	.word	0x08006dd5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006da0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006da4:	3308      	adds	r3, #8
 8006da6:	2101      	movs	r1, #1
 8006da8:	4618      	mov	r0, r3
 8006daa:	f001 fdef 	bl	800898c <RCCEx_PLL2_Config>
 8006dae:	4603      	mov	r3, r0
 8006db0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006db4:	e00f      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006db6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006dba:	3328      	adds	r3, #40	@ 0x28
 8006dbc:	2101      	movs	r1, #1
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f001 fe96 	bl	8008af0 <RCCEx_PLL3_Config>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006dca:	e004      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006dd2:	e000      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8006dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dd6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10b      	bne.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006dde:	4b2d      	ldr	r3, [pc, #180]	@ (8006e94 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006de2:	f023 0107 	bic.w	r1, r3, #7
 8006de6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006dea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006dee:	4a29      	ldr	r2, [pc, #164]	@ (8006e94 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006df0:	430b      	orrs	r3, r1
 8006df2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006df4:	e003      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006dfa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006dfe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e06:	f002 0320 	and.w	r3, r2, #32
 8006e0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e0e:	2300      	movs	r3, #0
 8006e10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e18:	460b      	mov	r3, r1
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	d057      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006e1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e2a:	d035      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8006e2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e30:	d82c      	bhi.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006e32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e36:	d031      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8006e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e3c:	d826      	bhi.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006e3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e42:	d02d      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8006e44:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e48:	d820      	bhi.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006e4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e4e:	d012      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8006e50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e54:	d81a      	bhi.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d024      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8006e5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e5e:	d115      	bne.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e64:	3308      	adds	r3, #8
 8006e66:	2100      	movs	r1, #0
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f001 fd8f 	bl	800898c <RCCEx_PLL2_Config>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006e74:	e017      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e7a:	3328      	adds	r3, #40	@ 0x28
 8006e7c:	2102      	movs	r1, #2
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f001 fe36 	bl	8008af0 <RCCEx_PLL3_Config>
 8006e84:	4603      	mov	r3, r0
 8006e86:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006e8a:	e00c      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006e92:	e008      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8006e94:	58024400 	.word	0x58024400
        break;
 8006e98:	bf00      	nop
 8006e9a:	e004      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006e9c:	bf00      	nop
 8006e9e:	e002      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006ea0:	bf00      	nop
 8006ea2:	e000      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ea6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10b      	bne.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006eae:	4bc2      	ldr	r3, [pc, #776]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eb2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006eb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ebe:	4abe      	ldr	r2, [pc, #760]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ec0:	430b      	orrs	r3, r1
 8006ec2:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ec4:	e003      	b.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ec6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006eca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006ece:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006eda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006ede:	2300      	movs	r3, #0
 8006ee0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006ee4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006ee8:	460b      	mov	r3, r1
 8006eea:	4313      	orrs	r3, r2
 8006eec:	d055      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006eee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ef2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006ef6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006efa:	d033      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8006efc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006f00:	d82c      	bhi.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006f02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f06:	d02f      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8006f08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f0c:	d826      	bhi.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006f0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f12:	d02b      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8006f14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f18:	d820      	bhi.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006f1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f1e:	d012      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8006f20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f24:	d81a      	bhi.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d022      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8006f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f2e:	d115      	bne.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f34:	3308      	adds	r3, #8
 8006f36:	2100      	movs	r1, #0
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f001 fd27 	bl	800898c <RCCEx_PLL2_Config>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006f44:	e015      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f4a:	3328      	adds	r3, #40	@ 0x28
 8006f4c:	2102      	movs	r1, #2
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f001 fdce 	bl	8008af0 <RCCEx_PLL3_Config>
 8006f54:	4603      	mov	r3, r0
 8006f56:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006f5a:	e00a      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006f62:	e006      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006f64:	bf00      	nop
 8006f66:	e004      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006f68:	bf00      	nop
 8006f6a:	e002      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006f6c:	bf00      	nop
 8006f6e:	e000      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006f70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10b      	bne.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006f7a:	4b8f      	ldr	r3, [pc, #572]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f7e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006f82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006f8a:	4a8b      	ldr	r2, [pc, #556]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006f8c:	430b      	orrs	r3, r1
 8006f8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f90:	e003      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f92:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006f96:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006f9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa2:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006fa6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006faa:	2300      	movs	r3, #0
 8006fac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006fb0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	d055      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006fba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006fbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006fc2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006fc6:	d033      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006fc8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006fcc:	d82c      	bhi.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006fce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fd2:	d02f      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8006fd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fd8:	d826      	bhi.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006fda:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006fde:	d02b      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8006fe0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006fe4:	d820      	bhi.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006fe6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006fea:	d012      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8006fec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ff0:	d81a      	bhi.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d022      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8006ff6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ffa:	d115      	bne.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ffc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007000:	3308      	adds	r3, #8
 8007002:	2100      	movs	r1, #0
 8007004:	4618      	mov	r0, r3
 8007006:	f001 fcc1 	bl	800898c <RCCEx_PLL2_Config>
 800700a:	4603      	mov	r3, r0
 800700c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007010:	e015      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007012:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007016:	3328      	adds	r3, #40	@ 0x28
 8007018:	2102      	movs	r1, #2
 800701a:	4618      	mov	r0, r3
 800701c:	f001 fd68 	bl	8008af0 <RCCEx_PLL3_Config>
 8007020:	4603      	mov	r3, r0
 8007022:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007026:	e00a      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800702e:	e006      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8007030:	bf00      	nop
 8007032:	e004      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8007034:	bf00      	nop
 8007036:	e002      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8007038:	bf00      	nop
 800703a:	e000      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800703c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800703e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007042:	2b00      	cmp	r3, #0
 8007044:	d10b      	bne.n	800705e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007046:	4b5c      	ldr	r3, [pc, #368]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800704a:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800704e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007052:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007056:	4a58      	ldr	r2, [pc, #352]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007058:	430b      	orrs	r3, r1
 800705a:	6593      	str	r3, [r2, #88]	@ 0x58
 800705c:	e003      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800705e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007062:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007066:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800706a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706e:	f002 0308 	and.w	r3, r2, #8
 8007072:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007076:	2300      	movs	r3, #0
 8007078:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800707c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007080:	460b      	mov	r3, r1
 8007082:	4313      	orrs	r3, r2
 8007084:	d01e      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007086:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800708a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800708e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007092:	d10c      	bne.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007094:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007098:	3328      	adds	r3, #40	@ 0x28
 800709a:	2102      	movs	r1, #2
 800709c:	4618      	mov	r0, r3
 800709e:	f001 fd27 	bl	8008af0 <RCCEx_PLL3_Config>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d002      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80070ae:	4b42      	ldr	r3, [pc, #264]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80070b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80070b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80070ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070be:	4a3e      	ldr	r2, [pc, #248]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80070c0:	430b      	orrs	r3, r1
 80070c2:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80070c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80070c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070cc:	f002 0310 	and.w	r3, r2, #16
 80070d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80070d4:	2300      	movs	r3, #0
 80070d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80070da:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80070de:	460b      	mov	r3, r1
 80070e0:	4313      	orrs	r3, r2
 80070e2:	d01e      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80070e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80070e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80070ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070f0:	d10c      	bne.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80070f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80070f6:	3328      	adds	r3, #40	@ 0x28
 80070f8:	2102      	movs	r1, #2
 80070fa:	4618      	mov	r0, r3
 80070fc:	f001 fcf8 	bl	8008af0 <RCCEx_PLL3_Config>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800710c:	4b2a      	ldr	r3, [pc, #168]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800710e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007110:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007114:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007118:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800711c:	4a26      	ldr	r2, [pc, #152]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800711e:	430b      	orrs	r3, r1
 8007120:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007122:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800712e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007132:	2300      	movs	r3, #0
 8007134:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007138:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800713c:	460b      	mov	r3, r1
 800713e:	4313      	orrs	r3, r2
 8007140:	d040      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007142:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007146:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800714a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800714e:	d022      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8007150:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007154:	d81b      	bhi.n	800718e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007156:	2b00      	cmp	r3, #0
 8007158:	d003      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800715a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800715e:	d00b      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8007160:	e015      	b.n	800718e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007162:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007166:	3308      	adds	r3, #8
 8007168:	2100      	movs	r1, #0
 800716a:	4618      	mov	r0, r3
 800716c:	f001 fc0e 	bl	800898c <RCCEx_PLL2_Config>
 8007170:	4603      	mov	r3, r0
 8007172:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007176:	e00f      	b.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007178:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800717c:	3328      	adds	r3, #40	@ 0x28
 800717e:	2102      	movs	r1, #2
 8007180:	4618      	mov	r0, r3
 8007182:	f001 fcb5 	bl	8008af0 <RCCEx_PLL3_Config>
 8007186:	4603      	mov	r3, r0
 8007188:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800718c:	e004      	b.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8007194:	e000      	b.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8007196:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007198:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10d      	bne.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80071a0:	4b05      	ldr	r3, [pc, #20]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80071a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071a4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80071a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80071ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80071b0:	4a01      	ldr	r2, [pc, #4]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80071b2:	430b      	orrs	r3, r1
 80071b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80071b6:	e005      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80071b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80071c0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80071c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80071c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071cc:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80071d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80071d2:	2300      	movs	r3, #0
 80071d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80071d6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80071da:	460b      	mov	r3, r1
 80071dc:	4313      	orrs	r3, r2
 80071de:	d03b      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80071e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80071e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80071ec:	d01f      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x1056>
 80071ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80071f2:	d818      	bhi.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 80071f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071f8:	d003      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 80071fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071fe:	d007      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8007200:	e011      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007202:	4b64      	ldr	r3, [pc, #400]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007206:	4a63      	ldr	r2, [pc, #396]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007208:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800720c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800720e:	e00f      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007210:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007214:	3328      	adds	r3, #40	@ 0x28
 8007216:	2101      	movs	r1, #1
 8007218:	4618      	mov	r0, r3
 800721a:	f001 fc69 	bl	8008af0 <RCCEx_PLL3_Config>
 800721e:	4603      	mov	r3, r0
 8007220:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8007224:	e004      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800722c:	e000      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800722e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007230:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10b      	bne.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007238:	4b56      	ldr	r3, [pc, #344]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800723a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800723c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007240:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007244:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007248:	4a52      	ldr	r2, [pc, #328]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800724a:	430b      	orrs	r3, r1
 800724c:	6553      	str	r3, [r2, #84]	@ 0x54
 800724e:	e003      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007250:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007254:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007258:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800725c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007260:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007264:	673b      	str	r3, [r7, #112]	@ 0x70
 8007266:	2300      	movs	r3, #0
 8007268:	677b      	str	r3, [r7, #116]	@ 0x74
 800726a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800726e:	460b      	mov	r3, r1
 8007270:	4313      	orrs	r3, r2
 8007272:	d031      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007274:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 800727e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007282:	d007      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8007284:	e011      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007286:	4b43      	ldr	r3, [pc, #268]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728a:	4a42      	ldr	r2, [pc, #264]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800728c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007290:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007292:	e00e      	b.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007294:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007298:	3308      	adds	r3, #8
 800729a:	2102      	movs	r1, #2
 800729c:	4618      	mov	r0, r3
 800729e:	f001 fb75 	bl	800898c <RCCEx_PLL2_Config>
 80072a2:	4603      	mov	r3, r0
 80072a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80072a8:	e003      	b.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80072b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10a      	bne.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80072ba:	4b36      	ldr	r3, [pc, #216]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80072bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80072c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80072c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072c8:	4a32      	ldr	r2, [pc, #200]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80072ca:	430b      	orrs	r3, r1
 80072cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80072ce:	e003      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80072d4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80072d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80072dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80072e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072e6:	2300      	movs	r3, #0
 80072e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80072ea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80072ee:	460b      	mov	r3, r1
 80072f0:	4313      	orrs	r3, r2
 80072f2:	d00c      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80072f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80072f8:	3328      	adds	r3, #40	@ 0x28
 80072fa:	2102      	movs	r1, #2
 80072fc:	4618      	mov	r0, r3
 80072fe:	f001 fbf7 	bl	8008af0 <RCCEx_PLL3_Config>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d002      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800730e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007316:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800731a:	663b      	str	r3, [r7, #96]	@ 0x60
 800731c:	2300      	movs	r3, #0
 800731e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007320:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007324:	460b      	mov	r3, r1
 8007326:	4313      	orrs	r3, r2
 8007328:	d03a      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800732a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800732e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007332:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007336:	d018      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8007338:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800733c:	d811      	bhi.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800733e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007342:	d014      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8007344:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007348:	d80b      	bhi.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800734a:	2b00      	cmp	r3, #0
 800734c:	d011      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800734e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007352:	d106      	bne.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007354:	4b0f      	ldr	r3, [pc, #60]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007358:	4a0e      	ldr	r2, [pc, #56]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800735a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800735e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007360:	e008      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8007368:	e004      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800736a:	bf00      	nop
 800736c:	e002      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800736e:	bf00      	nop
 8007370:	e000      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8007372:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007374:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10d      	bne.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800737c:	4b05      	ldr	r3, [pc, #20]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800737e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007380:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007384:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007388:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800738c:	4a01      	ldr	r2, [pc, #4]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800738e:	430b      	orrs	r3, r1
 8007390:	6553      	str	r3, [r2, #84]	@ 0x54
 8007392:	e005      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8007394:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007398:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800739c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80073a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80073a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80073ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073ae:	2300      	movs	r3, #0
 80073b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073b2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80073b6:	460b      	mov	r3, r1
 80073b8:	4313      	orrs	r3, r2
 80073ba:	d009      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80073bc:	4baa      	ldr	r3, [pc, #680]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80073be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80073c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80073c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073ca:	4aa7      	ldr	r2, [pc, #668]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80073cc:	430b      	orrs	r3, r1
 80073ce:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80073d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80073d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80073dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80073de:	2300      	movs	r3, #0
 80073e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80073e2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80073e6:	460b      	mov	r3, r1
 80073e8:	4313      	orrs	r3, r2
 80073ea:	d00a      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80073ec:	4b9e      	ldr	r3, [pc, #632]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80073f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80073f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80073fc:	4a9a      	ldr	r2, [pc, #616]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80073fe:	430b      	orrs	r3, r1
 8007400:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007402:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800740e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007410:	2300      	movs	r3, #0
 8007412:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007414:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007418:	460b      	mov	r3, r1
 800741a:	4313      	orrs	r3, r2
 800741c:	d009      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800741e:	4b92      	ldr	r3, [pc, #584]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007420:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007422:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007426:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800742a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800742c:	4a8e      	ldr	r2, [pc, #568]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800742e:	430b      	orrs	r3, r1
 8007430:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007432:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800743e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007440:	2300      	movs	r3, #0
 8007442:	647b      	str	r3, [r7, #68]	@ 0x44
 8007444:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007448:	460b      	mov	r3, r1
 800744a:	4313      	orrs	r3, r2
 800744c:	d00e      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800744e:	4b86      	ldr	r3, [pc, #536]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	4a85      	ldr	r2, [pc, #532]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007454:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007458:	6113      	str	r3, [r2, #16]
 800745a:	4b83      	ldr	r3, [pc, #524]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800745c:	6919      	ldr	r1, [r3, #16]
 800745e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007462:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007466:	4a80      	ldr	r2, [pc, #512]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007468:	430b      	orrs	r3, r1
 800746a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800746c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007474:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007478:	63bb      	str	r3, [r7, #56]	@ 0x38
 800747a:	2300      	movs	r3, #0
 800747c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800747e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007482:	460b      	mov	r3, r1
 8007484:	4313      	orrs	r3, r2
 8007486:	d009      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007488:	4b77      	ldr	r3, [pc, #476]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800748a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800748c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007490:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007496:	4a74      	ldr	r2, [pc, #464]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007498:	430b      	orrs	r3, r1
 800749a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800749c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80074a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80074a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80074aa:	2300      	movs	r3, #0
 80074ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80074b2:	460b      	mov	r3, r1
 80074b4:	4313      	orrs	r3, r2
 80074b6:	d00a      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80074b8:	4b6b      	ldr	r3, [pc, #428]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80074ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074bc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80074c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80074c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074c8:	4a67      	ldr	r2, [pc, #412]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80074ca:	430b      	orrs	r3, r1
 80074cc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80074ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80074d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d6:	2100      	movs	r1, #0
 80074d8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074e0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80074e4:	460b      	mov	r3, r1
 80074e6:	4313      	orrs	r3, r2
 80074e8:	d011      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80074ee:	3308      	adds	r3, #8
 80074f0:	2100      	movs	r1, #0
 80074f2:	4618      	mov	r0, r3
 80074f4:	f001 fa4a 	bl	800898c <RCCEx_PLL2_Config>
 80074f8:	4603      	mov	r3, r0
 80074fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80074fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007502:	2b00      	cmp	r3, #0
 8007504:	d003      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007506:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800750a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800750e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007516:	2100      	movs	r1, #0
 8007518:	6239      	str	r1, [r7, #32]
 800751a:	f003 0302 	and.w	r3, r3, #2
 800751e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007520:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007524:	460b      	mov	r3, r1
 8007526:	4313      	orrs	r3, r2
 8007528:	d011      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800752a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800752e:	3308      	adds	r3, #8
 8007530:	2101      	movs	r1, #1
 8007532:	4618      	mov	r0, r3
 8007534:	f001 fa2a 	bl	800898c <RCCEx_PLL2_Config>
 8007538:	4603      	mov	r3, r0
 800753a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800753e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007542:	2b00      	cmp	r3, #0
 8007544:	d003      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007546:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800754a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800754e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007556:	2100      	movs	r1, #0
 8007558:	61b9      	str	r1, [r7, #24]
 800755a:	f003 0304 	and.w	r3, r3, #4
 800755e:	61fb      	str	r3, [r7, #28]
 8007560:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007564:	460b      	mov	r3, r1
 8007566:	4313      	orrs	r3, r2
 8007568:	d011      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800756a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800756e:	3308      	adds	r3, #8
 8007570:	2102      	movs	r1, #2
 8007572:	4618      	mov	r0, r3
 8007574:	f001 fa0a 	bl	800898c <RCCEx_PLL2_Config>
 8007578:	4603      	mov	r3, r0
 800757a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800757e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007582:	2b00      	cmp	r3, #0
 8007584:	d003      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007586:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800758a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800758e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007596:	2100      	movs	r1, #0
 8007598:	6139      	str	r1, [r7, #16]
 800759a:	f003 0308 	and.w	r3, r3, #8
 800759e:	617b      	str	r3, [r7, #20]
 80075a0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80075a4:	460b      	mov	r3, r1
 80075a6:	4313      	orrs	r3, r2
 80075a8:	d011      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80075ae:	3328      	adds	r3, #40	@ 0x28
 80075b0:	2100      	movs	r1, #0
 80075b2:	4618      	mov	r0, r3
 80075b4:	f001 fa9c 	bl	8008af0 <RCCEx_PLL3_Config>
 80075b8:	4603      	mov	r3, r0
 80075ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80075be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d003      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80075ca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80075ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80075d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d6:	2100      	movs	r1, #0
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	f003 0310 	and.w	r3, r3, #16
 80075de:	60fb      	str	r3, [r7, #12]
 80075e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80075e4:	460b      	mov	r3, r1
 80075e6:	4313      	orrs	r3, r2
 80075e8:	d011      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80075ee:	3328      	adds	r3, #40	@ 0x28
 80075f0:	2101      	movs	r1, #1
 80075f2:	4618      	mov	r0, r3
 80075f4:	f001 fa7c 	bl	8008af0 <RCCEx_PLL3_Config>
 80075f8:	4603      	mov	r3, r0
 80075fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80075fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007606:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800760a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800760e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007616:	2100      	movs	r1, #0
 8007618:	6039      	str	r1, [r7, #0]
 800761a:	f003 0320 	and.w	r3, r3, #32
 800761e:	607b      	str	r3, [r7, #4]
 8007620:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007624:	460b      	mov	r3, r1
 8007626:	4313      	orrs	r3, r2
 8007628:	d011      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800762a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800762e:	3328      	adds	r3, #40	@ 0x28
 8007630:	2102      	movs	r1, #2
 8007632:	4618      	mov	r0, r3
 8007634:	f001 fa5c 	bl	8008af0 <RCCEx_PLL3_Config>
 8007638:	4603      	mov	r3, r0
 800763a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800763e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007642:	2b00      	cmp	r3, #0
 8007644:	d003      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007646:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800764a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 800764e:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8007652:	2b00      	cmp	r3, #0
 8007654:	d101      	bne.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	e000      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
}
 800765c:	4618      	mov	r0, r3
 800765e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007662:	46bd      	mov	sp, r7
 8007664:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007668:	58024400 	.word	0x58024400

0800766c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b090      	sub	sp, #64	@ 0x40
 8007670:	af00      	add	r7, sp, #0
 8007672:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007676:	e9d7 2300 	ldrd	r2, r3, [r7]
 800767a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800767e:	430b      	orrs	r3, r1
 8007680:	f040 8094 	bne.w	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007684:	4b9e      	ldr	r3, [pc, #632]	@ (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007688:	f003 0307 	and.w	r3, r3, #7
 800768c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800768e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007690:	2b04      	cmp	r3, #4
 8007692:	f200 8087 	bhi.w	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007696:	a201      	add	r2, pc, #4	@ (adr r2, 800769c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769c:	080076b1 	.word	0x080076b1
 80076a0:	080076d9 	.word	0x080076d9
 80076a4:	08007701 	.word	0x08007701
 80076a8:	0800779d 	.word	0x0800779d
 80076ac:	08007729 	.word	0x08007729
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076b0:	4b93      	ldr	r3, [pc, #588]	@ (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076bc:	d108      	bne.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076c2:	4618      	mov	r0, r3
 80076c4:	f001 f810 	bl	80086e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076cc:	f000 bd45 	b.w	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076d0:	2300      	movs	r3, #0
 80076d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076d4:	f000 bd41 	b.w	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076d8:	4b89      	ldr	r3, [pc, #548]	@ (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076e4:	d108      	bne.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076e6:	f107 0318 	add.w	r3, r7, #24
 80076ea:	4618      	mov	r0, r3
 80076ec:	f000 fd54 	bl	8008198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076f4:	f000 bd31 	b.w	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076f8:	2300      	movs	r3, #0
 80076fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076fc:	f000 bd2d 	b.w	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007700:	4b7f      	ldr	r3, [pc, #508]	@ (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007708:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800770c:	d108      	bne.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800770e:	f107 030c 	add.w	r3, r7, #12
 8007712:	4618      	mov	r0, r3
 8007714:	f000 fe94 	bl	8008440 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800771c:	f000 bd1d 	b.w	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007720:	2300      	movs	r3, #0
 8007722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007724:	f000 bd19 	b.w	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007728:	4b75      	ldr	r3, [pc, #468]	@ (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800772a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800772c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007730:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007732:	4b73      	ldr	r3, [pc, #460]	@ (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0304 	and.w	r3, r3, #4
 800773a:	2b04      	cmp	r3, #4
 800773c:	d10c      	bne.n	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800773e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007740:	2b00      	cmp	r3, #0
 8007742:	d109      	bne.n	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007744:	4b6e      	ldr	r3, [pc, #440]	@ (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	08db      	lsrs	r3, r3, #3
 800774a:	f003 0303 	and.w	r3, r3, #3
 800774e:	4a6d      	ldr	r2, [pc, #436]	@ (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007750:	fa22 f303 	lsr.w	r3, r2, r3
 8007754:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007756:	e01f      	b.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007758:	4b69      	ldr	r3, [pc, #420]	@ (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007764:	d106      	bne.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007768:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800776c:	d102      	bne.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800776e:	4b66      	ldr	r3, [pc, #408]	@ (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007770:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007772:	e011      	b.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007774:	4b62      	ldr	r3, [pc, #392]	@ (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800777c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007780:	d106      	bne.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007784:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007788:	d102      	bne.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800778a:	4b60      	ldr	r3, [pc, #384]	@ (800790c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800778c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800778e:	e003      	b.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007790:	2300      	movs	r3, #0
 8007792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007794:	f000 bce1 	b.w	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007798:	f000 bcdf 	b.w	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800779c:	4b5c      	ldr	r3, [pc, #368]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800779e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077a0:	f000 bcdb 	b.w	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80077a4:	2300      	movs	r3, #0
 80077a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077a8:	f000 bcd7 	b.w	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80077ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077b0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80077b4:	430b      	orrs	r3, r1
 80077b6:	f040 80ad 	bne.w	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80077ba:	4b51      	ldr	r3, [pc, #324]	@ (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077be:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80077c2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80077c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077ca:	d056      	beq.n	800787a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80077cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077d2:	f200 8090 	bhi.w	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80077d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d8:	2bc0      	cmp	r3, #192	@ 0xc0
 80077da:	f000 8088 	beq.w	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80077de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e0:	2bc0      	cmp	r3, #192	@ 0xc0
 80077e2:	f200 8088 	bhi.w	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80077e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e8:	2b80      	cmp	r3, #128	@ 0x80
 80077ea:	d032      	beq.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80077ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ee:	2b80      	cmp	r3, #128	@ 0x80
 80077f0:	f200 8081 	bhi.w	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80077f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d003      	beq.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80077fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fc:	2b40      	cmp	r3, #64	@ 0x40
 80077fe:	d014      	beq.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007800:	e079      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007802:	4b3f      	ldr	r3, [pc, #252]	@ (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800780a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800780e:	d108      	bne.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007810:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007814:	4618      	mov	r0, r3
 8007816:	f000 ff67 	bl	80086e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800781a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800781c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800781e:	f000 bc9c 	b.w	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007822:	2300      	movs	r3, #0
 8007824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007826:	f000 bc98 	b.w	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800782a:	4b35      	ldr	r3, [pc, #212]	@ (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007832:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007836:	d108      	bne.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007838:	f107 0318 	add.w	r3, r7, #24
 800783c:	4618      	mov	r0, r3
 800783e:	f000 fcab 	bl	8008198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007846:	f000 bc88 	b.w	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800784a:	2300      	movs	r3, #0
 800784c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800784e:	f000 bc84 	b.w	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007852:	4b2b      	ldr	r3, [pc, #172]	@ (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800785a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800785e:	d108      	bne.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007860:	f107 030c 	add.w	r3, r7, #12
 8007864:	4618      	mov	r0, r3
 8007866:	f000 fdeb 	bl	8008440 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800786e:	f000 bc74 	b.w	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007872:	2300      	movs	r3, #0
 8007874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007876:	f000 bc70 	b.w	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800787a:	4b21      	ldr	r3, [pc, #132]	@ (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800787c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800787e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007882:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007884:	4b1e      	ldr	r3, [pc, #120]	@ (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0304 	and.w	r3, r3, #4
 800788c:	2b04      	cmp	r3, #4
 800788e:	d10c      	bne.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007892:	2b00      	cmp	r3, #0
 8007894:	d109      	bne.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007896:	4b1a      	ldr	r3, [pc, #104]	@ (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	08db      	lsrs	r3, r3, #3
 800789c:	f003 0303 	and.w	r3, r3, #3
 80078a0:	4a18      	ldr	r2, [pc, #96]	@ (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80078a2:	fa22 f303 	lsr.w	r3, r2, r3
 80078a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078a8:	e01f      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078aa:	4b15      	ldr	r3, [pc, #84]	@ (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078b6:	d106      	bne.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80078b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078be:	d102      	bne.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80078c0:	4b11      	ldr	r3, [pc, #68]	@ (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80078c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078c4:	e011      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078c6:	4b0e      	ldr	r3, [pc, #56]	@ (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078d2:	d106      	bne.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80078d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078da:	d102      	bne.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80078dc:	4b0b      	ldr	r3, [pc, #44]	@ (800790c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80078de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078e0:	e003      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80078e2:	2300      	movs	r3, #0
 80078e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80078e6:	f000 bc38 	b.w	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80078ea:	f000 bc36 	b.w	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80078ee:	4b08      	ldr	r3, [pc, #32]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80078f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078f2:	f000 bc32 	b.w	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80078f6:	2300      	movs	r3, #0
 80078f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078fa:	f000 bc2e 	b.w	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80078fe:	bf00      	nop
 8007900:	58024400 	.word	0x58024400
 8007904:	03d09000 	.word	0x03d09000
 8007908:	003d0900 	.word	0x003d0900
 800790c:	017d7840 	.word	0x017d7840
 8007910:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007914:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007918:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800791c:	430b      	orrs	r3, r1
 800791e:	f040 809c 	bne.w	8007a5a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007922:	4b9e      	ldr	r3, [pc, #632]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007926:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800792a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800792c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007932:	d054      	beq.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007936:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800793a:	f200 808b 	bhi.w	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800793e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007940:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007944:	f000 8083 	beq.w	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800794e:	f200 8081 	bhi.w	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007954:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007958:	d02f      	beq.n	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800795a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800795c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007960:	d878      	bhi.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007964:	2b00      	cmp	r3, #0
 8007966:	d004      	beq.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800796e:	d012      	beq.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007970:	e070      	b.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007972:	4b8a      	ldr	r3, [pc, #552]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800797a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800797e:	d107      	bne.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007980:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007984:	4618      	mov	r0, r3
 8007986:	f000 feaf 	bl	80086e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800798a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800798c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800798e:	e3e4      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007990:	2300      	movs	r3, #0
 8007992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007994:	e3e1      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007996:	4b81      	ldr	r3, [pc, #516]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800799e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079a2:	d107      	bne.n	80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079a4:	f107 0318 	add.w	r3, r7, #24
 80079a8:	4618      	mov	r0, r3
 80079aa:	f000 fbf5 	bl	8008198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079b2:	e3d2      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079b4:	2300      	movs	r3, #0
 80079b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079b8:	e3cf      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079ba:	4b78      	ldr	r3, [pc, #480]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079c6:	d107      	bne.n	80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079c8:	f107 030c 	add.w	r3, r7, #12
 80079cc:	4618      	mov	r0, r3
 80079ce:	f000 fd37 	bl	8008440 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079d6:	e3c0      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079d8:	2300      	movs	r3, #0
 80079da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079dc:	e3bd      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80079de:	4b6f      	ldr	r3, [pc, #444]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80079e6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079e8:	4b6c      	ldr	r3, [pc, #432]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 0304 	and.w	r3, r3, #4
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	d10c      	bne.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80079f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d109      	bne.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079fa:	4b68      	ldr	r3, [pc, #416]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	08db      	lsrs	r3, r3, #3
 8007a00:	f003 0303 	and.w	r3, r3, #3
 8007a04:	4a66      	ldr	r2, [pc, #408]	@ (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007a06:	fa22 f303 	lsr.w	r3, r2, r3
 8007a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a0c:	e01e      	b.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a0e:	4b63      	ldr	r3, [pc, #396]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a1a:	d106      	bne.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a22:	d102      	bne.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007a24:	4b5f      	ldr	r3, [pc, #380]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a28:	e010      	b.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a2a:	4b5c      	ldr	r3, [pc, #368]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a36:	d106      	bne.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a3e:	d102      	bne.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007a40:	4b59      	ldr	r3, [pc, #356]	@ (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a44:	e002      	b.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007a46:	2300      	movs	r3, #0
 8007a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007a4a:	e386      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a4c:	e385      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a4e:	4b57      	ldr	r3, [pc, #348]	@ (8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a52:	e382      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007a54:	2300      	movs	r3, #0
 8007a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a58:	e37f      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007a5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a5e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007a62:	430b      	orrs	r3, r1
 8007a64:	f040 80a7 	bne.w	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007a68:	4b4c      	ldr	r3, [pc, #304]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a6c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007a70:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007a78:	d055      	beq.n	8007b26 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007a80:	f200 8096 	bhi.w	8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a86:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007a8a:	f000 8084 	beq.w	8007b96 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a90:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007a94:	f200 808c 	bhi.w	8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a9e:	d030      	beq.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007aa6:	f200 8083 	bhi.w	8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d004      	beq.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ab6:	d012      	beq.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007ab8:	e07a      	b.n	8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007aba:	4b38      	ldr	r3, [pc, #224]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ac2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ac6:	d107      	bne.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ac8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007acc:	4618      	mov	r0, r3
 8007ace:	f000 fe0b 	bl	80086e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ad6:	e340      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007adc:	e33d      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ade:	4b2f      	ldr	r3, [pc, #188]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ae6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007aea:	d107      	bne.n	8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aec:	f107 0318 	add.w	r3, r7, #24
 8007af0:	4618      	mov	r0, r3
 8007af2:	f000 fb51 	bl	8008198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007afa:	e32e      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007afc:	2300      	movs	r3, #0
 8007afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b00:	e32b      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b02:	4b26      	ldr	r3, [pc, #152]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b0e:	d107      	bne.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b10:	f107 030c 	add.w	r3, r7, #12
 8007b14:	4618      	mov	r0, r3
 8007b16:	f000 fc93 	bl	8008440 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b1e:	e31c      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b20:	2300      	movs	r3, #0
 8007b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b24:	e319      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b26:	4b1d      	ldr	r3, [pc, #116]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007b2e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b30:	4b1a      	ldr	r3, [pc, #104]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 0304 	and.w	r3, r3, #4
 8007b38:	2b04      	cmp	r3, #4
 8007b3a:	d10c      	bne.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d109      	bne.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b42:	4b16      	ldr	r3, [pc, #88]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	08db      	lsrs	r3, r3, #3
 8007b48:	f003 0303 	and.w	r3, r3, #3
 8007b4c:	4a14      	ldr	r2, [pc, #80]	@ (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b54:	e01e      	b.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b56:	4b11      	ldr	r3, [pc, #68]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b62:	d106      	bne.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b6a:	d102      	bne.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b70:	e010      	b.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b72:	4b0a      	ldr	r3, [pc, #40]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b7e:	d106      	bne.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b86:	d102      	bne.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007b88:	4b07      	ldr	r3, [pc, #28]	@ (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b8c:	e002      	b.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007b92:	e2e2      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007b94:	e2e1      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007b96:	4b05      	ldr	r3, [pc, #20]	@ (8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b9a:	e2de      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007b9c:	58024400 	.word	0x58024400
 8007ba0:	03d09000 	.word	0x03d09000
 8007ba4:	003d0900 	.word	0x003d0900
 8007ba8:	017d7840 	.word	0x017d7840
 8007bac:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bb4:	e2d1      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007bb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bba:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007bbe:	430b      	orrs	r3, r1
 8007bc0:	f040 809c 	bne.w	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007bc4:	4b93      	ldr	r3, [pc, #588]	@ (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bc8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007bcc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007bd4:	d054      	beq.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007bdc:	f200 808b 	bhi.w	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007be6:	f000 8083 	beq.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007bf0:	f200 8081 	bhi.w	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bfa:	d02f      	beq.n	8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c02:	d878      	bhi.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d004      	beq.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c10:	d012      	beq.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007c12:	e070      	b.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c14:	4b7f      	ldr	r3, [pc, #508]	@ (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c20:	d107      	bne.n	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 fd5e 	bl	80086e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c30:	e293      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c32:	2300      	movs	r3, #0
 8007c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c36:	e290      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c38:	4b76      	ldr	r3, [pc, #472]	@ (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c44:	d107      	bne.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c46:	f107 0318 	add.w	r3, r7, #24
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f000 faa4 	bl	8008198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c54:	e281      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c56:	2300      	movs	r3, #0
 8007c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c5a:	e27e      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c5c:	4b6d      	ldr	r3, [pc, #436]	@ (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c68:	d107      	bne.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c6a:	f107 030c 	add.w	r3, r7, #12
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f000 fbe6 	bl	8008440 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c78:	e26f      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c7e:	e26c      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c80:	4b64      	ldr	r3, [pc, #400]	@ (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c84:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007c88:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c8a:	4b62      	ldr	r3, [pc, #392]	@ (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 0304 	and.w	r3, r3, #4
 8007c92:	2b04      	cmp	r3, #4
 8007c94:	d10c      	bne.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d109      	bne.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c9c:	4b5d      	ldr	r3, [pc, #372]	@ (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	08db      	lsrs	r3, r3, #3
 8007ca2:	f003 0303 	and.w	r3, r3, #3
 8007ca6:	4a5c      	ldr	r2, [pc, #368]	@ (8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8007cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cae:	e01e      	b.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007cb0:	4b58      	ldr	r3, [pc, #352]	@ (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cbc:	d106      	bne.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cc4:	d102      	bne.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007cc6:	4b55      	ldr	r3, [pc, #340]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cca:	e010      	b.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ccc:	4b51      	ldr	r3, [pc, #324]	@ (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cd8:	d106      	bne.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ce0:	d102      	bne.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007ce2:	4b4f      	ldr	r3, [pc, #316]	@ (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ce6:	e002      	b.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007cec:	e235      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007cee:	e234      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007cf0:	4b4c      	ldr	r3, [pc, #304]	@ (8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cf4:	e231      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cfa:	e22e      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007cfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d00:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007d04:	430b      	orrs	r3, r1
 8007d06:	f040 808f 	bne.w	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007d0a:	4b42      	ldr	r3, [pc, #264]	@ (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d0e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007d12:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d16:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d1a:	d06b      	beq.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d1e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d22:	d874      	bhi.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d26:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d2a:	d056      	beq.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d2e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d32:	d86c      	bhi.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d36:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d3a:	d03b      	beq.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d42:	d864      	bhi.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d4a:	d021      	beq.n	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d52:	d85c      	bhi.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d004      	beq.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d60:	d004      	beq.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007d62:	e054      	b.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007d64:	f7fe fa22 	bl	80061ac <HAL_RCC_GetPCLK1Freq>
 8007d68:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007d6a:	e1f6      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d6c:	4b29      	ldr	r3, [pc, #164]	@ (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d78:	d107      	bne.n	8007d8a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d7a:	f107 0318 	add.w	r3, r7, #24
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f000 fa0a 	bl	8008198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d88:	e1e7      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d8e:	e1e4      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d90:	4b20      	ldr	r3, [pc, #128]	@ (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d9c:	d107      	bne.n	8007dae <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d9e:	f107 030c 	add.w	r3, r7, #12
 8007da2:	4618      	mov	r0, r3
 8007da4:	f000 fb4c 	bl	8008440 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dac:	e1d5      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dae:	2300      	movs	r3, #0
 8007db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007db2:	e1d2      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007db4:	4b17      	ldr	r3, [pc, #92]	@ (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 0304 	and.w	r3, r3, #4
 8007dbc:	2b04      	cmp	r3, #4
 8007dbe:	d109      	bne.n	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007dc0:	4b14      	ldr	r3, [pc, #80]	@ (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	08db      	lsrs	r3, r3, #3
 8007dc6:	f003 0303 	and.w	r3, r3, #3
 8007dca:	4a13      	ldr	r2, [pc, #76]	@ (8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8007dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dd2:	e1c2      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dd8:	e1bf      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007dda:	4b0e      	ldr	r3, [pc, #56]	@ (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007de2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007de6:	d102      	bne.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007de8:	4b0c      	ldr	r3, [pc, #48]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dec:	e1b5      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dee:	2300      	movs	r3, #0
 8007df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007df2:	e1b2      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007df4:	4b07      	ldr	r3, [pc, #28]	@ (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e00:	d102      	bne.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007e02:	4b07      	ldr	r3, [pc, #28]	@ (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e06:	e1a8      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e0c:	e1a5      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e12:	e1a2      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e14:	58024400 	.word	0x58024400
 8007e18:	03d09000 	.word	0x03d09000
 8007e1c:	003d0900 	.word	0x003d0900
 8007e20:	017d7840 	.word	0x017d7840
 8007e24:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e2c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007e30:	430b      	orrs	r3, r1
 8007e32:	d173      	bne.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007e34:	4b9c      	ldr	r3, [pc, #624]	@ (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007e3c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e44:	d02f      	beq.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e4c:	d863      	bhi.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d004      	beq.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e5a:	d012      	beq.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007e5c:	e05b      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e5e:	4b92      	ldr	r3, [pc, #584]	@ (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e6a:	d107      	bne.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e6c:	f107 0318 	add.w	r3, r7, #24
 8007e70:	4618      	mov	r0, r3
 8007e72:	f000 f991 	bl	8008198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e7a:	e16e      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e80:	e16b      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e82:	4b89      	ldr	r3, [pc, #548]	@ (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e8e:	d107      	bne.n	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e90:	f107 030c 	add.w	r3, r7, #12
 8007e94:	4618      	mov	r0, r3
 8007e96:	f000 fad3 	bl	8008440 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e9e:	e15c      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ea4:	e159      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ea6:	4b80      	ldr	r3, [pc, #512]	@ (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007eaa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007eae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007eb0:	4b7d      	ldr	r3, [pc, #500]	@ (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 0304 	and.w	r3, r3, #4
 8007eb8:	2b04      	cmp	r3, #4
 8007eba:	d10c      	bne.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d109      	bne.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ec2:	4b79      	ldr	r3, [pc, #484]	@ (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	08db      	lsrs	r3, r3, #3
 8007ec8:	f003 0303 	and.w	r3, r3, #3
 8007ecc:	4a77      	ldr	r2, [pc, #476]	@ (80080ac <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007ece:	fa22 f303 	lsr.w	r3, r2, r3
 8007ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ed4:	e01e      	b.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ed6:	4b74      	ldr	r3, [pc, #464]	@ (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ede:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ee2:	d106      	bne.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ee6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007eea:	d102      	bne.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007eec:	4b70      	ldr	r3, [pc, #448]	@ (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ef0:	e010      	b.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ef2:	4b6d      	ldr	r3, [pc, #436]	@ (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007efa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007efe:	d106      	bne.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f06:	d102      	bne.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007f08:	4b6a      	ldr	r3, [pc, #424]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f0c:	e002      	b.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007f12:	e122      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f14:	e121      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007f16:	2300      	movs	r3, #0
 8007f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f1a:	e11e      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007f1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f20:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007f24:	430b      	orrs	r3, r1
 8007f26:	d133      	bne.n	8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007f28:	4b5f      	ldr	r3, [pc, #380]	@ (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f30:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d004      	beq.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f3e:	d012      	beq.n	8007f66 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007f40:	e023      	b.n	8007f8a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f42:	4b59      	ldr	r3, [pc, #356]	@ (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f4e:	d107      	bne.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f54:	4618      	mov	r0, r3
 8007f56:	f000 fbc7 	bl	80086e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f5e:	e0fc      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f60:	2300      	movs	r3, #0
 8007f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f64:	e0f9      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f66:	4b50      	ldr	r3, [pc, #320]	@ (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f72:	d107      	bne.n	8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f74:	f107 0318 	add.w	r3, r7, #24
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f000 f90d 	bl	8008198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007f7e:	6a3b      	ldr	r3, [r7, #32]
 8007f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f82:	e0ea      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f84:	2300      	movs	r3, #0
 8007f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f88:	e0e7      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f8e:	e0e4      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007f90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f94:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007f98:	430b      	orrs	r3, r1
 8007f9a:	f040 808d 	bne.w	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007f9e:	4b42      	ldr	r3, [pc, #264]	@ (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fa2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007fa6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007faa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007fae:	d06b      	beq.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007fb6:	d874      	bhi.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fbe:	d056      	beq.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fc6:	d86c      	bhi.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007fce:	d03b      	beq.n	8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007fd6:	d864      	bhi.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fde:	d021      	beq.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fe6:	d85c      	bhi.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d004      	beq.n	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ff4:	d004      	beq.n	8008000 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007ff6:	e054      	b.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007ff8:	f000 f8b8 	bl	800816c <HAL_RCCEx_GetD3PCLK1Freq>
 8007ffc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ffe:	e0ac      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008000:	4b29      	ldr	r3, [pc, #164]	@ (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008008:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800800c:	d107      	bne.n	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800800e:	f107 0318 	add.w	r3, r7, #24
 8008012:	4618      	mov	r0, r3
 8008014:	f000 f8c0 	bl	8008198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800801c:	e09d      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800801e:	2300      	movs	r3, #0
 8008020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008022:	e09a      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008024:	4b20      	ldr	r3, [pc, #128]	@ (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800802c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008030:	d107      	bne.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008032:	f107 030c 	add.w	r3, r7, #12
 8008036:	4618      	mov	r0, r3
 8008038:	f000 fa02 	bl	8008440 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008040:	e08b      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008042:	2300      	movs	r3, #0
 8008044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008046:	e088      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008048:	4b17      	ldr	r3, [pc, #92]	@ (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 0304 	and.w	r3, r3, #4
 8008050:	2b04      	cmp	r3, #4
 8008052:	d109      	bne.n	8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008054:	4b14      	ldr	r3, [pc, #80]	@ (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	08db      	lsrs	r3, r3, #3
 800805a:	f003 0303 	and.w	r3, r3, #3
 800805e:	4a13      	ldr	r2, [pc, #76]	@ (80080ac <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008060:	fa22 f303 	lsr.w	r3, r2, r3
 8008064:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008066:	e078      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008068:	2300      	movs	r3, #0
 800806a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800806c:	e075      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800806e:	4b0e      	ldr	r3, [pc, #56]	@ (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008076:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800807a:	d102      	bne.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800807c:	4b0c      	ldr	r3, [pc, #48]	@ (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800807e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008080:	e06b      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008082:	2300      	movs	r3, #0
 8008084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008086:	e068      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008088:	4b07      	ldr	r3, [pc, #28]	@ (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008090:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008094:	d102      	bne.n	800809c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008096:	4b07      	ldr	r3, [pc, #28]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008098:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800809a:	e05e      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800809c:	2300      	movs	r3, #0
 800809e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080a0:	e05b      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80080a2:	2300      	movs	r3, #0
 80080a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080a6:	e058      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80080a8:	58024400 	.word	0x58024400
 80080ac:	03d09000 	.word	0x03d09000
 80080b0:	003d0900 	.word	0x003d0900
 80080b4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80080b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080bc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80080c0:	430b      	orrs	r3, r1
 80080c2:	d148      	bne.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80080c4:	4b27      	ldr	r3, [pc, #156]	@ (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80080c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80080cc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80080ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080d4:	d02a      	beq.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80080d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080dc:	d838      	bhi.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80080de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d004      	beq.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80080e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080ea:	d00d      	beq.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80080ec:	e030      	b.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80080ee:	4b1d      	ldr	r3, [pc, #116]	@ (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080fa:	d102      	bne.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80080fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80080fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008100:	e02b      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008102:	2300      	movs	r3, #0
 8008104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008106:	e028      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008108:	4b16      	ldr	r3, [pc, #88]	@ (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008110:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008114:	d107      	bne.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008116:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800811a:	4618      	mov	r0, r3
 800811c:	f000 fae4 	bl	80086e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008124:	e019      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008126:	2300      	movs	r3, #0
 8008128:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800812a:	e016      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800812c:	4b0d      	ldr	r3, [pc, #52]	@ (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008134:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008138:	d107      	bne.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800813a:	f107 0318 	add.w	r3, r7, #24
 800813e:	4618      	mov	r0, r3
 8008140:	f000 f82a 	bl	8008198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008148:	e007      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800814a:	2300      	movs	r3, #0
 800814c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800814e:	e004      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008150:	2300      	movs	r3, #0
 8008152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008154:	e001      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008156:	2300      	movs	r3, #0
 8008158:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800815a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800815c:	4618      	mov	r0, r3
 800815e:	3740      	adds	r7, #64	@ 0x40
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	58024400 	.word	0x58024400
 8008168:	017d7840 	.word	0x017d7840

0800816c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008170:	f7fd ffec 	bl	800614c <HAL_RCC_GetHCLKFreq>
 8008174:	4602      	mov	r2, r0
 8008176:	4b06      	ldr	r3, [pc, #24]	@ (8008190 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008178:	6a1b      	ldr	r3, [r3, #32]
 800817a:	091b      	lsrs	r3, r3, #4
 800817c:	f003 0307 	and.w	r3, r3, #7
 8008180:	4904      	ldr	r1, [pc, #16]	@ (8008194 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008182:	5ccb      	ldrb	r3, [r1, r3]
 8008184:	f003 031f 	and.w	r3, r3, #31
 8008188:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800818c:	4618      	mov	r0, r3
 800818e:	bd80      	pop	{r7, pc}
 8008190:	58024400 	.word	0x58024400
 8008194:	0800aabc 	.word	0x0800aabc

08008198 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008198:	b480      	push	{r7}
 800819a:	b089      	sub	sp, #36	@ 0x24
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081a0:	4ba1      	ldr	r3, [pc, #644]	@ (8008428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081a4:	f003 0303 	and.w	r3, r3, #3
 80081a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80081aa:	4b9f      	ldr	r3, [pc, #636]	@ (8008428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ae:	0b1b      	lsrs	r3, r3, #12
 80081b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80081b6:	4b9c      	ldr	r3, [pc, #624]	@ (8008428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ba:	091b      	lsrs	r3, r3, #4
 80081bc:	f003 0301 	and.w	r3, r3, #1
 80081c0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80081c2:	4b99      	ldr	r3, [pc, #612]	@ (8008428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081c6:	08db      	lsrs	r3, r3, #3
 80081c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	fb02 f303 	mul.w	r3, r2, r3
 80081d2:	ee07 3a90 	vmov	s15, r3
 80081d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f000 8111 	beq.w	8008408 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	f000 8083 	beq.w	80082f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	f200 80a1 	bhi.w	8008338 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d003      	beq.n	8008204 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d056      	beq.n	80082b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008202:	e099      	b.n	8008338 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008204:	4b88      	ldr	r3, [pc, #544]	@ (8008428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 0320 	and.w	r3, r3, #32
 800820c:	2b00      	cmp	r3, #0
 800820e:	d02d      	beq.n	800826c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008210:	4b85      	ldr	r3, [pc, #532]	@ (8008428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	08db      	lsrs	r3, r3, #3
 8008216:	f003 0303 	and.w	r3, r3, #3
 800821a:	4a84      	ldr	r2, [pc, #528]	@ (800842c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800821c:	fa22 f303 	lsr.w	r3, r2, r3
 8008220:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	ee07 3a90 	vmov	s15, r3
 8008228:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	ee07 3a90 	vmov	s15, r3
 8008232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800823a:	4b7b      	ldr	r3, [pc, #492]	@ (8008428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800823c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800823e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008242:	ee07 3a90 	vmov	s15, r3
 8008246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800824a:	ed97 6a03 	vldr	s12, [r7, #12]
 800824e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008430 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800825a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800825e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008266:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800826a:	e087      	b.n	800837c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	ee07 3a90 	vmov	s15, r3
 8008272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008276:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008434 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800827a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800827e:	4b6a      	ldr	r3, [pc, #424]	@ (8008428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008286:	ee07 3a90 	vmov	s15, r3
 800828a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800828e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008292:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008430 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800829a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800829e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082ae:	e065      	b.n	800837c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	ee07 3a90 	vmov	s15, r3
 80082b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008438 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80082be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082c2:	4b59      	ldr	r3, [pc, #356]	@ (8008428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ca:	ee07 3a90 	vmov	s15, r3
 80082ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80082d6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008430 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082f2:	e043      	b.n	800837c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	ee07 3a90 	vmov	s15, r3
 80082fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082fe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800843c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008306:	4b48      	ldr	r3, [pc, #288]	@ (8008428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800830a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800830e:	ee07 3a90 	vmov	s15, r3
 8008312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008316:	ed97 6a03 	vldr	s12, [r7, #12]
 800831a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008430 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800831e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800832a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800832e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008332:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008336:	e021      	b.n	800837c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	ee07 3a90 	vmov	s15, r3
 800833e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008342:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008438 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800834a:	4b37      	ldr	r3, [pc, #220]	@ (8008428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800834c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800834e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008352:	ee07 3a90 	vmov	s15, r3
 8008356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800835a:	ed97 6a03 	vldr	s12, [r7, #12]
 800835e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008430 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800836a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800836e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008376:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800837a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800837c:	4b2a      	ldr	r3, [pc, #168]	@ (8008428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800837e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008380:	0a5b      	lsrs	r3, r3, #9
 8008382:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008386:	ee07 3a90 	vmov	s15, r3
 800838a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800838e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008392:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008396:	edd7 6a07 	vldr	s13, [r7, #28]
 800839a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800839e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083a2:	ee17 2a90 	vmov	r2, s15
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80083aa:	4b1f      	ldr	r3, [pc, #124]	@ (8008428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ae:	0c1b      	lsrs	r3, r3, #16
 80083b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083b4:	ee07 3a90 	vmov	s15, r3
 80083b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80083c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083d0:	ee17 2a90 	vmov	r2, s15
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80083d8:	4b13      	ldr	r3, [pc, #76]	@ (8008428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083dc:	0e1b      	lsrs	r3, r3, #24
 80083de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083e2:	ee07 3a90 	vmov	s15, r3
 80083e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80083f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083fe:	ee17 2a90 	vmov	r2, s15
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008406:	e008      	b.n	800841a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	609a      	str	r2, [r3, #8]
}
 800841a:	bf00      	nop
 800841c:	3724      	adds	r7, #36	@ 0x24
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	58024400 	.word	0x58024400
 800842c:	03d09000 	.word	0x03d09000
 8008430:	46000000 	.word	0x46000000
 8008434:	4c742400 	.word	0x4c742400
 8008438:	4a742400 	.word	0x4a742400
 800843c:	4bbebc20 	.word	0x4bbebc20

08008440 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008440:	b480      	push	{r7}
 8008442:	b089      	sub	sp, #36	@ 0x24
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008448:	4ba1      	ldr	r3, [pc, #644]	@ (80086d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800844a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800844c:	f003 0303 	and.w	r3, r3, #3
 8008450:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008452:	4b9f      	ldr	r3, [pc, #636]	@ (80086d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008456:	0d1b      	lsrs	r3, r3, #20
 8008458:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800845c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800845e:	4b9c      	ldr	r3, [pc, #624]	@ (80086d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008462:	0a1b      	lsrs	r3, r3, #8
 8008464:	f003 0301 	and.w	r3, r3, #1
 8008468:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800846a:	4b99      	ldr	r3, [pc, #612]	@ (80086d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800846c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800846e:	08db      	lsrs	r3, r3, #3
 8008470:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008474:	693a      	ldr	r2, [r7, #16]
 8008476:	fb02 f303 	mul.w	r3, r2, r3
 800847a:	ee07 3a90 	vmov	s15, r3
 800847e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008482:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	2b00      	cmp	r3, #0
 800848a:	f000 8111 	beq.w	80086b0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	2b02      	cmp	r3, #2
 8008492:	f000 8083 	beq.w	800859c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	2b02      	cmp	r3, #2
 800849a:	f200 80a1 	bhi.w	80085e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d003      	beq.n	80084ac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d056      	beq.n	8008558 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80084aa:	e099      	b.n	80085e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084ac:	4b88      	ldr	r3, [pc, #544]	@ (80086d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0320 	and.w	r3, r3, #32
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d02d      	beq.n	8008514 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084b8:	4b85      	ldr	r3, [pc, #532]	@ (80086d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	08db      	lsrs	r3, r3, #3
 80084be:	f003 0303 	and.w	r3, r3, #3
 80084c2:	4a84      	ldr	r2, [pc, #528]	@ (80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80084c4:	fa22 f303 	lsr.w	r3, r2, r3
 80084c8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	ee07 3a90 	vmov	s15, r3
 80084d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	ee07 3a90 	vmov	s15, r3
 80084da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084e2:	4b7b      	ldr	r3, [pc, #492]	@ (80086d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ea:	ee07 3a90 	vmov	s15, r3
 80084ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80084f6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80086d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008502:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800850a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800850e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008512:	e087      	b.n	8008624 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	ee07 3a90 	vmov	s15, r3
 800851a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800851e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80086dc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008526:	4b6a      	ldr	r3, [pc, #424]	@ (80086d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800852a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800852e:	ee07 3a90 	vmov	s15, r3
 8008532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008536:	ed97 6a03 	vldr	s12, [r7, #12]
 800853a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80086d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800853e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008546:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800854a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800854e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008552:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008556:	e065      	b.n	8008624 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	ee07 3a90 	vmov	s15, r3
 800855e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008562:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80086e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800856a:	4b59      	ldr	r3, [pc, #356]	@ (80086d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800856c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800856e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008572:	ee07 3a90 	vmov	s15, r3
 8008576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800857a:	ed97 6a03 	vldr	s12, [r7, #12]
 800857e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80086d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800858a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800858e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008596:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800859a:	e043      	b.n	8008624 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	ee07 3a90 	vmov	s15, r3
 80085a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085a6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80085aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ae:	4b48      	ldr	r3, [pc, #288]	@ (80086d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085b6:	ee07 3a90 	vmov	s15, r3
 80085ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085be:	ed97 6a03 	vldr	s12, [r7, #12]
 80085c2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80086d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085de:	e021      	b.n	8008624 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	ee07 3a90 	vmov	s15, r3
 80085e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80086e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80085ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085f2:	4b37      	ldr	r3, [pc, #220]	@ (80086d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085fa:	ee07 3a90 	vmov	s15, r3
 80085fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008602:	ed97 6a03 	vldr	s12, [r7, #12]
 8008606:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80086d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800860a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800860e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008612:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800861a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800861e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008622:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008624:	4b2a      	ldr	r3, [pc, #168]	@ (80086d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008628:	0a5b      	lsrs	r3, r3, #9
 800862a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800862e:	ee07 3a90 	vmov	s15, r3
 8008632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008636:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800863a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800863e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800864a:	ee17 2a90 	vmov	r2, s15
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008652:	4b1f      	ldr	r3, [pc, #124]	@ (80086d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008656:	0c1b      	lsrs	r3, r3, #16
 8008658:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800865c:	ee07 3a90 	vmov	s15, r3
 8008660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008664:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008668:	ee37 7a87 	vadd.f32	s14, s15, s14
 800866c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008670:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008674:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008678:	ee17 2a90 	vmov	r2, s15
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008680:	4b13      	ldr	r3, [pc, #76]	@ (80086d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008684:	0e1b      	lsrs	r3, r3, #24
 8008686:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800868a:	ee07 3a90 	vmov	s15, r3
 800868e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008692:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008696:	ee37 7a87 	vadd.f32	s14, s15, s14
 800869a:	edd7 6a07 	vldr	s13, [r7, #28]
 800869e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086a6:	ee17 2a90 	vmov	r2, s15
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80086ae:	e008      	b.n	80086c2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	609a      	str	r2, [r3, #8]
}
 80086c2:	bf00      	nop
 80086c4:	3724      	adds	r7, #36	@ 0x24
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	58024400 	.word	0x58024400
 80086d4:	03d09000 	.word	0x03d09000
 80086d8:	46000000 	.word	0x46000000
 80086dc:	4c742400 	.word	0x4c742400
 80086e0:	4a742400 	.word	0x4a742400
 80086e4:	4bbebc20 	.word	0x4bbebc20

080086e8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b089      	sub	sp, #36	@ 0x24
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80086f0:	4ba0      	ldr	r3, [pc, #640]	@ (8008974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086f4:	f003 0303 	and.w	r3, r3, #3
 80086f8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80086fa:	4b9e      	ldr	r3, [pc, #632]	@ (8008974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086fe:	091b      	lsrs	r3, r3, #4
 8008700:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008704:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008706:	4b9b      	ldr	r3, [pc, #620]	@ (8008974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008710:	4b98      	ldr	r3, [pc, #608]	@ (8008974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008714:	08db      	lsrs	r3, r3, #3
 8008716:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800871a:	693a      	ldr	r2, [r7, #16]
 800871c:	fb02 f303 	mul.w	r3, r2, r3
 8008720:	ee07 3a90 	vmov	s15, r3
 8008724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008728:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	2b00      	cmp	r3, #0
 8008730:	f000 8111 	beq.w	8008956 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	2b02      	cmp	r3, #2
 8008738:	f000 8083 	beq.w	8008842 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	2b02      	cmp	r3, #2
 8008740:	f200 80a1 	bhi.w	8008886 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d003      	beq.n	8008752 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	2b01      	cmp	r3, #1
 800874e:	d056      	beq.n	80087fe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008750:	e099      	b.n	8008886 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008752:	4b88      	ldr	r3, [pc, #544]	@ (8008974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f003 0320 	and.w	r3, r3, #32
 800875a:	2b00      	cmp	r3, #0
 800875c:	d02d      	beq.n	80087ba <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800875e:	4b85      	ldr	r3, [pc, #532]	@ (8008974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	08db      	lsrs	r3, r3, #3
 8008764:	f003 0303 	and.w	r3, r3, #3
 8008768:	4a83      	ldr	r2, [pc, #524]	@ (8008978 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800876a:	fa22 f303 	lsr.w	r3, r2, r3
 800876e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	ee07 3a90 	vmov	s15, r3
 8008776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	ee07 3a90 	vmov	s15, r3
 8008780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008784:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008788:	4b7a      	ldr	r3, [pc, #488]	@ (8008974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800878a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800878c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008790:	ee07 3a90 	vmov	s15, r3
 8008794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008798:	ed97 6a03 	vldr	s12, [r7, #12]
 800879c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800897c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80087a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087b4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80087b8:	e087      	b.n	80088ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	ee07 3a90 	vmov	s15, r3
 80087c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087c4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008980 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80087c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087cc:	4b69      	ldr	r3, [pc, #420]	@ (8008974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087d4:	ee07 3a90 	vmov	s15, r3
 80087d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80087e0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800897c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80087e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087fc:	e065      	b.n	80088ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	ee07 3a90 	vmov	s15, r3
 8008804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008808:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008984 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800880c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008810:	4b58      	ldr	r3, [pc, #352]	@ (8008974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008818:	ee07 3a90 	vmov	s15, r3
 800881c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008820:	ed97 6a03 	vldr	s12, [r7, #12]
 8008824:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800897c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008828:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800882c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008830:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008834:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800883c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008840:	e043      	b.n	80088ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	ee07 3a90 	vmov	s15, r3
 8008848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800884c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008850:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008854:	4b47      	ldr	r3, [pc, #284]	@ (8008974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800885c:	ee07 3a90 	vmov	s15, r3
 8008860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008864:	ed97 6a03 	vldr	s12, [r7, #12]
 8008868:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800897c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800886c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008870:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008874:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008878:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800887c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008880:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008884:	e021      	b.n	80088ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	ee07 3a90 	vmov	s15, r3
 800888c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008890:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008980 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008894:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008898:	4b36      	ldr	r3, [pc, #216]	@ (8008974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800889a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800889c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088a0:	ee07 3a90 	vmov	s15, r3
 80088a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80088ac:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800897c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088c8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80088ca:	4b2a      	ldr	r3, [pc, #168]	@ (8008974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088ce:	0a5b      	lsrs	r3, r3, #9
 80088d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088d4:	ee07 3a90 	vmov	s15, r3
 80088d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80088e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088f0:	ee17 2a90 	vmov	r2, s15
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80088f8:	4b1e      	ldr	r3, [pc, #120]	@ (8008974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088fc:	0c1b      	lsrs	r3, r3, #16
 80088fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008902:	ee07 3a90 	vmov	s15, r3
 8008906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800890a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800890e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008912:	edd7 6a07 	vldr	s13, [r7, #28]
 8008916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800891a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800891e:	ee17 2a90 	vmov	r2, s15
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008926:	4b13      	ldr	r3, [pc, #76]	@ (8008974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800892a:	0e1b      	lsrs	r3, r3, #24
 800892c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008930:	ee07 3a90 	vmov	s15, r3
 8008934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008938:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800893c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008940:	edd7 6a07 	vldr	s13, [r7, #28]
 8008944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800894c:	ee17 2a90 	vmov	r2, s15
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008954:	e008      	b.n	8008968 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	609a      	str	r2, [r3, #8]
}
 8008968:	bf00      	nop
 800896a:	3724      	adds	r7, #36	@ 0x24
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr
 8008974:	58024400 	.word	0x58024400
 8008978:	03d09000 	.word	0x03d09000
 800897c:	46000000 	.word	0x46000000
 8008980:	4c742400 	.word	0x4c742400
 8008984:	4a742400 	.word	0x4a742400
 8008988:	4bbebc20 	.word	0x4bbebc20

0800898c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008996:	2300      	movs	r3, #0
 8008998:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800899a:	4b53      	ldr	r3, [pc, #332]	@ (8008ae8 <RCCEx_PLL2_Config+0x15c>)
 800899c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800899e:	f003 0303 	and.w	r3, r3, #3
 80089a2:	2b03      	cmp	r3, #3
 80089a4:	d101      	bne.n	80089aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e099      	b.n	8008ade <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80089aa:	4b4f      	ldr	r3, [pc, #316]	@ (8008ae8 <RCCEx_PLL2_Config+0x15c>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a4e      	ldr	r2, [pc, #312]	@ (8008ae8 <RCCEx_PLL2_Config+0x15c>)
 80089b0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80089b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089b6:	f7f8 fa9d 	bl	8000ef4 <HAL_GetTick>
 80089ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80089bc:	e008      	b.n	80089d0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80089be:	f7f8 fa99 	bl	8000ef4 <HAL_GetTick>
 80089c2:	4602      	mov	r2, r0
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d901      	bls.n	80089d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80089cc:	2303      	movs	r3, #3
 80089ce:	e086      	b.n	8008ade <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80089d0:	4b45      	ldr	r3, [pc, #276]	@ (8008ae8 <RCCEx_PLL2_Config+0x15c>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1f0      	bne.n	80089be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80089dc:	4b42      	ldr	r3, [pc, #264]	@ (8008ae8 <RCCEx_PLL2_Config+0x15c>)
 80089de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089e0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	031b      	lsls	r3, r3, #12
 80089ea:	493f      	ldr	r1, [pc, #252]	@ (8008ae8 <RCCEx_PLL2_Config+0x15c>)
 80089ec:	4313      	orrs	r3, r2
 80089ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	3b01      	subs	r3, #1
 80089f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	3b01      	subs	r3, #1
 8008a00:	025b      	lsls	r3, r3, #9
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	431a      	orrs	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	041b      	lsls	r3, r3, #16
 8008a0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008a12:	431a      	orrs	r2, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	061b      	lsls	r3, r3, #24
 8008a1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008a20:	4931      	ldr	r1, [pc, #196]	@ (8008ae8 <RCCEx_PLL2_Config+0x15c>)
 8008a22:	4313      	orrs	r3, r2
 8008a24:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008a26:	4b30      	ldr	r3, [pc, #192]	@ (8008ae8 <RCCEx_PLL2_Config+0x15c>)
 8008a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	695b      	ldr	r3, [r3, #20]
 8008a32:	492d      	ldr	r1, [pc, #180]	@ (8008ae8 <RCCEx_PLL2_Config+0x15c>)
 8008a34:	4313      	orrs	r3, r2
 8008a36:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008a38:	4b2b      	ldr	r3, [pc, #172]	@ (8008ae8 <RCCEx_PLL2_Config+0x15c>)
 8008a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a3c:	f023 0220 	bic.w	r2, r3, #32
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	4928      	ldr	r1, [pc, #160]	@ (8008ae8 <RCCEx_PLL2_Config+0x15c>)
 8008a46:	4313      	orrs	r3, r2
 8008a48:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008a4a:	4b27      	ldr	r3, [pc, #156]	@ (8008ae8 <RCCEx_PLL2_Config+0x15c>)
 8008a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a4e:	4a26      	ldr	r2, [pc, #152]	@ (8008ae8 <RCCEx_PLL2_Config+0x15c>)
 8008a50:	f023 0310 	bic.w	r3, r3, #16
 8008a54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008a56:	4b24      	ldr	r3, [pc, #144]	@ (8008ae8 <RCCEx_PLL2_Config+0x15c>)
 8008a58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a5a:	4b24      	ldr	r3, [pc, #144]	@ (8008aec <RCCEx_PLL2_Config+0x160>)
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	69d2      	ldr	r2, [r2, #28]
 8008a62:	00d2      	lsls	r2, r2, #3
 8008a64:	4920      	ldr	r1, [pc, #128]	@ (8008ae8 <RCCEx_PLL2_Config+0x15c>)
 8008a66:	4313      	orrs	r3, r2
 8008a68:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008a6a:	4b1f      	ldr	r3, [pc, #124]	@ (8008ae8 <RCCEx_PLL2_Config+0x15c>)
 8008a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a6e:	4a1e      	ldr	r2, [pc, #120]	@ (8008ae8 <RCCEx_PLL2_Config+0x15c>)
 8008a70:	f043 0310 	orr.w	r3, r3, #16
 8008a74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d106      	bne.n	8008a8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8008ae8 <RCCEx_PLL2_Config+0x15c>)
 8008a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a80:	4a19      	ldr	r2, [pc, #100]	@ (8008ae8 <RCCEx_PLL2_Config+0x15c>)
 8008a82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008a88:	e00f      	b.n	8008aaa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d106      	bne.n	8008a9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008a90:	4b15      	ldr	r3, [pc, #84]	@ (8008ae8 <RCCEx_PLL2_Config+0x15c>)
 8008a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a94:	4a14      	ldr	r2, [pc, #80]	@ (8008ae8 <RCCEx_PLL2_Config+0x15c>)
 8008a96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008a9c:	e005      	b.n	8008aaa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008a9e:	4b12      	ldr	r3, [pc, #72]	@ (8008ae8 <RCCEx_PLL2_Config+0x15c>)
 8008aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aa2:	4a11      	ldr	r2, [pc, #68]	@ (8008ae8 <RCCEx_PLL2_Config+0x15c>)
 8008aa4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008aa8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8008ae8 <RCCEx_PLL2_Config+0x15c>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a0e      	ldr	r2, [pc, #56]	@ (8008ae8 <RCCEx_PLL2_Config+0x15c>)
 8008ab0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008ab4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ab6:	f7f8 fa1d 	bl	8000ef4 <HAL_GetTick>
 8008aba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008abc:	e008      	b.n	8008ad0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008abe:	f7f8 fa19 	bl	8000ef4 <HAL_GetTick>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	1ad3      	subs	r3, r2, r3
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d901      	bls.n	8008ad0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008acc:	2303      	movs	r3, #3
 8008ace:	e006      	b.n	8008ade <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ad0:	4b05      	ldr	r3, [pc, #20]	@ (8008ae8 <RCCEx_PLL2_Config+0x15c>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d0f0      	beq.n	8008abe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	58024400 	.word	0x58024400
 8008aec:	ffff0007 	.word	0xffff0007

08008af0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008afa:	2300      	movs	r3, #0
 8008afc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008afe:	4b53      	ldr	r3, [pc, #332]	@ (8008c4c <RCCEx_PLL3_Config+0x15c>)
 8008b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b02:	f003 0303 	and.w	r3, r3, #3
 8008b06:	2b03      	cmp	r3, #3
 8008b08:	d101      	bne.n	8008b0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e099      	b.n	8008c42 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008b0e:	4b4f      	ldr	r3, [pc, #316]	@ (8008c4c <RCCEx_PLL3_Config+0x15c>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a4e      	ldr	r2, [pc, #312]	@ (8008c4c <RCCEx_PLL3_Config+0x15c>)
 8008b14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b1a:	f7f8 f9eb 	bl	8000ef4 <HAL_GetTick>
 8008b1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b20:	e008      	b.n	8008b34 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008b22:	f7f8 f9e7 	bl	8000ef4 <HAL_GetTick>
 8008b26:	4602      	mov	r2, r0
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	1ad3      	subs	r3, r2, r3
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	d901      	bls.n	8008b34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008b30:	2303      	movs	r3, #3
 8008b32:	e086      	b.n	8008c42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b34:	4b45      	ldr	r3, [pc, #276]	@ (8008c4c <RCCEx_PLL3_Config+0x15c>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d1f0      	bne.n	8008b22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008b40:	4b42      	ldr	r3, [pc, #264]	@ (8008c4c <RCCEx_PLL3_Config+0x15c>)
 8008b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b44:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	051b      	lsls	r3, r3, #20
 8008b4e:	493f      	ldr	r1, [pc, #252]	@ (8008c4c <RCCEx_PLL3_Config+0x15c>)
 8008b50:	4313      	orrs	r3, r2
 8008b52:	628b      	str	r3, [r1, #40]	@ 0x28
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	3b01      	subs	r3, #1
 8008b64:	025b      	lsls	r3, r3, #9
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	431a      	orrs	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	041b      	lsls	r3, r3, #16
 8008b72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008b76:	431a      	orrs	r2, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	061b      	lsls	r3, r3, #24
 8008b80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008b84:	4931      	ldr	r1, [pc, #196]	@ (8008c4c <RCCEx_PLL3_Config+0x15c>)
 8008b86:	4313      	orrs	r3, r2
 8008b88:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008b8a:	4b30      	ldr	r3, [pc, #192]	@ (8008c4c <RCCEx_PLL3_Config+0x15c>)
 8008b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	695b      	ldr	r3, [r3, #20]
 8008b96:	492d      	ldr	r1, [pc, #180]	@ (8008c4c <RCCEx_PLL3_Config+0x15c>)
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8008c4c <RCCEx_PLL3_Config+0x15c>)
 8008b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	699b      	ldr	r3, [r3, #24]
 8008ba8:	4928      	ldr	r1, [pc, #160]	@ (8008c4c <RCCEx_PLL3_Config+0x15c>)
 8008baa:	4313      	orrs	r3, r2
 8008bac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008bae:	4b27      	ldr	r3, [pc, #156]	@ (8008c4c <RCCEx_PLL3_Config+0x15c>)
 8008bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb2:	4a26      	ldr	r2, [pc, #152]	@ (8008c4c <RCCEx_PLL3_Config+0x15c>)
 8008bb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008bb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008bba:	4b24      	ldr	r3, [pc, #144]	@ (8008c4c <RCCEx_PLL3_Config+0x15c>)
 8008bbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bbe:	4b24      	ldr	r3, [pc, #144]	@ (8008c50 <RCCEx_PLL3_Config+0x160>)
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	69d2      	ldr	r2, [r2, #28]
 8008bc6:	00d2      	lsls	r2, r2, #3
 8008bc8:	4920      	ldr	r1, [pc, #128]	@ (8008c4c <RCCEx_PLL3_Config+0x15c>)
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008bce:	4b1f      	ldr	r3, [pc, #124]	@ (8008c4c <RCCEx_PLL3_Config+0x15c>)
 8008bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd2:	4a1e      	ldr	r2, [pc, #120]	@ (8008c4c <RCCEx_PLL3_Config+0x15c>)
 8008bd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008bd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d106      	bne.n	8008bee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008be0:	4b1a      	ldr	r3, [pc, #104]	@ (8008c4c <RCCEx_PLL3_Config+0x15c>)
 8008be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008be4:	4a19      	ldr	r2, [pc, #100]	@ (8008c4c <RCCEx_PLL3_Config+0x15c>)
 8008be6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008bea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008bec:	e00f      	b.n	8008c0e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d106      	bne.n	8008c02 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008bf4:	4b15      	ldr	r3, [pc, #84]	@ (8008c4c <RCCEx_PLL3_Config+0x15c>)
 8008bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf8:	4a14      	ldr	r2, [pc, #80]	@ (8008c4c <RCCEx_PLL3_Config+0x15c>)
 8008bfa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008bfe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008c00:	e005      	b.n	8008c0e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008c02:	4b12      	ldr	r3, [pc, #72]	@ (8008c4c <RCCEx_PLL3_Config+0x15c>)
 8008c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c06:	4a11      	ldr	r2, [pc, #68]	@ (8008c4c <RCCEx_PLL3_Config+0x15c>)
 8008c08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008c0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8008c4c <RCCEx_PLL3_Config+0x15c>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a0e      	ldr	r2, [pc, #56]	@ (8008c4c <RCCEx_PLL3_Config+0x15c>)
 8008c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c1a:	f7f8 f96b 	bl	8000ef4 <HAL_GetTick>
 8008c1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c20:	e008      	b.n	8008c34 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008c22:	f7f8 f967 	bl	8000ef4 <HAL_GetTick>
 8008c26:	4602      	mov	r2, r0
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	1ad3      	subs	r3, r2, r3
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	d901      	bls.n	8008c34 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008c30:	2303      	movs	r3, #3
 8008c32:	e006      	b.n	8008c42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c34:	4b05      	ldr	r3, [pc, #20]	@ (8008c4c <RCCEx_PLL3_Config+0x15c>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d0f0      	beq.n	8008c22 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	58024400 	.word	0x58024400
 8008c50:	ffff0007 	.word	0xffff0007

08008c54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d101      	bne.n	8008c66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e049      	b.n	8008cfa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d106      	bne.n	8008c80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f7f7 ffac 	bl	8000bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2202      	movs	r2, #2
 8008c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	3304      	adds	r3, #4
 8008c90:	4619      	mov	r1, r3
 8008c92:	4610      	mov	r0, r2
 8008c94:	f000 fb46 	bl	8009324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
	...

08008d04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d001      	beq.n	8008d1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e04c      	b.n	8008db6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a26      	ldr	r2, [pc, #152]	@ (8008dc4 <HAL_TIM_Base_Start+0xc0>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d022      	beq.n	8008d74 <HAL_TIM_Base_Start+0x70>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d36:	d01d      	beq.n	8008d74 <HAL_TIM_Base_Start+0x70>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a22      	ldr	r2, [pc, #136]	@ (8008dc8 <HAL_TIM_Base_Start+0xc4>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d018      	beq.n	8008d74 <HAL_TIM_Base_Start+0x70>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a21      	ldr	r2, [pc, #132]	@ (8008dcc <HAL_TIM_Base_Start+0xc8>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d013      	beq.n	8008d74 <HAL_TIM_Base_Start+0x70>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a1f      	ldr	r2, [pc, #124]	@ (8008dd0 <HAL_TIM_Base_Start+0xcc>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d00e      	beq.n	8008d74 <HAL_TIM_Base_Start+0x70>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a1e      	ldr	r2, [pc, #120]	@ (8008dd4 <HAL_TIM_Base_Start+0xd0>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d009      	beq.n	8008d74 <HAL_TIM_Base_Start+0x70>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a1c      	ldr	r2, [pc, #112]	@ (8008dd8 <HAL_TIM_Base_Start+0xd4>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d004      	beq.n	8008d74 <HAL_TIM_Base_Start+0x70>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a1b      	ldr	r2, [pc, #108]	@ (8008ddc <HAL_TIM_Base_Start+0xd8>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d115      	bne.n	8008da0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	689a      	ldr	r2, [r3, #8]
 8008d7a:	4b19      	ldr	r3, [pc, #100]	@ (8008de0 <HAL_TIM_Base_Start+0xdc>)
 8008d7c:	4013      	ands	r3, r2
 8008d7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2b06      	cmp	r3, #6
 8008d84:	d015      	beq.n	8008db2 <HAL_TIM_Base_Start+0xae>
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d8c:	d011      	beq.n	8008db2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f042 0201 	orr.w	r2, r2, #1
 8008d9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d9e:	e008      	b.n	8008db2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f042 0201 	orr.w	r2, r2, #1
 8008dae:	601a      	str	r2, [r3, #0]
 8008db0:	e000      	b.n	8008db4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008db2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3714      	adds	r7, #20
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	40010000 	.word	0x40010000
 8008dc8:	40000400 	.word	0x40000400
 8008dcc:	40000800 	.word	0x40000800
 8008dd0:	40000c00 	.word	0x40000c00
 8008dd4:	40010400 	.word	0x40010400
 8008dd8:	40001800 	.word	0x40001800
 8008ddc:	40014000 	.word	0x40014000
 8008de0:	00010007 	.word	0x00010007

08008de4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b085      	sub	sp, #20
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d001      	beq.n	8008dfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e054      	b.n	8008ea6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2202      	movs	r2, #2
 8008e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68da      	ldr	r2, [r3, #12]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f042 0201 	orr.w	r2, r2, #1
 8008e12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a26      	ldr	r2, [pc, #152]	@ (8008eb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d022      	beq.n	8008e64 <HAL_TIM_Base_Start_IT+0x80>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e26:	d01d      	beq.n	8008e64 <HAL_TIM_Base_Start_IT+0x80>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a22      	ldr	r2, [pc, #136]	@ (8008eb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d018      	beq.n	8008e64 <HAL_TIM_Base_Start_IT+0x80>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a21      	ldr	r2, [pc, #132]	@ (8008ebc <HAL_TIM_Base_Start_IT+0xd8>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d013      	beq.n	8008e64 <HAL_TIM_Base_Start_IT+0x80>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a1f      	ldr	r2, [pc, #124]	@ (8008ec0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d00e      	beq.n	8008e64 <HAL_TIM_Base_Start_IT+0x80>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a1e      	ldr	r2, [pc, #120]	@ (8008ec4 <HAL_TIM_Base_Start_IT+0xe0>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d009      	beq.n	8008e64 <HAL_TIM_Base_Start_IT+0x80>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a1c      	ldr	r2, [pc, #112]	@ (8008ec8 <HAL_TIM_Base_Start_IT+0xe4>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d004      	beq.n	8008e64 <HAL_TIM_Base_Start_IT+0x80>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a1b      	ldr	r2, [pc, #108]	@ (8008ecc <HAL_TIM_Base_Start_IT+0xe8>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d115      	bne.n	8008e90 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	689a      	ldr	r2, [r3, #8]
 8008e6a:	4b19      	ldr	r3, [pc, #100]	@ (8008ed0 <HAL_TIM_Base_Start_IT+0xec>)
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2b06      	cmp	r3, #6
 8008e74:	d015      	beq.n	8008ea2 <HAL_TIM_Base_Start_IT+0xbe>
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e7c:	d011      	beq.n	8008ea2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f042 0201 	orr.w	r2, r2, #1
 8008e8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e8e:	e008      	b.n	8008ea2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f042 0201 	orr.w	r2, r2, #1
 8008e9e:	601a      	str	r2, [r3, #0]
 8008ea0:	e000      	b.n	8008ea4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ea2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3714      	adds	r7, #20
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop
 8008eb4:	40010000 	.word	0x40010000
 8008eb8:	40000400 	.word	0x40000400
 8008ebc:	40000800 	.word	0x40000800
 8008ec0:	40000c00 	.word	0x40000c00
 8008ec4:	40010400 	.word	0x40010400
 8008ec8:	40001800 	.word	0x40001800
 8008ecc:	40014000 	.word	0x40014000
 8008ed0:	00010007 	.word	0x00010007

08008ed4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	68db      	ldr	r3, [r3, #12]
 8008ee2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	f003 0302 	and.w	r3, r3, #2
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d020      	beq.n	8008f38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f003 0302 	and.w	r3, r3, #2
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d01b      	beq.n	8008f38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f06f 0202 	mvn.w	r2, #2
 8008f08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	699b      	ldr	r3, [r3, #24]
 8008f16:	f003 0303 	and.w	r3, r3, #3
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d003      	beq.n	8008f26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f9e2 	bl	80092e8 <HAL_TIM_IC_CaptureCallback>
 8008f24:	e005      	b.n	8008f32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f9d4 	bl	80092d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 f9e5 	bl	80092fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	f003 0304 	and.w	r3, r3, #4
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d020      	beq.n	8008f84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f003 0304 	and.w	r3, r3, #4
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d01b      	beq.n	8008f84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f06f 0204 	mvn.w	r2, #4
 8008f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2202      	movs	r2, #2
 8008f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	699b      	ldr	r3, [r3, #24]
 8008f62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d003      	beq.n	8008f72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f9bc 	bl	80092e8 <HAL_TIM_IC_CaptureCallback>
 8008f70:	e005      	b.n	8008f7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 f9ae 	bl	80092d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f9bf 	bl	80092fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	f003 0308 	and.w	r3, r3, #8
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d020      	beq.n	8008fd0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f003 0308 	and.w	r3, r3, #8
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d01b      	beq.n	8008fd0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f06f 0208 	mvn.w	r2, #8
 8008fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2204      	movs	r2, #4
 8008fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	69db      	ldr	r3, [r3, #28]
 8008fae:	f003 0303 	and.w	r3, r3, #3
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d003      	beq.n	8008fbe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 f996 	bl	80092e8 <HAL_TIM_IC_CaptureCallback>
 8008fbc:	e005      	b.n	8008fca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f988 	bl	80092d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f999 	bl	80092fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	f003 0310 	and.w	r3, r3, #16
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d020      	beq.n	800901c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f003 0310 	and.w	r3, r3, #16
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d01b      	beq.n	800901c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f06f 0210 	mvn.w	r2, #16
 8008fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2208      	movs	r2, #8
 8008ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	69db      	ldr	r3, [r3, #28]
 8008ffa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d003      	beq.n	800900a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f970 	bl	80092e8 <HAL_TIM_IC_CaptureCallback>
 8009008:	e005      	b.n	8009016 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f962 	bl	80092d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 f973 	bl	80092fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	f003 0301 	and.w	r3, r3, #1
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00c      	beq.n	8009040 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f003 0301 	and.w	r3, r3, #1
 800902c:	2b00      	cmp	r3, #0
 800902e:	d007      	beq.n	8009040 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f06f 0201 	mvn.w	r2, #1
 8009038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f7f7 fa82 	bl	8000544 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009046:	2b00      	cmp	r3, #0
 8009048:	d104      	bne.n	8009054 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00c      	beq.n	800906e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800905a:	2b00      	cmp	r3, #0
 800905c:	d007      	beq.n	800906e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fb31 	bl	80096d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00c      	beq.n	8009092 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800907e:	2b00      	cmp	r3, #0
 8009080:	d007      	beq.n	8009092 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800908a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fb29 	bl	80096e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00c      	beq.n	80090b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d007      	beq.n	80090b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80090ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f92d 	bl	8009310 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	f003 0320 	and.w	r3, r3, #32
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00c      	beq.n	80090da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f003 0320 	and.w	r3, r3, #32
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d007      	beq.n	80090da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f06f 0220 	mvn.w	r2, #32
 80090d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 faf1 	bl	80096bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80090da:	bf00      	nop
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
	...

080090e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80090ee:	2300      	movs	r3, #0
 80090f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d101      	bne.n	8009100 <HAL_TIM_ConfigClockSource+0x1c>
 80090fc:	2302      	movs	r3, #2
 80090fe:	e0dc      	b.n	80092ba <HAL_TIM_ConfigClockSource+0x1d6>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2202      	movs	r2, #2
 800910c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009118:	68ba      	ldr	r2, [r7, #8]
 800911a:	4b6a      	ldr	r3, [pc, #424]	@ (80092c4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800911c:	4013      	ands	r3, r2
 800911e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009126:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	68ba      	ldr	r2, [r7, #8]
 800912e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a64      	ldr	r2, [pc, #400]	@ (80092c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009136:	4293      	cmp	r3, r2
 8009138:	f000 80a9 	beq.w	800928e <HAL_TIM_ConfigClockSource+0x1aa>
 800913c:	4a62      	ldr	r2, [pc, #392]	@ (80092c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800913e:	4293      	cmp	r3, r2
 8009140:	f200 80ae 	bhi.w	80092a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009144:	4a61      	ldr	r2, [pc, #388]	@ (80092cc <HAL_TIM_ConfigClockSource+0x1e8>)
 8009146:	4293      	cmp	r3, r2
 8009148:	f000 80a1 	beq.w	800928e <HAL_TIM_ConfigClockSource+0x1aa>
 800914c:	4a5f      	ldr	r2, [pc, #380]	@ (80092cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800914e:	4293      	cmp	r3, r2
 8009150:	f200 80a6 	bhi.w	80092a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009154:	4a5e      	ldr	r2, [pc, #376]	@ (80092d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009156:	4293      	cmp	r3, r2
 8009158:	f000 8099 	beq.w	800928e <HAL_TIM_ConfigClockSource+0x1aa>
 800915c:	4a5c      	ldr	r2, [pc, #368]	@ (80092d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800915e:	4293      	cmp	r3, r2
 8009160:	f200 809e 	bhi.w	80092a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009164:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009168:	f000 8091 	beq.w	800928e <HAL_TIM_ConfigClockSource+0x1aa>
 800916c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009170:	f200 8096 	bhi.w	80092a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009174:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009178:	f000 8089 	beq.w	800928e <HAL_TIM_ConfigClockSource+0x1aa>
 800917c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009180:	f200 808e 	bhi.w	80092a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009184:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009188:	d03e      	beq.n	8009208 <HAL_TIM_ConfigClockSource+0x124>
 800918a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800918e:	f200 8087 	bhi.w	80092a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009192:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009196:	f000 8086 	beq.w	80092a6 <HAL_TIM_ConfigClockSource+0x1c2>
 800919a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800919e:	d87f      	bhi.n	80092a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80091a0:	2b70      	cmp	r3, #112	@ 0x70
 80091a2:	d01a      	beq.n	80091da <HAL_TIM_ConfigClockSource+0xf6>
 80091a4:	2b70      	cmp	r3, #112	@ 0x70
 80091a6:	d87b      	bhi.n	80092a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80091a8:	2b60      	cmp	r3, #96	@ 0x60
 80091aa:	d050      	beq.n	800924e <HAL_TIM_ConfigClockSource+0x16a>
 80091ac:	2b60      	cmp	r3, #96	@ 0x60
 80091ae:	d877      	bhi.n	80092a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80091b0:	2b50      	cmp	r3, #80	@ 0x50
 80091b2:	d03c      	beq.n	800922e <HAL_TIM_ConfigClockSource+0x14a>
 80091b4:	2b50      	cmp	r3, #80	@ 0x50
 80091b6:	d873      	bhi.n	80092a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80091b8:	2b40      	cmp	r3, #64	@ 0x40
 80091ba:	d058      	beq.n	800926e <HAL_TIM_ConfigClockSource+0x18a>
 80091bc:	2b40      	cmp	r3, #64	@ 0x40
 80091be:	d86f      	bhi.n	80092a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80091c0:	2b30      	cmp	r3, #48	@ 0x30
 80091c2:	d064      	beq.n	800928e <HAL_TIM_ConfigClockSource+0x1aa>
 80091c4:	2b30      	cmp	r3, #48	@ 0x30
 80091c6:	d86b      	bhi.n	80092a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80091c8:	2b20      	cmp	r3, #32
 80091ca:	d060      	beq.n	800928e <HAL_TIM_ConfigClockSource+0x1aa>
 80091cc:	2b20      	cmp	r3, #32
 80091ce:	d867      	bhi.n	80092a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d05c      	beq.n	800928e <HAL_TIM_ConfigClockSource+0x1aa>
 80091d4:	2b10      	cmp	r3, #16
 80091d6:	d05a      	beq.n	800928e <HAL_TIM_ConfigClockSource+0x1aa>
 80091d8:	e062      	b.n	80092a0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80091ea:	f000 f9b9 	bl	8009560 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80091fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68ba      	ldr	r2, [r7, #8]
 8009204:	609a      	str	r2, [r3, #8]
      break;
 8009206:	e04f      	b.n	80092a8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009218:	f000 f9a2 	bl	8009560 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	689a      	ldr	r2, [r3, #8]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800922a:	609a      	str	r2, [r3, #8]
      break;
 800922c:	e03c      	b.n	80092a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800923a:	461a      	mov	r2, r3
 800923c:	f000 f912 	bl	8009464 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2150      	movs	r1, #80	@ 0x50
 8009246:	4618      	mov	r0, r3
 8009248:	f000 f96c 	bl	8009524 <TIM_ITRx_SetConfig>
      break;
 800924c:	e02c      	b.n	80092a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800925a:	461a      	mov	r2, r3
 800925c:	f000 f931 	bl	80094c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2160      	movs	r1, #96	@ 0x60
 8009266:	4618      	mov	r0, r3
 8009268:	f000 f95c 	bl	8009524 <TIM_ITRx_SetConfig>
      break;
 800926c:	e01c      	b.n	80092a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800927a:	461a      	mov	r2, r3
 800927c:	f000 f8f2 	bl	8009464 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2140      	movs	r1, #64	@ 0x40
 8009286:	4618      	mov	r0, r3
 8009288:	f000 f94c 	bl	8009524 <TIM_ITRx_SetConfig>
      break;
 800928c:	e00c      	b.n	80092a8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4619      	mov	r1, r3
 8009298:	4610      	mov	r0, r2
 800929a:	f000 f943 	bl	8009524 <TIM_ITRx_SetConfig>
      break;
 800929e:	e003      	b.n	80092a8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	73fb      	strb	r3, [r7, #15]
      break;
 80092a4:	e000      	b.n	80092a8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80092a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80092b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	ffceff88 	.word	0xffceff88
 80092c8:	00100040 	.word	0x00100040
 80092cc:	00100030 	.word	0x00100030
 80092d0:	00100020 	.word	0x00100020

080092d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092dc:	bf00      	nop
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80092f0:	bf00      	nop
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009304:	bf00      	nop
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009318:	bf00      	nop
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009324:	b480      	push	{r7}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a43      	ldr	r2, [pc, #268]	@ (8009444 <TIM_Base_SetConfig+0x120>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d013      	beq.n	8009364 <TIM_Base_SetConfig+0x40>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009342:	d00f      	beq.n	8009364 <TIM_Base_SetConfig+0x40>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a40      	ldr	r2, [pc, #256]	@ (8009448 <TIM_Base_SetConfig+0x124>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d00b      	beq.n	8009364 <TIM_Base_SetConfig+0x40>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4a3f      	ldr	r2, [pc, #252]	@ (800944c <TIM_Base_SetConfig+0x128>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d007      	beq.n	8009364 <TIM_Base_SetConfig+0x40>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	4a3e      	ldr	r2, [pc, #248]	@ (8009450 <TIM_Base_SetConfig+0x12c>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d003      	beq.n	8009364 <TIM_Base_SetConfig+0x40>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a3d      	ldr	r2, [pc, #244]	@ (8009454 <TIM_Base_SetConfig+0x130>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d108      	bne.n	8009376 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800936a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	4313      	orrs	r3, r2
 8009374:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a32      	ldr	r2, [pc, #200]	@ (8009444 <TIM_Base_SetConfig+0x120>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d01f      	beq.n	80093be <TIM_Base_SetConfig+0x9a>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009384:	d01b      	beq.n	80093be <TIM_Base_SetConfig+0x9a>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a2f      	ldr	r2, [pc, #188]	@ (8009448 <TIM_Base_SetConfig+0x124>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d017      	beq.n	80093be <TIM_Base_SetConfig+0x9a>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a2e      	ldr	r2, [pc, #184]	@ (800944c <TIM_Base_SetConfig+0x128>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d013      	beq.n	80093be <TIM_Base_SetConfig+0x9a>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a2d      	ldr	r2, [pc, #180]	@ (8009450 <TIM_Base_SetConfig+0x12c>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d00f      	beq.n	80093be <TIM_Base_SetConfig+0x9a>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a2c      	ldr	r2, [pc, #176]	@ (8009454 <TIM_Base_SetConfig+0x130>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d00b      	beq.n	80093be <TIM_Base_SetConfig+0x9a>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a2b      	ldr	r2, [pc, #172]	@ (8009458 <TIM_Base_SetConfig+0x134>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d007      	beq.n	80093be <TIM_Base_SetConfig+0x9a>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a2a      	ldr	r2, [pc, #168]	@ (800945c <TIM_Base_SetConfig+0x138>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d003      	beq.n	80093be <TIM_Base_SetConfig+0x9a>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a29      	ldr	r2, [pc, #164]	@ (8009460 <TIM_Base_SetConfig+0x13c>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d108      	bne.n	80093d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	695b      	ldr	r3, [r3, #20]
 80093da:	4313      	orrs	r3, r2
 80093dc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	689a      	ldr	r2, [r3, #8]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a14      	ldr	r2, [pc, #80]	@ (8009444 <TIM_Base_SetConfig+0x120>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d00f      	beq.n	8009416 <TIM_Base_SetConfig+0xf2>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a16      	ldr	r2, [pc, #88]	@ (8009454 <TIM_Base_SetConfig+0x130>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d00b      	beq.n	8009416 <TIM_Base_SetConfig+0xf2>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4a15      	ldr	r2, [pc, #84]	@ (8009458 <TIM_Base_SetConfig+0x134>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d007      	beq.n	8009416 <TIM_Base_SetConfig+0xf2>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a14      	ldr	r2, [pc, #80]	@ (800945c <TIM_Base_SetConfig+0x138>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d003      	beq.n	8009416 <TIM_Base_SetConfig+0xf2>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4a13      	ldr	r2, [pc, #76]	@ (8009460 <TIM_Base_SetConfig+0x13c>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d103      	bne.n	800941e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	691a      	ldr	r2, [r3, #16]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f043 0204 	orr.w	r2, r3, #4
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2201      	movs	r2, #1
 800942e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	601a      	str	r2, [r3, #0]
}
 8009436:	bf00      	nop
 8009438:	3714      	adds	r7, #20
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	40010000 	.word	0x40010000
 8009448:	40000400 	.word	0x40000400
 800944c:	40000800 	.word	0x40000800
 8009450:	40000c00 	.word	0x40000c00
 8009454:	40010400 	.word	0x40010400
 8009458:	40014000 	.word	0x40014000
 800945c:	40014400 	.word	0x40014400
 8009460:	40014800 	.word	0x40014800

08009464 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009464:	b480      	push	{r7}
 8009466:	b087      	sub	sp, #28
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6a1b      	ldr	r3, [r3, #32]
 8009474:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6a1b      	ldr	r3, [r3, #32]
 800947a:	f023 0201 	bic.w	r2, r3, #1
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	699b      	ldr	r3, [r3, #24]
 8009486:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800948e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	011b      	lsls	r3, r3, #4
 8009494:	693a      	ldr	r2, [r7, #16]
 8009496:	4313      	orrs	r3, r2
 8009498:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	f023 030a 	bic.w	r3, r3, #10
 80094a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80094a2:	697a      	ldr	r2, [r7, #20]
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	693a      	ldr	r2, [r7, #16]
 80094ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	697a      	ldr	r2, [r7, #20]
 80094b4:	621a      	str	r2, [r3, #32]
}
 80094b6:	bf00      	nop
 80094b8:	371c      	adds	r7, #28
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr

080094c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094c2:	b480      	push	{r7}
 80094c4:	b087      	sub	sp, #28
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	60f8      	str	r0, [r7, #12]
 80094ca:	60b9      	str	r1, [r7, #8]
 80094cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6a1b      	ldr	r3, [r3, #32]
 80094d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6a1b      	ldr	r3, [r3, #32]
 80094d8:	f023 0210 	bic.w	r2, r3, #16
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80094ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	031b      	lsls	r3, r3, #12
 80094f2:	693a      	ldr	r2, [r7, #16]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80094fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	011b      	lsls	r3, r3, #4
 8009504:	697a      	ldr	r2, [r7, #20]
 8009506:	4313      	orrs	r3, r2
 8009508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	697a      	ldr	r2, [r7, #20]
 8009514:	621a      	str	r2, [r3, #32]
}
 8009516:	bf00      	nop
 8009518:	371c      	adds	r7, #28
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr
	...

08009524 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009524:	b480      	push	{r7}
 8009526:	b085      	sub	sp, #20
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	4b09      	ldr	r3, [pc, #36]	@ (800955c <TIM_ITRx_SetConfig+0x38>)
 8009538:	4013      	ands	r3, r2
 800953a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800953c:	683a      	ldr	r2, [r7, #0]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	4313      	orrs	r3, r2
 8009542:	f043 0307 	orr.w	r3, r3, #7
 8009546:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	68fa      	ldr	r2, [r7, #12]
 800954c:	609a      	str	r2, [r3, #8]
}
 800954e:	bf00      	nop
 8009550:	3714      	adds	r7, #20
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	ffcfff8f 	.word	0xffcfff8f

08009560 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009560:	b480      	push	{r7}
 8009562:	b087      	sub	sp, #28
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	607a      	str	r2, [r7, #4]
 800956c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800957a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	021a      	lsls	r2, r3, #8
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	431a      	orrs	r2, r3
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	4313      	orrs	r3, r2
 8009588:	697a      	ldr	r2, [r7, #20]
 800958a:	4313      	orrs	r3, r2
 800958c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	697a      	ldr	r2, [r7, #20]
 8009592:	609a      	str	r2, [r3, #8]
}
 8009594:	bf00      	nop
 8009596:	371c      	adds	r7, #28
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b085      	sub	sp, #20
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d101      	bne.n	80095b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095b4:	2302      	movs	r3, #2
 80095b6:	e06d      	b.n	8009694 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2202      	movs	r2, #2
 80095c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a30      	ldr	r2, [pc, #192]	@ (80096a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d004      	beq.n	80095ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a2f      	ldr	r2, [pc, #188]	@ (80096a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d108      	bne.n	80095fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80095f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	68fa      	ldr	r2, [r7, #12]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009604:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	4313      	orrs	r3, r2
 800960e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a20      	ldr	r2, [pc, #128]	@ (80096a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d022      	beq.n	8009668 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800962a:	d01d      	beq.n	8009668 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a1d      	ldr	r2, [pc, #116]	@ (80096a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d018      	beq.n	8009668 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a1c      	ldr	r2, [pc, #112]	@ (80096ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d013      	beq.n	8009668 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a1a      	ldr	r2, [pc, #104]	@ (80096b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d00e      	beq.n	8009668 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a15      	ldr	r2, [pc, #84]	@ (80096a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d009      	beq.n	8009668 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a16      	ldr	r2, [pc, #88]	@ (80096b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d004      	beq.n	8009668 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a15      	ldr	r2, [pc, #84]	@ (80096b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d10c      	bne.n	8009682 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800966e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	68ba      	ldr	r2, [r7, #8]
 8009676:	4313      	orrs	r3, r2
 8009678:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	68ba      	ldr	r2, [r7, #8]
 8009680:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2201      	movs	r2, #1
 8009686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3714      	adds	r7, #20
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr
 80096a0:	40010000 	.word	0x40010000
 80096a4:	40010400 	.word	0x40010400
 80096a8:	40000400 	.word	0x40000400
 80096ac:	40000800 	.word	0x40000800
 80096b0:	40000c00 	.word	0x40000c00
 80096b4:	40001800 	.word	0x40001800
 80096b8:	40014000 	.word	0x40014000

080096bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096c4:	bf00      	nop
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096d8:	bf00      	nop
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80096ec:	bf00      	nop
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <findslot>:
 80096f8:	4b0a      	ldr	r3, [pc, #40]	@ (8009724 <findslot+0x2c>)
 80096fa:	b510      	push	{r4, lr}
 80096fc:	4604      	mov	r4, r0
 80096fe:	6818      	ldr	r0, [r3, #0]
 8009700:	b118      	cbz	r0, 800970a <findslot+0x12>
 8009702:	6a03      	ldr	r3, [r0, #32]
 8009704:	b90b      	cbnz	r3, 800970a <findslot+0x12>
 8009706:	f000 fb19 	bl	8009d3c <__sinit>
 800970a:	2c13      	cmp	r4, #19
 800970c:	d807      	bhi.n	800971e <findslot+0x26>
 800970e:	4806      	ldr	r0, [pc, #24]	@ (8009728 <findslot+0x30>)
 8009710:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8009714:	3201      	adds	r2, #1
 8009716:	d002      	beq.n	800971e <findslot+0x26>
 8009718:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800971c:	bd10      	pop	{r4, pc}
 800971e:	2000      	movs	r0, #0
 8009720:	e7fc      	b.n	800971c <findslot+0x24>
 8009722:	bf00      	nop
 8009724:	24000024 	.word	0x24000024
 8009728:	24000224 	.word	0x24000224

0800972c <error>:
 800972c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800972e:	4604      	mov	r4, r0
 8009730:	f000 fbde 	bl	8009ef0 <__errno>
 8009734:	2613      	movs	r6, #19
 8009736:	4605      	mov	r5, r0
 8009738:	2700      	movs	r7, #0
 800973a:	4630      	mov	r0, r6
 800973c:	4639      	mov	r1, r7
 800973e:	beab      	bkpt	0x00ab
 8009740:	4606      	mov	r6, r0
 8009742:	602e      	str	r6, [r5, #0]
 8009744:	4620      	mov	r0, r4
 8009746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009748 <checkerror>:
 8009748:	1c43      	adds	r3, r0, #1
 800974a:	d101      	bne.n	8009750 <checkerror+0x8>
 800974c:	f7ff bfee 	b.w	800972c <error>
 8009750:	4770      	bx	lr

08009752 <_swiread>:
 8009752:	b530      	push	{r4, r5, lr}
 8009754:	b085      	sub	sp, #20
 8009756:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800975a:	9203      	str	r2, [sp, #12]
 800975c:	2406      	movs	r4, #6
 800975e:	ad01      	add	r5, sp, #4
 8009760:	4620      	mov	r0, r4
 8009762:	4629      	mov	r1, r5
 8009764:	beab      	bkpt	0x00ab
 8009766:	4604      	mov	r4, r0
 8009768:	4620      	mov	r0, r4
 800976a:	f7ff ffed 	bl	8009748 <checkerror>
 800976e:	b005      	add	sp, #20
 8009770:	bd30      	pop	{r4, r5, pc}

08009772 <_read>:
 8009772:	b570      	push	{r4, r5, r6, lr}
 8009774:	460e      	mov	r6, r1
 8009776:	4614      	mov	r4, r2
 8009778:	f7ff ffbe 	bl	80096f8 <findslot>
 800977c:	4605      	mov	r5, r0
 800977e:	b930      	cbnz	r0, 800978e <_read+0x1c>
 8009780:	f000 fbb6 	bl	8009ef0 <__errno>
 8009784:	2309      	movs	r3, #9
 8009786:	6003      	str	r3, [r0, #0]
 8009788:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800978c:	bd70      	pop	{r4, r5, r6, pc}
 800978e:	6800      	ldr	r0, [r0, #0]
 8009790:	4622      	mov	r2, r4
 8009792:	4631      	mov	r1, r6
 8009794:	f7ff ffdd 	bl	8009752 <_swiread>
 8009798:	1c43      	adds	r3, r0, #1
 800979a:	d0f5      	beq.n	8009788 <_read+0x16>
 800979c:	686b      	ldr	r3, [r5, #4]
 800979e:	1a20      	subs	r0, r4, r0
 80097a0:	4403      	add	r3, r0
 80097a2:	606b      	str	r3, [r5, #4]
 80097a4:	e7f2      	b.n	800978c <_read+0x1a>

080097a6 <_swilseek>:
 80097a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097a8:	460c      	mov	r4, r1
 80097aa:	4616      	mov	r6, r2
 80097ac:	f7ff ffa4 	bl	80096f8 <findslot>
 80097b0:	4605      	mov	r5, r0
 80097b2:	b940      	cbnz	r0, 80097c6 <_swilseek+0x20>
 80097b4:	f000 fb9c 	bl	8009ef0 <__errno>
 80097b8:	2309      	movs	r3, #9
 80097ba:	6003      	str	r3, [r0, #0]
 80097bc:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80097c0:	4620      	mov	r0, r4
 80097c2:	b003      	add	sp, #12
 80097c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097c6:	2e02      	cmp	r6, #2
 80097c8:	d903      	bls.n	80097d2 <_swilseek+0x2c>
 80097ca:	f000 fb91 	bl	8009ef0 <__errno>
 80097ce:	2316      	movs	r3, #22
 80097d0:	e7f3      	b.n	80097ba <_swilseek+0x14>
 80097d2:	2e01      	cmp	r6, #1
 80097d4:	d112      	bne.n	80097fc <_swilseek+0x56>
 80097d6:	6843      	ldr	r3, [r0, #4]
 80097d8:	18e4      	adds	r4, r4, r3
 80097da:	d4f6      	bmi.n	80097ca <_swilseek+0x24>
 80097dc:	682b      	ldr	r3, [r5, #0]
 80097de:	260a      	movs	r6, #10
 80097e0:	e9cd 3400 	strd	r3, r4, [sp]
 80097e4:	466f      	mov	r7, sp
 80097e6:	4630      	mov	r0, r6
 80097e8:	4639      	mov	r1, r7
 80097ea:	beab      	bkpt	0x00ab
 80097ec:	4606      	mov	r6, r0
 80097ee:	4630      	mov	r0, r6
 80097f0:	f7ff ffaa 	bl	8009748 <checkerror>
 80097f4:	2800      	cmp	r0, #0
 80097f6:	dbe1      	blt.n	80097bc <_swilseek+0x16>
 80097f8:	606c      	str	r4, [r5, #4]
 80097fa:	e7e1      	b.n	80097c0 <_swilseek+0x1a>
 80097fc:	2e02      	cmp	r6, #2
 80097fe:	6803      	ldr	r3, [r0, #0]
 8009800:	d1ec      	bne.n	80097dc <_swilseek+0x36>
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	260c      	movs	r6, #12
 8009806:	466f      	mov	r7, sp
 8009808:	4630      	mov	r0, r6
 800980a:	4639      	mov	r1, r7
 800980c:	beab      	bkpt	0x00ab
 800980e:	4606      	mov	r6, r0
 8009810:	4630      	mov	r0, r6
 8009812:	f7ff ff99 	bl	8009748 <checkerror>
 8009816:	1c43      	adds	r3, r0, #1
 8009818:	d0d0      	beq.n	80097bc <_swilseek+0x16>
 800981a:	4404      	add	r4, r0
 800981c:	e7de      	b.n	80097dc <_swilseek+0x36>

0800981e <_lseek>:
 800981e:	f7ff bfc2 	b.w	80097a6 <_swilseek>

08009822 <_swiwrite>:
 8009822:	b530      	push	{r4, r5, lr}
 8009824:	b085      	sub	sp, #20
 8009826:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800982a:	9203      	str	r2, [sp, #12]
 800982c:	2405      	movs	r4, #5
 800982e:	ad01      	add	r5, sp, #4
 8009830:	4620      	mov	r0, r4
 8009832:	4629      	mov	r1, r5
 8009834:	beab      	bkpt	0x00ab
 8009836:	4604      	mov	r4, r0
 8009838:	4620      	mov	r0, r4
 800983a:	f7ff ff85 	bl	8009748 <checkerror>
 800983e:	b005      	add	sp, #20
 8009840:	bd30      	pop	{r4, r5, pc}

08009842 <_write>:
 8009842:	b570      	push	{r4, r5, r6, lr}
 8009844:	460e      	mov	r6, r1
 8009846:	4615      	mov	r5, r2
 8009848:	f7ff ff56 	bl	80096f8 <findslot>
 800984c:	4604      	mov	r4, r0
 800984e:	b930      	cbnz	r0, 800985e <_write+0x1c>
 8009850:	f000 fb4e 	bl	8009ef0 <__errno>
 8009854:	2309      	movs	r3, #9
 8009856:	6003      	str	r3, [r0, #0]
 8009858:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800985c:	bd70      	pop	{r4, r5, r6, pc}
 800985e:	6800      	ldr	r0, [r0, #0]
 8009860:	462a      	mov	r2, r5
 8009862:	4631      	mov	r1, r6
 8009864:	f7ff ffdd 	bl	8009822 <_swiwrite>
 8009868:	1e03      	subs	r3, r0, #0
 800986a:	dbf5      	blt.n	8009858 <_write+0x16>
 800986c:	6862      	ldr	r2, [r4, #4]
 800986e:	1ae8      	subs	r0, r5, r3
 8009870:	4402      	add	r2, r0
 8009872:	42ab      	cmp	r3, r5
 8009874:	6062      	str	r2, [r4, #4]
 8009876:	d1f1      	bne.n	800985c <_write+0x1a>
 8009878:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800987c:	2000      	movs	r0, #0
 800987e:	f7ff bf55 	b.w	800972c <error>

08009882 <_swiclose>:
 8009882:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009884:	2402      	movs	r4, #2
 8009886:	9001      	str	r0, [sp, #4]
 8009888:	ad01      	add	r5, sp, #4
 800988a:	4620      	mov	r0, r4
 800988c:	4629      	mov	r1, r5
 800988e:	beab      	bkpt	0x00ab
 8009890:	4604      	mov	r4, r0
 8009892:	4620      	mov	r0, r4
 8009894:	f7ff ff58 	bl	8009748 <checkerror>
 8009898:	b003      	add	sp, #12
 800989a:	bd30      	pop	{r4, r5, pc}

0800989c <_close>:
 800989c:	b538      	push	{r3, r4, r5, lr}
 800989e:	4605      	mov	r5, r0
 80098a0:	f7ff ff2a 	bl	80096f8 <findslot>
 80098a4:	4604      	mov	r4, r0
 80098a6:	b930      	cbnz	r0, 80098b6 <_close+0x1a>
 80098a8:	f000 fb22 	bl	8009ef0 <__errno>
 80098ac:	2309      	movs	r3, #9
 80098ae:	6003      	str	r3, [r0, #0]
 80098b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80098b4:	bd38      	pop	{r3, r4, r5, pc}
 80098b6:	3d01      	subs	r5, #1
 80098b8:	2d01      	cmp	r5, #1
 80098ba:	d809      	bhi.n	80098d0 <_close+0x34>
 80098bc:	4b07      	ldr	r3, [pc, #28]	@ (80098dc <_close+0x40>)
 80098be:	689a      	ldr	r2, [r3, #8]
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d104      	bne.n	80098d0 <_close+0x34>
 80098c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80098ca:	6023      	str	r3, [r4, #0]
 80098cc:	2000      	movs	r0, #0
 80098ce:	e7f1      	b.n	80098b4 <_close+0x18>
 80098d0:	6820      	ldr	r0, [r4, #0]
 80098d2:	f7ff ffd6 	bl	8009882 <_swiclose>
 80098d6:	2800      	cmp	r0, #0
 80098d8:	d0f5      	beq.n	80098c6 <_close+0x2a>
 80098da:	e7eb      	b.n	80098b4 <_close+0x18>
 80098dc:	24000224 	.word	0x24000224

080098e0 <_swistat>:
 80098e0:	b570      	push	{r4, r5, r6, lr}
 80098e2:	460c      	mov	r4, r1
 80098e4:	f7ff ff08 	bl	80096f8 <findslot>
 80098e8:	4605      	mov	r5, r0
 80098ea:	b930      	cbnz	r0, 80098fa <_swistat+0x1a>
 80098ec:	f000 fb00 	bl	8009ef0 <__errno>
 80098f0:	2309      	movs	r3, #9
 80098f2:	6003      	str	r3, [r0, #0]
 80098f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80098f8:	bd70      	pop	{r4, r5, r6, pc}
 80098fa:	6863      	ldr	r3, [r4, #4]
 80098fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009900:	6063      	str	r3, [r4, #4]
 8009902:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009906:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009908:	260c      	movs	r6, #12
 800990a:	4630      	mov	r0, r6
 800990c:	4629      	mov	r1, r5
 800990e:	beab      	bkpt	0x00ab
 8009910:	4605      	mov	r5, r0
 8009912:	4628      	mov	r0, r5
 8009914:	f7ff ff18 	bl	8009748 <checkerror>
 8009918:	1c43      	adds	r3, r0, #1
 800991a:	d0eb      	beq.n	80098f4 <_swistat+0x14>
 800991c:	6120      	str	r0, [r4, #16]
 800991e:	2000      	movs	r0, #0
 8009920:	e7ea      	b.n	80098f8 <_swistat+0x18>

08009922 <_fstat>:
 8009922:	460b      	mov	r3, r1
 8009924:	b510      	push	{r4, lr}
 8009926:	2100      	movs	r1, #0
 8009928:	4604      	mov	r4, r0
 800992a:	2258      	movs	r2, #88	@ 0x58
 800992c:	4618      	mov	r0, r3
 800992e:	f000 fa90 	bl	8009e52 <memset>
 8009932:	4601      	mov	r1, r0
 8009934:	4620      	mov	r0, r4
 8009936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800993a:	f7ff bfd1 	b.w	80098e0 <_swistat>

0800993e <_stat>:
 800993e:	b538      	push	{r3, r4, r5, lr}
 8009940:	460d      	mov	r5, r1
 8009942:	4604      	mov	r4, r0
 8009944:	2258      	movs	r2, #88	@ 0x58
 8009946:	2100      	movs	r1, #0
 8009948:	4628      	mov	r0, r5
 800994a:	f000 fa82 	bl	8009e52 <memset>
 800994e:	4620      	mov	r0, r4
 8009950:	2100      	movs	r1, #0
 8009952:	f000 f811 	bl	8009978 <_swiopen>
 8009956:	1c43      	adds	r3, r0, #1
 8009958:	4604      	mov	r4, r0
 800995a:	d00b      	beq.n	8009974 <_stat+0x36>
 800995c:	686b      	ldr	r3, [r5, #4]
 800995e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009962:	606b      	str	r3, [r5, #4]
 8009964:	4629      	mov	r1, r5
 8009966:	f7ff ffbb 	bl	80098e0 <_swistat>
 800996a:	4605      	mov	r5, r0
 800996c:	4620      	mov	r0, r4
 800996e:	f7ff ff95 	bl	800989c <_close>
 8009972:	462c      	mov	r4, r5
 8009974:	4620      	mov	r0, r4
 8009976:	bd38      	pop	{r3, r4, r5, pc}

08009978 <_swiopen>:
 8009978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800997c:	4f29      	ldr	r7, [pc, #164]	@ (8009a24 <_swiopen+0xac>)
 800997e:	b096      	sub	sp, #88	@ 0x58
 8009980:	4682      	mov	sl, r0
 8009982:	460e      	mov	r6, r1
 8009984:	2400      	movs	r4, #0
 8009986:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 800998a:	3301      	adds	r3, #1
 800998c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8009990:	d00c      	beq.n	80099ac <_swiopen+0x34>
 8009992:	3401      	adds	r4, #1
 8009994:	2c14      	cmp	r4, #20
 8009996:	d1f6      	bne.n	8009986 <_swiopen+0xe>
 8009998:	f000 faaa 	bl	8009ef0 <__errno>
 800999c:	2318      	movs	r3, #24
 800999e:	6003      	str	r3, [r0, #0]
 80099a0:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80099a4:	4620      	mov	r0, r4
 80099a6:	b016      	add	sp, #88	@ 0x58
 80099a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ac:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80099b0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80099b4:	46e9      	mov	r9, sp
 80099b6:	d109      	bne.n	80099cc <_swiopen+0x54>
 80099b8:	4649      	mov	r1, r9
 80099ba:	4650      	mov	r0, sl
 80099bc:	f7ff ffbf 	bl	800993e <_stat>
 80099c0:	3001      	adds	r0, #1
 80099c2:	d003      	beq.n	80099cc <_swiopen+0x54>
 80099c4:	f000 fa94 	bl	8009ef0 <__errno>
 80099c8:	2311      	movs	r3, #17
 80099ca:	e7e8      	b.n	800999e <_swiopen+0x26>
 80099cc:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80099d0:	f240 6301 	movw	r3, #1537	@ 0x601
 80099d4:	07b2      	lsls	r2, r6, #30
 80099d6:	bf48      	it	mi
 80099d8:	f045 0502 	orrmi.w	r5, r5, #2
 80099dc:	421e      	tst	r6, r3
 80099de:	bf18      	it	ne
 80099e0:	f045 0504 	orrne.w	r5, r5, #4
 80099e4:	0733      	lsls	r3, r6, #28
 80099e6:	bf48      	it	mi
 80099e8:	f025 0504 	bicmi.w	r5, r5, #4
 80099ec:	4650      	mov	r0, sl
 80099ee:	bf48      	it	mi
 80099f0:	f045 0508 	orrmi.w	r5, r5, #8
 80099f4:	f8cd a000 	str.w	sl, [sp]
 80099f8:	f7f6 fc72 	bl	80002e0 <strlen>
 80099fc:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8009a00:	2501      	movs	r5, #1
 8009a02:	4628      	mov	r0, r5
 8009a04:	4649      	mov	r1, r9
 8009a06:	beab      	bkpt	0x00ab
 8009a08:	4605      	mov	r5, r0
 8009a0a:	2d00      	cmp	r5, #0
 8009a0c:	db05      	blt.n	8009a1a <_swiopen+0xa2>
 8009a0e:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8009a12:	4447      	add	r7, r8
 8009a14:	2300      	movs	r3, #0
 8009a16:	607b      	str	r3, [r7, #4]
 8009a18:	e7c4      	b.n	80099a4 <_swiopen+0x2c>
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	f7ff fe86 	bl	800972c <error>
 8009a20:	4604      	mov	r4, r0
 8009a22:	e7bf      	b.n	80099a4 <_swiopen+0x2c>
 8009a24:	24000224 	.word	0x24000224

08009a28 <_get_semihosting_exts>:
 8009a28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a2c:	4606      	mov	r6, r0
 8009a2e:	460f      	mov	r7, r1
 8009a30:	4829      	ldr	r0, [pc, #164]	@ (8009ad8 <_get_semihosting_exts+0xb0>)
 8009a32:	2100      	movs	r1, #0
 8009a34:	4615      	mov	r5, r2
 8009a36:	f7ff ff9f 	bl	8009978 <_swiopen>
 8009a3a:	462a      	mov	r2, r5
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	2100      	movs	r1, #0
 8009a40:	4630      	mov	r0, r6
 8009a42:	f000 fa06 	bl	8009e52 <memset>
 8009a46:	1c63      	adds	r3, r4, #1
 8009a48:	d014      	beq.n	8009a74 <_get_semihosting_exts+0x4c>
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f7ff fe54 	bl	80096f8 <findslot>
 8009a50:	f04f 080c 	mov.w	r8, #12
 8009a54:	4681      	mov	r9, r0
 8009a56:	4640      	mov	r0, r8
 8009a58:	4649      	mov	r1, r9
 8009a5a:	beab      	bkpt	0x00ab
 8009a5c:	4680      	mov	r8, r0
 8009a5e:	4640      	mov	r0, r8
 8009a60:	f7ff fe72 	bl	8009748 <checkerror>
 8009a64:	2803      	cmp	r0, #3
 8009a66:	dd02      	ble.n	8009a6e <_get_semihosting_exts+0x46>
 8009a68:	1ec3      	subs	r3, r0, #3
 8009a6a:	42ab      	cmp	r3, r5
 8009a6c:	dc07      	bgt.n	8009a7e <_get_semihosting_exts+0x56>
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f7ff ff14 	bl	800989c <_close>
 8009a74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a78:	b003      	add	sp, #12
 8009a7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a7e:	2204      	movs	r2, #4
 8009a80:	eb0d 0102 	add.w	r1, sp, r2
 8009a84:	4620      	mov	r0, r4
 8009a86:	f7ff fe74 	bl	8009772 <_read>
 8009a8a:	2803      	cmp	r0, #3
 8009a8c:	ddef      	ble.n	8009a6e <_get_semihosting_exts+0x46>
 8009a8e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009a92:	2b53      	cmp	r3, #83	@ 0x53
 8009a94:	d1eb      	bne.n	8009a6e <_get_semihosting_exts+0x46>
 8009a96:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009a9a:	2b48      	cmp	r3, #72	@ 0x48
 8009a9c:	d1e7      	bne.n	8009a6e <_get_semihosting_exts+0x46>
 8009a9e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009aa2:	2b46      	cmp	r3, #70	@ 0x46
 8009aa4:	d1e3      	bne.n	8009a6e <_get_semihosting_exts+0x46>
 8009aa6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009aaa:	2b42      	cmp	r3, #66	@ 0x42
 8009aac:	d1df      	bne.n	8009a6e <_get_semihosting_exts+0x46>
 8009aae:	2201      	movs	r2, #1
 8009ab0:	4639      	mov	r1, r7
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	f7ff fe77 	bl	80097a6 <_swilseek>
 8009ab8:	2800      	cmp	r0, #0
 8009aba:	dbd8      	blt.n	8009a6e <_get_semihosting_exts+0x46>
 8009abc:	462a      	mov	r2, r5
 8009abe:	4631      	mov	r1, r6
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	f7ff fe56 	bl	8009772 <_read>
 8009ac6:	4605      	mov	r5, r0
 8009ac8:	4620      	mov	r0, r4
 8009aca:	f7ff fee7 	bl	800989c <_close>
 8009ace:	4628      	mov	r0, r5
 8009ad0:	f7ff fe3a 	bl	8009748 <checkerror>
 8009ad4:	e7d0      	b.n	8009a78 <_get_semihosting_exts+0x50>
 8009ad6:	bf00      	nop
 8009ad8:	0800aad4 	.word	0x0800aad4

08009adc <initialise_semihosting_exts>:
 8009adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ade:	4d0a      	ldr	r5, [pc, #40]	@ (8009b08 <initialise_semihosting_exts+0x2c>)
 8009ae0:	4c0a      	ldr	r4, [pc, #40]	@ (8009b0c <initialise_semihosting_exts+0x30>)
 8009ae2:	2100      	movs	r1, #0
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	a801      	add	r0, sp, #4
 8009ae8:	6029      	str	r1, [r5, #0]
 8009aea:	6022      	str	r2, [r4, #0]
 8009aec:	f7ff ff9c 	bl	8009a28 <_get_semihosting_exts>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	dd07      	ble.n	8009b04 <initialise_semihosting_exts+0x28>
 8009af4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009af8:	f003 0201 	and.w	r2, r3, #1
 8009afc:	f003 0302 	and.w	r3, r3, #2
 8009b00:	602a      	str	r2, [r5, #0]
 8009b02:	6023      	str	r3, [r4, #0]
 8009b04:	b003      	add	sp, #12
 8009b06:	bd30      	pop	{r4, r5, pc}
 8009b08:	24000014 	.word	0x24000014
 8009b0c:	24000010 	.word	0x24000010

08009b10 <_has_ext_stdout_stderr>:
 8009b10:	b510      	push	{r4, lr}
 8009b12:	4c04      	ldr	r4, [pc, #16]	@ (8009b24 <_has_ext_stdout_stderr+0x14>)
 8009b14:	6823      	ldr	r3, [r4, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	da01      	bge.n	8009b1e <_has_ext_stdout_stderr+0xe>
 8009b1a:	f7ff ffdf 	bl	8009adc <initialise_semihosting_exts>
 8009b1e:	6820      	ldr	r0, [r4, #0]
 8009b20:	bd10      	pop	{r4, pc}
 8009b22:	bf00      	nop
 8009b24:	24000010 	.word	0x24000010

08009b28 <initialise_monitor_handles>:
 8009b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b2c:	b085      	sub	sp, #20
 8009b2e:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8009be0 <initialise_monitor_handles+0xb8>
 8009b32:	f8cd 9004 	str.w	r9, [sp, #4]
 8009b36:	2303      	movs	r3, #3
 8009b38:	2400      	movs	r4, #0
 8009b3a:	9303      	str	r3, [sp, #12]
 8009b3c:	af01      	add	r7, sp, #4
 8009b3e:	9402      	str	r4, [sp, #8]
 8009b40:	2501      	movs	r5, #1
 8009b42:	4628      	mov	r0, r5
 8009b44:	4639      	mov	r1, r7
 8009b46:	beab      	bkpt	0x00ab
 8009b48:	4605      	mov	r5, r0
 8009b4a:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8009be4 <initialise_monitor_handles+0xbc>
 8009b4e:	4623      	mov	r3, r4
 8009b50:	4c20      	ldr	r4, [pc, #128]	@ (8009bd4 <initialise_monitor_handles+0xac>)
 8009b52:	f8c8 5000 	str.w	r5, [r8]
 8009b56:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009b5a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	2b14      	cmp	r3, #20
 8009b62:	d1fa      	bne.n	8009b5a <initialise_monitor_handles+0x32>
 8009b64:	f7ff ffd4 	bl	8009b10 <_has_ext_stdout_stderr>
 8009b68:	4d1b      	ldr	r5, [pc, #108]	@ (8009bd8 <initialise_monitor_handles+0xb0>)
 8009b6a:	b1d0      	cbz	r0, 8009ba2 <initialise_monitor_handles+0x7a>
 8009b6c:	f04f 0a03 	mov.w	sl, #3
 8009b70:	2304      	movs	r3, #4
 8009b72:	f8cd 9004 	str.w	r9, [sp, #4]
 8009b76:	2601      	movs	r6, #1
 8009b78:	f8cd a00c 	str.w	sl, [sp, #12]
 8009b7c:	9302      	str	r3, [sp, #8]
 8009b7e:	4630      	mov	r0, r6
 8009b80:	4639      	mov	r1, r7
 8009b82:	beab      	bkpt	0x00ab
 8009b84:	4683      	mov	fp, r0
 8009b86:	4b15      	ldr	r3, [pc, #84]	@ (8009bdc <initialise_monitor_handles+0xb4>)
 8009b88:	f8cd 9004 	str.w	r9, [sp, #4]
 8009b8c:	f8c3 b000 	str.w	fp, [r3]
 8009b90:	2308      	movs	r3, #8
 8009b92:	f8cd a00c 	str.w	sl, [sp, #12]
 8009b96:	9302      	str	r3, [sp, #8]
 8009b98:	4630      	mov	r0, r6
 8009b9a:	4639      	mov	r1, r7
 8009b9c:	beab      	bkpt	0x00ab
 8009b9e:	4606      	mov	r6, r0
 8009ba0:	602e      	str	r6, [r5, #0]
 8009ba2:	682b      	ldr	r3, [r5, #0]
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	bf02      	ittt	eq
 8009ba8:	4b0c      	ldreq	r3, [pc, #48]	@ (8009bdc <initialise_monitor_handles+0xb4>)
 8009baa:	681b      	ldreq	r3, [r3, #0]
 8009bac:	602b      	streq	r3, [r5, #0]
 8009bae:	2600      	movs	r6, #0
 8009bb0:	f8d8 3000 	ldr.w	r3, [r8]
 8009bb4:	6023      	str	r3, [r4, #0]
 8009bb6:	6066      	str	r6, [r4, #4]
 8009bb8:	f7ff ffaa 	bl	8009b10 <_has_ext_stdout_stderr>
 8009bbc:	b130      	cbz	r0, 8009bcc <initialise_monitor_handles+0xa4>
 8009bbe:	4b07      	ldr	r3, [pc, #28]	@ (8009bdc <initialise_monitor_handles+0xb4>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8009bc6:	682b      	ldr	r3, [r5, #0]
 8009bc8:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8009bcc:	b005      	add	sp, #20
 8009bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd2:	bf00      	nop
 8009bd4:	24000224 	.word	0x24000224
 8009bd8:	24000218 	.word	0x24000218
 8009bdc:	2400021c 	.word	0x2400021c
 8009be0:	0800aaea 	.word	0x0800aaea
 8009be4:	24000220 	.word	0x24000220

08009be8 <_isatty>:
 8009be8:	b570      	push	{r4, r5, r6, lr}
 8009bea:	f7ff fd85 	bl	80096f8 <findslot>
 8009bee:	2409      	movs	r4, #9
 8009bf0:	4605      	mov	r5, r0
 8009bf2:	b920      	cbnz	r0, 8009bfe <_isatty+0x16>
 8009bf4:	f000 f97c 	bl	8009ef0 <__errno>
 8009bf8:	6004      	str	r4, [r0, #0]
 8009bfa:	2000      	movs	r0, #0
 8009bfc:	bd70      	pop	{r4, r5, r6, pc}
 8009bfe:	4620      	mov	r0, r4
 8009c00:	4629      	mov	r1, r5
 8009c02:	beab      	bkpt	0x00ab
 8009c04:	4604      	mov	r4, r0
 8009c06:	2c01      	cmp	r4, #1
 8009c08:	4620      	mov	r0, r4
 8009c0a:	d0f7      	beq.n	8009bfc <_isatty+0x14>
 8009c0c:	f000 f970 	bl	8009ef0 <__errno>
 8009c10:	2513      	movs	r5, #19
 8009c12:	4604      	mov	r4, r0
 8009c14:	2600      	movs	r6, #0
 8009c16:	4628      	mov	r0, r5
 8009c18:	4631      	mov	r1, r6
 8009c1a:	beab      	bkpt	0x00ab
 8009c1c:	4605      	mov	r5, r0
 8009c1e:	6025      	str	r5, [r4, #0]
 8009c20:	e7eb      	b.n	8009bfa <_isatty+0x12>
	...

08009c24 <std>:
 8009c24:	2300      	movs	r3, #0
 8009c26:	b510      	push	{r4, lr}
 8009c28:	4604      	mov	r4, r0
 8009c2a:	e9c0 3300 	strd	r3, r3, [r0]
 8009c2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c32:	6083      	str	r3, [r0, #8]
 8009c34:	8181      	strh	r1, [r0, #12]
 8009c36:	6643      	str	r3, [r0, #100]	@ 0x64
 8009c38:	81c2      	strh	r2, [r0, #14]
 8009c3a:	6183      	str	r3, [r0, #24]
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	2208      	movs	r2, #8
 8009c40:	305c      	adds	r0, #92	@ 0x5c
 8009c42:	f000 f906 	bl	8009e52 <memset>
 8009c46:	4b0d      	ldr	r3, [pc, #52]	@ (8009c7c <std+0x58>)
 8009c48:	6263      	str	r3, [r4, #36]	@ 0x24
 8009c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8009c80 <std+0x5c>)
 8009c4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8009c84 <std+0x60>)
 8009c50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009c52:	4b0d      	ldr	r3, [pc, #52]	@ (8009c88 <std+0x64>)
 8009c54:	6323      	str	r3, [r4, #48]	@ 0x30
 8009c56:	4b0d      	ldr	r3, [pc, #52]	@ (8009c8c <std+0x68>)
 8009c58:	6224      	str	r4, [r4, #32]
 8009c5a:	429c      	cmp	r4, r3
 8009c5c:	d006      	beq.n	8009c6c <std+0x48>
 8009c5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009c62:	4294      	cmp	r4, r2
 8009c64:	d002      	beq.n	8009c6c <std+0x48>
 8009c66:	33d0      	adds	r3, #208	@ 0xd0
 8009c68:	429c      	cmp	r4, r3
 8009c6a:	d105      	bne.n	8009c78 <std+0x54>
 8009c6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c74:	f000 b966 	b.w	8009f44 <__retarget_lock_init_recursive>
 8009c78:	bd10      	pop	{r4, pc}
 8009c7a:	bf00      	nop
 8009c7c:	08009dcd 	.word	0x08009dcd
 8009c80:	08009def 	.word	0x08009def
 8009c84:	08009e27 	.word	0x08009e27
 8009c88:	08009e4b 	.word	0x08009e4b
 8009c8c:	240002c4 	.word	0x240002c4

08009c90 <stdio_exit_handler>:
 8009c90:	4a02      	ldr	r2, [pc, #8]	@ (8009c9c <stdio_exit_handler+0xc>)
 8009c92:	4903      	ldr	r1, [pc, #12]	@ (8009ca0 <stdio_exit_handler+0x10>)
 8009c94:	4803      	ldr	r0, [pc, #12]	@ (8009ca4 <stdio_exit_handler+0x14>)
 8009c96:	f000 b869 	b.w	8009d6c <_fwalk_sglue>
 8009c9a:	bf00      	nop
 8009c9c:	24000018 	.word	0x24000018
 8009ca0:	0800a7e5 	.word	0x0800a7e5
 8009ca4:	24000028 	.word	0x24000028

08009ca8 <cleanup_stdio>:
 8009ca8:	6841      	ldr	r1, [r0, #4]
 8009caa:	4b0c      	ldr	r3, [pc, #48]	@ (8009cdc <cleanup_stdio+0x34>)
 8009cac:	4299      	cmp	r1, r3
 8009cae:	b510      	push	{r4, lr}
 8009cb0:	4604      	mov	r4, r0
 8009cb2:	d001      	beq.n	8009cb8 <cleanup_stdio+0x10>
 8009cb4:	f000 fd96 	bl	800a7e4 <_fflush_r>
 8009cb8:	68a1      	ldr	r1, [r4, #8]
 8009cba:	4b09      	ldr	r3, [pc, #36]	@ (8009ce0 <cleanup_stdio+0x38>)
 8009cbc:	4299      	cmp	r1, r3
 8009cbe:	d002      	beq.n	8009cc6 <cleanup_stdio+0x1e>
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	f000 fd8f 	bl	800a7e4 <_fflush_r>
 8009cc6:	68e1      	ldr	r1, [r4, #12]
 8009cc8:	4b06      	ldr	r3, [pc, #24]	@ (8009ce4 <cleanup_stdio+0x3c>)
 8009cca:	4299      	cmp	r1, r3
 8009ccc:	d004      	beq.n	8009cd8 <cleanup_stdio+0x30>
 8009cce:	4620      	mov	r0, r4
 8009cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cd4:	f000 bd86 	b.w	800a7e4 <_fflush_r>
 8009cd8:	bd10      	pop	{r4, pc}
 8009cda:	bf00      	nop
 8009cdc:	240002c4 	.word	0x240002c4
 8009ce0:	2400032c 	.word	0x2400032c
 8009ce4:	24000394 	.word	0x24000394

08009ce8 <global_stdio_init.part.0>:
 8009ce8:	b510      	push	{r4, lr}
 8009cea:	4b0b      	ldr	r3, [pc, #44]	@ (8009d18 <global_stdio_init.part.0+0x30>)
 8009cec:	4c0b      	ldr	r4, [pc, #44]	@ (8009d1c <global_stdio_init.part.0+0x34>)
 8009cee:	4a0c      	ldr	r2, [pc, #48]	@ (8009d20 <global_stdio_init.part.0+0x38>)
 8009cf0:	601a      	str	r2, [r3, #0]
 8009cf2:	4620      	mov	r0, r4
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	2104      	movs	r1, #4
 8009cf8:	f7ff ff94 	bl	8009c24 <std>
 8009cfc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009d00:	2201      	movs	r2, #1
 8009d02:	2109      	movs	r1, #9
 8009d04:	f7ff ff8e 	bl	8009c24 <std>
 8009d08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009d0c:	2202      	movs	r2, #2
 8009d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d12:	2112      	movs	r1, #18
 8009d14:	f7ff bf86 	b.w	8009c24 <std>
 8009d18:	240003fc 	.word	0x240003fc
 8009d1c:	240002c4 	.word	0x240002c4
 8009d20:	08009c91 	.word	0x08009c91

08009d24 <__sfp_lock_acquire>:
 8009d24:	4801      	ldr	r0, [pc, #4]	@ (8009d2c <__sfp_lock_acquire+0x8>)
 8009d26:	f000 b90e 	b.w	8009f46 <__retarget_lock_acquire_recursive>
 8009d2a:	bf00      	nop
 8009d2c:	24000405 	.word	0x24000405

08009d30 <__sfp_lock_release>:
 8009d30:	4801      	ldr	r0, [pc, #4]	@ (8009d38 <__sfp_lock_release+0x8>)
 8009d32:	f000 b909 	b.w	8009f48 <__retarget_lock_release_recursive>
 8009d36:	bf00      	nop
 8009d38:	24000405 	.word	0x24000405

08009d3c <__sinit>:
 8009d3c:	b510      	push	{r4, lr}
 8009d3e:	4604      	mov	r4, r0
 8009d40:	f7ff fff0 	bl	8009d24 <__sfp_lock_acquire>
 8009d44:	6a23      	ldr	r3, [r4, #32]
 8009d46:	b11b      	cbz	r3, 8009d50 <__sinit+0x14>
 8009d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d4c:	f7ff bff0 	b.w	8009d30 <__sfp_lock_release>
 8009d50:	4b04      	ldr	r3, [pc, #16]	@ (8009d64 <__sinit+0x28>)
 8009d52:	6223      	str	r3, [r4, #32]
 8009d54:	4b04      	ldr	r3, [pc, #16]	@ (8009d68 <__sinit+0x2c>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d1f5      	bne.n	8009d48 <__sinit+0xc>
 8009d5c:	f7ff ffc4 	bl	8009ce8 <global_stdio_init.part.0>
 8009d60:	e7f2      	b.n	8009d48 <__sinit+0xc>
 8009d62:	bf00      	nop
 8009d64:	08009ca9 	.word	0x08009ca9
 8009d68:	240003fc 	.word	0x240003fc

08009d6c <_fwalk_sglue>:
 8009d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d70:	4607      	mov	r7, r0
 8009d72:	4688      	mov	r8, r1
 8009d74:	4614      	mov	r4, r2
 8009d76:	2600      	movs	r6, #0
 8009d78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d7c:	f1b9 0901 	subs.w	r9, r9, #1
 8009d80:	d505      	bpl.n	8009d8e <_fwalk_sglue+0x22>
 8009d82:	6824      	ldr	r4, [r4, #0]
 8009d84:	2c00      	cmp	r4, #0
 8009d86:	d1f7      	bne.n	8009d78 <_fwalk_sglue+0xc>
 8009d88:	4630      	mov	r0, r6
 8009d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d8e:	89ab      	ldrh	r3, [r5, #12]
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d907      	bls.n	8009da4 <_fwalk_sglue+0x38>
 8009d94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d98:	3301      	adds	r3, #1
 8009d9a:	d003      	beq.n	8009da4 <_fwalk_sglue+0x38>
 8009d9c:	4629      	mov	r1, r5
 8009d9e:	4638      	mov	r0, r7
 8009da0:	47c0      	blx	r8
 8009da2:	4306      	orrs	r6, r0
 8009da4:	3568      	adds	r5, #104	@ 0x68
 8009da6:	e7e9      	b.n	8009d7c <_fwalk_sglue+0x10>

08009da8 <iprintf>:
 8009da8:	b40f      	push	{r0, r1, r2, r3}
 8009daa:	b507      	push	{r0, r1, r2, lr}
 8009dac:	4906      	ldr	r1, [pc, #24]	@ (8009dc8 <iprintf+0x20>)
 8009dae:	ab04      	add	r3, sp, #16
 8009db0:	6808      	ldr	r0, [r1, #0]
 8009db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009db6:	6881      	ldr	r1, [r0, #8]
 8009db8:	9301      	str	r3, [sp, #4]
 8009dba:	f000 f9e9 	bl	800a190 <_vfiprintf_r>
 8009dbe:	b003      	add	sp, #12
 8009dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dc4:	b004      	add	sp, #16
 8009dc6:	4770      	bx	lr
 8009dc8:	24000024 	.word	0x24000024

08009dcc <__sread>:
 8009dcc:	b510      	push	{r4, lr}
 8009dce:	460c      	mov	r4, r1
 8009dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dd4:	f000 f868 	bl	8009ea8 <_read_r>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	bfab      	itete	ge
 8009ddc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009dde:	89a3      	ldrhlt	r3, [r4, #12]
 8009de0:	181b      	addge	r3, r3, r0
 8009de2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009de6:	bfac      	ite	ge
 8009de8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009dea:	81a3      	strhlt	r3, [r4, #12]
 8009dec:	bd10      	pop	{r4, pc}

08009dee <__swrite>:
 8009dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009df2:	461f      	mov	r7, r3
 8009df4:	898b      	ldrh	r3, [r1, #12]
 8009df6:	05db      	lsls	r3, r3, #23
 8009df8:	4605      	mov	r5, r0
 8009dfa:	460c      	mov	r4, r1
 8009dfc:	4616      	mov	r6, r2
 8009dfe:	d505      	bpl.n	8009e0c <__swrite+0x1e>
 8009e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e04:	2302      	movs	r3, #2
 8009e06:	2200      	movs	r2, #0
 8009e08:	f000 f83c 	bl	8009e84 <_lseek_r>
 8009e0c:	89a3      	ldrh	r3, [r4, #12]
 8009e0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e16:	81a3      	strh	r3, [r4, #12]
 8009e18:	4632      	mov	r2, r6
 8009e1a:	463b      	mov	r3, r7
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e22:	f000 b853 	b.w	8009ecc <_write_r>

08009e26 <__sseek>:
 8009e26:	b510      	push	{r4, lr}
 8009e28:	460c      	mov	r4, r1
 8009e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e2e:	f000 f829 	bl	8009e84 <_lseek_r>
 8009e32:	1c43      	adds	r3, r0, #1
 8009e34:	89a3      	ldrh	r3, [r4, #12]
 8009e36:	bf15      	itete	ne
 8009e38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009e3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009e3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009e42:	81a3      	strheq	r3, [r4, #12]
 8009e44:	bf18      	it	ne
 8009e46:	81a3      	strhne	r3, [r4, #12]
 8009e48:	bd10      	pop	{r4, pc}

08009e4a <__sclose>:
 8009e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e4e:	f000 b809 	b.w	8009e64 <_close_r>

08009e52 <memset>:
 8009e52:	4402      	add	r2, r0
 8009e54:	4603      	mov	r3, r0
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d100      	bne.n	8009e5c <memset+0xa>
 8009e5a:	4770      	bx	lr
 8009e5c:	f803 1b01 	strb.w	r1, [r3], #1
 8009e60:	e7f9      	b.n	8009e56 <memset+0x4>
	...

08009e64 <_close_r>:
 8009e64:	b538      	push	{r3, r4, r5, lr}
 8009e66:	4d06      	ldr	r5, [pc, #24]	@ (8009e80 <_close_r+0x1c>)
 8009e68:	2300      	movs	r3, #0
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	4608      	mov	r0, r1
 8009e6e:	602b      	str	r3, [r5, #0]
 8009e70:	f7ff fd14 	bl	800989c <_close>
 8009e74:	1c43      	adds	r3, r0, #1
 8009e76:	d102      	bne.n	8009e7e <_close_r+0x1a>
 8009e78:	682b      	ldr	r3, [r5, #0]
 8009e7a:	b103      	cbz	r3, 8009e7e <_close_r+0x1a>
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	bd38      	pop	{r3, r4, r5, pc}
 8009e80:	24000400 	.word	0x24000400

08009e84 <_lseek_r>:
 8009e84:	b538      	push	{r3, r4, r5, lr}
 8009e86:	4d07      	ldr	r5, [pc, #28]	@ (8009ea4 <_lseek_r+0x20>)
 8009e88:	4604      	mov	r4, r0
 8009e8a:	4608      	mov	r0, r1
 8009e8c:	4611      	mov	r1, r2
 8009e8e:	2200      	movs	r2, #0
 8009e90:	602a      	str	r2, [r5, #0]
 8009e92:	461a      	mov	r2, r3
 8009e94:	f7ff fcc3 	bl	800981e <_lseek>
 8009e98:	1c43      	adds	r3, r0, #1
 8009e9a:	d102      	bne.n	8009ea2 <_lseek_r+0x1e>
 8009e9c:	682b      	ldr	r3, [r5, #0]
 8009e9e:	b103      	cbz	r3, 8009ea2 <_lseek_r+0x1e>
 8009ea0:	6023      	str	r3, [r4, #0]
 8009ea2:	bd38      	pop	{r3, r4, r5, pc}
 8009ea4:	24000400 	.word	0x24000400

08009ea8 <_read_r>:
 8009ea8:	b538      	push	{r3, r4, r5, lr}
 8009eaa:	4d07      	ldr	r5, [pc, #28]	@ (8009ec8 <_read_r+0x20>)
 8009eac:	4604      	mov	r4, r0
 8009eae:	4608      	mov	r0, r1
 8009eb0:	4611      	mov	r1, r2
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	602a      	str	r2, [r5, #0]
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	f7ff fc5b 	bl	8009772 <_read>
 8009ebc:	1c43      	adds	r3, r0, #1
 8009ebe:	d102      	bne.n	8009ec6 <_read_r+0x1e>
 8009ec0:	682b      	ldr	r3, [r5, #0]
 8009ec2:	b103      	cbz	r3, 8009ec6 <_read_r+0x1e>
 8009ec4:	6023      	str	r3, [r4, #0]
 8009ec6:	bd38      	pop	{r3, r4, r5, pc}
 8009ec8:	24000400 	.word	0x24000400

08009ecc <_write_r>:
 8009ecc:	b538      	push	{r3, r4, r5, lr}
 8009ece:	4d07      	ldr	r5, [pc, #28]	@ (8009eec <_write_r+0x20>)
 8009ed0:	4604      	mov	r4, r0
 8009ed2:	4608      	mov	r0, r1
 8009ed4:	4611      	mov	r1, r2
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	602a      	str	r2, [r5, #0]
 8009eda:	461a      	mov	r2, r3
 8009edc:	f7ff fcb1 	bl	8009842 <_write>
 8009ee0:	1c43      	adds	r3, r0, #1
 8009ee2:	d102      	bne.n	8009eea <_write_r+0x1e>
 8009ee4:	682b      	ldr	r3, [r5, #0]
 8009ee6:	b103      	cbz	r3, 8009eea <_write_r+0x1e>
 8009ee8:	6023      	str	r3, [r4, #0]
 8009eea:	bd38      	pop	{r3, r4, r5, pc}
 8009eec:	24000400 	.word	0x24000400

08009ef0 <__errno>:
 8009ef0:	4b01      	ldr	r3, [pc, #4]	@ (8009ef8 <__errno+0x8>)
 8009ef2:	6818      	ldr	r0, [r3, #0]
 8009ef4:	4770      	bx	lr
 8009ef6:	bf00      	nop
 8009ef8:	24000024 	.word	0x24000024

08009efc <__libc_init_array>:
 8009efc:	b570      	push	{r4, r5, r6, lr}
 8009efe:	4d0d      	ldr	r5, [pc, #52]	@ (8009f34 <__libc_init_array+0x38>)
 8009f00:	4c0d      	ldr	r4, [pc, #52]	@ (8009f38 <__libc_init_array+0x3c>)
 8009f02:	1b64      	subs	r4, r4, r5
 8009f04:	10a4      	asrs	r4, r4, #2
 8009f06:	2600      	movs	r6, #0
 8009f08:	42a6      	cmp	r6, r4
 8009f0a:	d109      	bne.n	8009f20 <__libc_init_array+0x24>
 8009f0c:	4d0b      	ldr	r5, [pc, #44]	@ (8009f3c <__libc_init_array+0x40>)
 8009f0e:	4c0c      	ldr	r4, [pc, #48]	@ (8009f40 <__libc_init_array+0x44>)
 8009f10:	f000 fdb8 	bl	800aa84 <_init>
 8009f14:	1b64      	subs	r4, r4, r5
 8009f16:	10a4      	asrs	r4, r4, #2
 8009f18:	2600      	movs	r6, #0
 8009f1a:	42a6      	cmp	r6, r4
 8009f1c:	d105      	bne.n	8009f2a <__libc_init_array+0x2e>
 8009f1e:	bd70      	pop	{r4, r5, r6, pc}
 8009f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f24:	4798      	blx	r3
 8009f26:	3601      	adds	r6, #1
 8009f28:	e7ee      	b.n	8009f08 <__libc_init_array+0xc>
 8009f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f2e:	4798      	blx	r3
 8009f30:	3601      	adds	r6, #1
 8009f32:	e7f2      	b.n	8009f1a <__libc_init_array+0x1e>
 8009f34:	0800ab2c 	.word	0x0800ab2c
 8009f38:	0800ab2c 	.word	0x0800ab2c
 8009f3c:	0800ab2c 	.word	0x0800ab2c
 8009f40:	0800ab30 	.word	0x0800ab30

08009f44 <__retarget_lock_init_recursive>:
 8009f44:	4770      	bx	lr

08009f46 <__retarget_lock_acquire_recursive>:
 8009f46:	4770      	bx	lr

08009f48 <__retarget_lock_release_recursive>:
 8009f48:	4770      	bx	lr
	...

08009f4c <_free_r>:
 8009f4c:	b538      	push	{r3, r4, r5, lr}
 8009f4e:	4605      	mov	r5, r0
 8009f50:	2900      	cmp	r1, #0
 8009f52:	d041      	beq.n	8009fd8 <_free_r+0x8c>
 8009f54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f58:	1f0c      	subs	r4, r1, #4
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	bfb8      	it	lt
 8009f5e:	18e4      	addlt	r4, r4, r3
 8009f60:	f000 f8e0 	bl	800a124 <__malloc_lock>
 8009f64:	4a1d      	ldr	r2, [pc, #116]	@ (8009fdc <_free_r+0x90>)
 8009f66:	6813      	ldr	r3, [r2, #0]
 8009f68:	b933      	cbnz	r3, 8009f78 <_free_r+0x2c>
 8009f6a:	6063      	str	r3, [r4, #4]
 8009f6c:	6014      	str	r4, [r2, #0]
 8009f6e:	4628      	mov	r0, r5
 8009f70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f74:	f000 b8dc 	b.w	800a130 <__malloc_unlock>
 8009f78:	42a3      	cmp	r3, r4
 8009f7a:	d908      	bls.n	8009f8e <_free_r+0x42>
 8009f7c:	6820      	ldr	r0, [r4, #0]
 8009f7e:	1821      	adds	r1, r4, r0
 8009f80:	428b      	cmp	r3, r1
 8009f82:	bf01      	itttt	eq
 8009f84:	6819      	ldreq	r1, [r3, #0]
 8009f86:	685b      	ldreq	r3, [r3, #4]
 8009f88:	1809      	addeq	r1, r1, r0
 8009f8a:	6021      	streq	r1, [r4, #0]
 8009f8c:	e7ed      	b.n	8009f6a <_free_r+0x1e>
 8009f8e:	461a      	mov	r2, r3
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	b10b      	cbz	r3, 8009f98 <_free_r+0x4c>
 8009f94:	42a3      	cmp	r3, r4
 8009f96:	d9fa      	bls.n	8009f8e <_free_r+0x42>
 8009f98:	6811      	ldr	r1, [r2, #0]
 8009f9a:	1850      	adds	r0, r2, r1
 8009f9c:	42a0      	cmp	r0, r4
 8009f9e:	d10b      	bne.n	8009fb8 <_free_r+0x6c>
 8009fa0:	6820      	ldr	r0, [r4, #0]
 8009fa2:	4401      	add	r1, r0
 8009fa4:	1850      	adds	r0, r2, r1
 8009fa6:	4283      	cmp	r3, r0
 8009fa8:	6011      	str	r1, [r2, #0]
 8009faa:	d1e0      	bne.n	8009f6e <_free_r+0x22>
 8009fac:	6818      	ldr	r0, [r3, #0]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	6053      	str	r3, [r2, #4]
 8009fb2:	4408      	add	r0, r1
 8009fb4:	6010      	str	r0, [r2, #0]
 8009fb6:	e7da      	b.n	8009f6e <_free_r+0x22>
 8009fb8:	d902      	bls.n	8009fc0 <_free_r+0x74>
 8009fba:	230c      	movs	r3, #12
 8009fbc:	602b      	str	r3, [r5, #0]
 8009fbe:	e7d6      	b.n	8009f6e <_free_r+0x22>
 8009fc0:	6820      	ldr	r0, [r4, #0]
 8009fc2:	1821      	adds	r1, r4, r0
 8009fc4:	428b      	cmp	r3, r1
 8009fc6:	bf04      	itt	eq
 8009fc8:	6819      	ldreq	r1, [r3, #0]
 8009fca:	685b      	ldreq	r3, [r3, #4]
 8009fcc:	6063      	str	r3, [r4, #4]
 8009fce:	bf04      	itt	eq
 8009fd0:	1809      	addeq	r1, r1, r0
 8009fd2:	6021      	streq	r1, [r4, #0]
 8009fd4:	6054      	str	r4, [r2, #4]
 8009fd6:	e7ca      	b.n	8009f6e <_free_r+0x22>
 8009fd8:	bd38      	pop	{r3, r4, r5, pc}
 8009fda:	bf00      	nop
 8009fdc:	2400040c 	.word	0x2400040c

08009fe0 <sbrk_aligned>:
 8009fe0:	b570      	push	{r4, r5, r6, lr}
 8009fe2:	4e0f      	ldr	r6, [pc, #60]	@ (800a020 <sbrk_aligned+0x40>)
 8009fe4:	460c      	mov	r4, r1
 8009fe6:	6831      	ldr	r1, [r6, #0]
 8009fe8:	4605      	mov	r5, r0
 8009fea:	b911      	cbnz	r1, 8009ff2 <sbrk_aligned+0x12>
 8009fec:	f000 fcb6 	bl	800a95c <_sbrk_r>
 8009ff0:	6030      	str	r0, [r6, #0]
 8009ff2:	4621      	mov	r1, r4
 8009ff4:	4628      	mov	r0, r5
 8009ff6:	f000 fcb1 	bl	800a95c <_sbrk_r>
 8009ffa:	1c43      	adds	r3, r0, #1
 8009ffc:	d103      	bne.n	800a006 <sbrk_aligned+0x26>
 8009ffe:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a002:	4620      	mov	r0, r4
 800a004:	bd70      	pop	{r4, r5, r6, pc}
 800a006:	1cc4      	adds	r4, r0, #3
 800a008:	f024 0403 	bic.w	r4, r4, #3
 800a00c:	42a0      	cmp	r0, r4
 800a00e:	d0f8      	beq.n	800a002 <sbrk_aligned+0x22>
 800a010:	1a21      	subs	r1, r4, r0
 800a012:	4628      	mov	r0, r5
 800a014:	f000 fca2 	bl	800a95c <_sbrk_r>
 800a018:	3001      	adds	r0, #1
 800a01a:	d1f2      	bne.n	800a002 <sbrk_aligned+0x22>
 800a01c:	e7ef      	b.n	8009ffe <sbrk_aligned+0x1e>
 800a01e:	bf00      	nop
 800a020:	24000408 	.word	0x24000408

0800a024 <_malloc_r>:
 800a024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a028:	1ccd      	adds	r5, r1, #3
 800a02a:	f025 0503 	bic.w	r5, r5, #3
 800a02e:	3508      	adds	r5, #8
 800a030:	2d0c      	cmp	r5, #12
 800a032:	bf38      	it	cc
 800a034:	250c      	movcc	r5, #12
 800a036:	2d00      	cmp	r5, #0
 800a038:	4606      	mov	r6, r0
 800a03a:	db01      	blt.n	800a040 <_malloc_r+0x1c>
 800a03c:	42a9      	cmp	r1, r5
 800a03e:	d904      	bls.n	800a04a <_malloc_r+0x26>
 800a040:	230c      	movs	r3, #12
 800a042:	6033      	str	r3, [r6, #0]
 800a044:	2000      	movs	r0, #0
 800a046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a04a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a120 <_malloc_r+0xfc>
 800a04e:	f000 f869 	bl	800a124 <__malloc_lock>
 800a052:	f8d8 3000 	ldr.w	r3, [r8]
 800a056:	461c      	mov	r4, r3
 800a058:	bb44      	cbnz	r4, 800a0ac <_malloc_r+0x88>
 800a05a:	4629      	mov	r1, r5
 800a05c:	4630      	mov	r0, r6
 800a05e:	f7ff ffbf 	bl	8009fe0 <sbrk_aligned>
 800a062:	1c43      	adds	r3, r0, #1
 800a064:	4604      	mov	r4, r0
 800a066:	d158      	bne.n	800a11a <_malloc_r+0xf6>
 800a068:	f8d8 4000 	ldr.w	r4, [r8]
 800a06c:	4627      	mov	r7, r4
 800a06e:	2f00      	cmp	r7, #0
 800a070:	d143      	bne.n	800a0fa <_malloc_r+0xd6>
 800a072:	2c00      	cmp	r4, #0
 800a074:	d04b      	beq.n	800a10e <_malloc_r+0xea>
 800a076:	6823      	ldr	r3, [r4, #0]
 800a078:	4639      	mov	r1, r7
 800a07a:	4630      	mov	r0, r6
 800a07c:	eb04 0903 	add.w	r9, r4, r3
 800a080:	f000 fc6c 	bl	800a95c <_sbrk_r>
 800a084:	4581      	cmp	r9, r0
 800a086:	d142      	bne.n	800a10e <_malloc_r+0xea>
 800a088:	6821      	ldr	r1, [r4, #0]
 800a08a:	1a6d      	subs	r5, r5, r1
 800a08c:	4629      	mov	r1, r5
 800a08e:	4630      	mov	r0, r6
 800a090:	f7ff ffa6 	bl	8009fe0 <sbrk_aligned>
 800a094:	3001      	adds	r0, #1
 800a096:	d03a      	beq.n	800a10e <_malloc_r+0xea>
 800a098:	6823      	ldr	r3, [r4, #0]
 800a09a:	442b      	add	r3, r5
 800a09c:	6023      	str	r3, [r4, #0]
 800a09e:	f8d8 3000 	ldr.w	r3, [r8]
 800a0a2:	685a      	ldr	r2, [r3, #4]
 800a0a4:	bb62      	cbnz	r2, 800a100 <_malloc_r+0xdc>
 800a0a6:	f8c8 7000 	str.w	r7, [r8]
 800a0aa:	e00f      	b.n	800a0cc <_malloc_r+0xa8>
 800a0ac:	6822      	ldr	r2, [r4, #0]
 800a0ae:	1b52      	subs	r2, r2, r5
 800a0b0:	d420      	bmi.n	800a0f4 <_malloc_r+0xd0>
 800a0b2:	2a0b      	cmp	r2, #11
 800a0b4:	d917      	bls.n	800a0e6 <_malloc_r+0xc2>
 800a0b6:	1961      	adds	r1, r4, r5
 800a0b8:	42a3      	cmp	r3, r4
 800a0ba:	6025      	str	r5, [r4, #0]
 800a0bc:	bf18      	it	ne
 800a0be:	6059      	strne	r1, [r3, #4]
 800a0c0:	6863      	ldr	r3, [r4, #4]
 800a0c2:	bf08      	it	eq
 800a0c4:	f8c8 1000 	streq.w	r1, [r8]
 800a0c8:	5162      	str	r2, [r4, r5]
 800a0ca:	604b      	str	r3, [r1, #4]
 800a0cc:	4630      	mov	r0, r6
 800a0ce:	f000 f82f 	bl	800a130 <__malloc_unlock>
 800a0d2:	f104 000b 	add.w	r0, r4, #11
 800a0d6:	1d23      	adds	r3, r4, #4
 800a0d8:	f020 0007 	bic.w	r0, r0, #7
 800a0dc:	1ac2      	subs	r2, r0, r3
 800a0de:	bf1c      	itt	ne
 800a0e0:	1a1b      	subne	r3, r3, r0
 800a0e2:	50a3      	strne	r3, [r4, r2]
 800a0e4:	e7af      	b.n	800a046 <_malloc_r+0x22>
 800a0e6:	6862      	ldr	r2, [r4, #4]
 800a0e8:	42a3      	cmp	r3, r4
 800a0ea:	bf0c      	ite	eq
 800a0ec:	f8c8 2000 	streq.w	r2, [r8]
 800a0f0:	605a      	strne	r2, [r3, #4]
 800a0f2:	e7eb      	b.n	800a0cc <_malloc_r+0xa8>
 800a0f4:	4623      	mov	r3, r4
 800a0f6:	6864      	ldr	r4, [r4, #4]
 800a0f8:	e7ae      	b.n	800a058 <_malloc_r+0x34>
 800a0fa:	463c      	mov	r4, r7
 800a0fc:	687f      	ldr	r7, [r7, #4]
 800a0fe:	e7b6      	b.n	800a06e <_malloc_r+0x4a>
 800a100:	461a      	mov	r2, r3
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	42a3      	cmp	r3, r4
 800a106:	d1fb      	bne.n	800a100 <_malloc_r+0xdc>
 800a108:	2300      	movs	r3, #0
 800a10a:	6053      	str	r3, [r2, #4]
 800a10c:	e7de      	b.n	800a0cc <_malloc_r+0xa8>
 800a10e:	230c      	movs	r3, #12
 800a110:	6033      	str	r3, [r6, #0]
 800a112:	4630      	mov	r0, r6
 800a114:	f000 f80c 	bl	800a130 <__malloc_unlock>
 800a118:	e794      	b.n	800a044 <_malloc_r+0x20>
 800a11a:	6005      	str	r5, [r0, #0]
 800a11c:	e7d6      	b.n	800a0cc <_malloc_r+0xa8>
 800a11e:	bf00      	nop
 800a120:	2400040c 	.word	0x2400040c

0800a124 <__malloc_lock>:
 800a124:	4801      	ldr	r0, [pc, #4]	@ (800a12c <__malloc_lock+0x8>)
 800a126:	f7ff bf0e 	b.w	8009f46 <__retarget_lock_acquire_recursive>
 800a12a:	bf00      	nop
 800a12c:	24000404 	.word	0x24000404

0800a130 <__malloc_unlock>:
 800a130:	4801      	ldr	r0, [pc, #4]	@ (800a138 <__malloc_unlock+0x8>)
 800a132:	f7ff bf09 	b.w	8009f48 <__retarget_lock_release_recursive>
 800a136:	bf00      	nop
 800a138:	24000404 	.word	0x24000404

0800a13c <__sfputc_r>:
 800a13c:	6893      	ldr	r3, [r2, #8]
 800a13e:	3b01      	subs	r3, #1
 800a140:	2b00      	cmp	r3, #0
 800a142:	b410      	push	{r4}
 800a144:	6093      	str	r3, [r2, #8]
 800a146:	da08      	bge.n	800a15a <__sfputc_r+0x1e>
 800a148:	6994      	ldr	r4, [r2, #24]
 800a14a:	42a3      	cmp	r3, r4
 800a14c:	db01      	blt.n	800a152 <__sfputc_r+0x16>
 800a14e:	290a      	cmp	r1, #10
 800a150:	d103      	bne.n	800a15a <__sfputc_r+0x1e>
 800a152:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a156:	f000 bb6d 	b.w	800a834 <__swbuf_r>
 800a15a:	6813      	ldr	r3, [r2, #0]
 800a15c:	1c58      	adds	r0, r3, #1
 800a15e:	6010      	str	r0, [r2, #0]
 800a160:	7019      	strb	r1, [r3, #0]
 800a162:	4608      	mov	r0, r1
 800a164:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a168:	4770      	bx	lr

0800a16a <__sfputs_r>:
 800a16a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16c:	4606      	mov	r6, r0
 800a16e:	460f      	mov	r7, r1
 800a170:	4614      	mov	r4, r2
 800a172:	18d5      	adds	r5, r2, r3
 800a174:	42ac      	cmp	r4, r5
 800a176:	d101      	bne.n	800a17c <__sfputs_r+0x12>
 800a178:	2000      	movs	r0, #0
 800a17a:	e007      	b.n	800a18c <__sfputs_r+0x22>
 800a17c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a180:	463a      	mov	r2, r7
 800a182:	4630      	mov	r0, r6
 800a184:	f7ff ffda 	bl	800a13c <__sfputc_r>
 800a188:	1c43      	adds	r3, r0, #1
 800a18a:	d1f3      	bne.n	800a174 <__sfputs_r+0xa>
 800a18c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a190 <_vfiprintf_r>:
 800a190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a194:	460d      	mov	r5, r1
 800a196:	b09d      	sub	sp, #116	@ 0x74
 800a198:	4614      	mov	r4, r2
 800a19a:	4698      	mov	r8, r3
 800a19c:	4606      	mov	r6, r0
 800a19e:	b118      	cbz	r0, 800a1a8 <_vfiprintf_r+0x18>
 800a1a0:	6a03      	ldr	r3, [r0, #32]
 800a1a2:	b90b      	cbnz	r3, 800a1a8 <_vfiprintf_r+0x18>
 800a1a4:	f7ff fdca 	bl	8009d3c <__sinit>
 800a1a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1aa:	07d9      	lsls	r1, r3, #31
 800a1ac:	d405      	bmi.n	800a1ba <_vfiprintf_r+0x2a>
 800a1ae:	89ab      	ldrh	r3, [r5, #12]
 800a1b0:	059a      	lsls	r2, r3, #22
 800a1b2:	d402      	bmi.n	800a1ba <_vfiprintf_r+0x2a>
 800a1b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1b6:	f7ff fec6 	bl	8009f46 <__retarget_lock_acquire_recursive>
 800a1ba:	89ab      	ldrh	r3, [r5, #12]
 800a1bc:	071b      	lsls	r3, r3, #28
 800a1be:	d501      	bpl.n	800a1c4 <_vfiprintf_r+0x34>
 800a1c0:	692b      	ldr	r3, [r5, #16]
 800a1c2:	b99b      	cbnz	r3, 800a1ec <_vfiprintf_r+0x5c>
 800a1c4:	4629      	mov	r1, r5
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	f000 fb72 	bl	800a8b0 <__swsetup_r>
 800a1cc:	b170      	cbz	r0, 800a1ec <_vfiprintf_r+0x5c>
 800a1ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1d0:	07dc      	lsls	r4, r3, #31
 800a1d2:	d504      	bpl.n	800a1de <_vfiprintf_r+0x4e>
 800a1d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a1d8:	b01d      	add	sp, #116	@ 0x74
 800a1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1de:	89ab      	ldrh	r3, [r5, #12]
 800a1e0:	0598      	lsls	r0, r3, #22
 800a1e2:	d4f7      	bmi.n	800a1d4 <_vfiprintf_r+0x44>
 800a1e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1e6:	f7ff feaf 	bl	8009f48 <__retarget_lock_release_recursive>
 800a1ea:	e7f3      	b.n	800a1d4 <_vfiprintf_r+0x44>
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1f0:	2320      	movs	r3, #32
 800a1f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a1f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1fa:	2330      	movs	r3, #48	@ 0x30
 800a1fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a3ac <_vfiprintf_r+0x21c>
 800a200:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a204:	f04f 0901 	mov.w	r9, #1
 800a208:	4623      	mov	r3, r4
 800a20a:	469a      	mov	sl, r3
 800a20c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a210:	b10a      	cbz	r2, 800a216 <_vfiprintf_r+0x86>
 800a212:	2a25      	cmp	r2, #37	@ 0x25
 800a214:	d1f9      	bne.n	800a20a <_vfiprintf_r+0x7a>
 800a216:	ebba 0b04 	subs.w	fp, sl, r4
 800a21a:	d00b      	beq.n	800a234 <_vfiprintf_r+0xa4>
 800a21c:	465b      	mov	r3, fp
 800a21e:	4622      	mov	r2, r4
 800a220:	4629      	mov	r1, r5
 800a222:	4630      	mov	r0, r6
 800a224:	f7ff ffa1 	bl	800a16a <__sfputs_r>
 800a228:	3001      	adds	r0, #1
 800a22a:	f000 80a7 	beq.w	800a37c <_vfiprintf_r+0x1ec>
 800a22e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a230:	445a      	add	r2, fp
 800a232:	9209      	str	r2, [sp, #36]	@ 0x24
 800a234:	f89a 3000 	ldrb.w	r3, [sl]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	f000 809f 	beq.w	800a37c <_vfiprintf_r+0x1ec>
 800a23e:	2300      	movs	r3, #0
 800a240:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a244:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a248:	f10a 0a01 	add.w	sl, sl, #1
 800a24c:	9304      	str	r3, [sp, #16]
 800a24e:	9307      	str	r3, [sp, #28]
 800a250:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a254:	931a      	str	r3, [sp, #104]	@ 0x68
 800a256:	4654      	mov	r4, sl
 800a258:	2205      	movs	r2, #5
 800a25a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a25e:	4853      	ldr	r0, [pc, #332]	@ (800a3ac <_vfiprintf_r+0x21c>)
 800a260:	f7f6 f846 	bl	80002f0 <memchr>
 800a264:	9a04      	ldr	r2, [sp, #16]
 800a266:	b9d8      	cbnz	r0, 800a2a0 <_vfiprintf_r+0x110>
 800a268:	06d1      	lsls	r1, r2, #27
 800a26a:	bf44      	itt	mi
 800a26c:	2320      	movmi	r3, #32
 800a26e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a272:	0713      	lsls	r3, r2, #28
 800a274:	bf44      	itt	mi
 800a276:	232b      	movmi	r3, #43	@ 0x2b
 800a278:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a27c:	f89a 3000 	ldrb.w	r3, [sl]
 800a280:	2b2a      	cmp	r3, #42	@ 0x2a
 800a282:	d015      	beq.n	800a2b0 <_vfiprintf_r+0x120>
 800a284:	9a07      	ldr	r2, [sp, #28]
 800a286:	4654      	mov	r4, sl
 800a288:	2000      	movs	r0, #0
 800a28a:	f04f 0c0a 	mov.w	ip, #10
 800a28e:	4621      	mov	r1, r4
 800a290:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a294:	3b30      	subs	r3, #48	@ 0x30
 800a296:	2b09      	cmp	r3, #9
 800a298:	d94b      	bls.n	800a332 <_vfiprintf_r+0x1a2>
 800a29a:	b1b0      	cbz	r0, 800a2ca <_vfiprintf_r+0x13a>
 800a29c:	9207      	str	r2, [sp, #28]
 800a29e:	e014      	b.n	800a2ca <_vfiprintf_r+0x13a>
 800a2a0:	eba0 0308 	sub.w	r3, r0, r8
 800a2a4:	fa09 f303 	lsl.w	r3, r9, r3
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	9304      	str	r3, [sp, #16]
 800a2ac:	46a2      	mov	sl, r4
 800a2ae:	e7d2      	b.n	800a256 <_vfiprintf_r+0xc6>
 800a2b0:	9b03      	ldr	r3, [sp, #12]
 800a2b2:	1d19      	adds	r1, r3, #4
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	9103      	str	r1, [sp, #12]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	bfbb      	ittet	lt
 800a2bc:	425b      	neglt	r3, r3
 800a2be:	f042 0202 	orrlt.w	r2, r2, #2
 800a2c2:	9307      	strge	r3, [sp, #28]
 800a2c4:	9307      	strlt	r3, [sp, #28]
 800a2c6:	bfb8      	it	lt
 800a2c8:	9204      	strlt	r2, [sp, #16]
 800a2ca:	7823      	ldrb	r3, [r4, #0]
 800a2cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2ce:	d10a      	bne.n	800a2e6 <_vfiprintf_r+0x156>
 800a2d0:	7863      	ldrb	r3, [r4, #1]
 800a2d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2d4:	d132      	bne.n	800a33c <_vfiprintf_r+0x1ac>
 800a2d6:	9b03      	ldr	r3, [sp, #12]
 800a2d8:	1d1a      	adds	r2, r3, #4
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	9203      	str	r2, [sp, #12]
 800a2de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a2e2:	3402      	adds	r4, #2
 800a2e4:	9305      	str	r3, [sp, #20]
 800a2e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a3bc <_vfiprintf_r+0x22c>
 800a2ea:	7821      	ldrb	r1, [r4, #0]
 800a2ec:	2203      	movs	r2, #3
 800a2ee:	4650      	mov	r0, sl
 800a2f0:	f7f5 fffe 	bl	80002f0 <memchr>
 800a2f4:	b138      	cbz	r0, 800a306 <_vfiprintf_r+0x176>
 800a2f6:	9b04      	ldr	r3, [sp, #16]
 800a2f8:	eba0 000a 	sub.w	r0, r0, sl
 800a2fc:	2240      	movs	r2, #64	@ 0x40
 800a2fe:	4082      	lsls	r2, r0
 800a300:	4313      	orrs	r3, r2
 800a302:	3401      	adds	r4, #1
 800a304:	9304      	str	r3, [sp, #16]
 800a306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a30a:	4829      	ldr	r0, [pc, #164]	@ (800a3b0 <_vfiprintf_r+0x220>)
 800a30c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a310:	2206      	movs	r2, #6
 800a312:	f7f5 ffed 	bl	80002f0 <memchr>
 800a316:	2800      	cmp	r0, #0
 800a318:	d03f      	beq.n	800a39a <_vfiprintf_r+0x20a>
 800a31a:	4b26      	ldr	r3, [pc, #152]	@ (800a3b4 <_vfiprintf_r+0x224>)
 800a31c:	bb1b      	cbnz	r3, 800a366 <_vfiprintf_r+0x1d6>
 800a31e:	9b03      	ldr	r3, [sp, #12]
 800a320:	3307      	adds	r3, #7
 800a322:	f023 0307 	bic.w	r3, r3, #7
 800a326:	3308      	adds	r3, #8
 800a328:	9303      	str	r3, [sp, #12]
 800a32a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a32c:	443b      	add	r3, r7
 800a32e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a330:	e76a      	b.n	800a208 <_vfiprintf_r+0x78>
 800a332:	fb0c 3202 	mla	r2, ip, r2, r3
 800a336:	460c      	mov	r4, r1
 800a338:	2001      	movs	r0, #1
 800a33a:	e7a8      	b.n	800a28e <_vfiprintf_r+0xfe>
 800a33c:	2300      	movs	r3, #0
 800a33e:	3401      	adds	r4, #1
 800a340:	9305      	str	r3, [sp, #20]
 800a342:	4619      	mov	r1, r3
 800a344:	f04f 0c0a 	mov.w	ip, #10
 800a348:	4620      	mov	r0, r4
 800a34a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a34e:	3a30      	subs	r2, #48	@ 0x30
 800a350:	2a09      	cmp	r2, #9
 800a352:	d903      	bls.n	800a35c <_vfiprintf_r+0x1cc>
 800a354:	2b00      	cmp	r3, #0
 800a356:	d0c6      	beq.n	800a2e6 <_vfiprintf_r+0x156>
 800a358:	9105      	str	r1, [sp, #20]
 800a35a:	e7c4      	b.n	800a2e6 <_vfiprintf_r+0x156>
 800a35c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a360:	4604      	mov	r4, r0
 800a362:	2301      	movs	r3, #1
 800a364:	e7f0      	b.n	800a348 <_vfiprintf_r+0x1b8>
 800a366:	ab03      	add	r3, sp, #12
 800a368:	9300      	str	r3, [sp, #0]
 800a36a:	462a      	mov	r2, r5
 800a36c:	4b12      	ldr	r3, [pc, #72]	@ (800a3b8 <_vfiprintf_r+0x228>)
 800a36e:	a904      	add	r1, sp, #16
 800a370:	4630      	mov	r0, r6
 800a372:	f3af 8000 	nop.w
 800a376:	4607      	mov	r7, r0
 800a378:	1c78      	adds	r0, r7, #1
 800a37a:	d1d6      	bne.n	800a32a <_vfiprintf_r+0x19a>
 800a37c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a37e:	07d9      	lsls	r1, r3, #31
 800a380:	d405      	bmi.n	800a38e <_vfiprintf_r+0x1fe>
 800a382:	89ab      	ldrh	r3, [r5, #12]
 800a384:	059a      	lsls	r2, r3, #22
 800a386:	d402      	bmi.n	800a38e <_vfiprintf_r+0x1fe>
 800a388:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a38a:	f7ff fddd 	bl	8009f48 <__retarget_lock_release_recursive>
 800a38e:	89ab      	ldrh	r3, [r5, #12]
 800a390:	065b      	lsls	r3, r3, #25
 800a392:	f53f af1f 	bmi.w	800a1d4 <_vfiprintf_r+0x44>
 800a396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a398:	e71e      	b.n	800a1d8 <_vfiprintf_r+0x48>
 800a39a:	ab03      	add	r3, sp, #12
 800a39c:	9300      	str	r3, [sp, #0]
 800a39e:	462a      	mov	r2, r5
 800a3a0:	4b05      	ldr	r3, [pc, #20]	@ (800a3b8 <_vfiprintf_r+0x228>)
 800a3a2:	a904      	add	r1, sp, #16
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	f000 f879 	bl	800a49c <_printf_i>
 800a3aa:	e7e4      	b.n	800a376 <_vfiprintf_r+0x1e6>
 800a3ac:	0800aaee 	.word	0x0800aaee
 800a3b0:	0800aaf8 	.word	0x0800aaf8
 800a3b4:	00000000 	.word	0x00000000
 800a3b8:	0800a16b 	.word	0x0800a16b
 800a3bc:	0800aaf4 	.word	0x0800aaf4

0800a3c0 <_printf_common>:
 800a3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3c4:	4616      	mov	r6, r2
 800a3c6:	4698      	mov	r8, r3
 800a3c8:	688a      	ldr	r2, [r1, #8]
 800a3ca:	690b      	ldr	r3, [r1, #16]
 800a3cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	bfb8      	it	lt
 800a3d4:	4613      	movlt	r3, r2
 800a3d6:	6033      	str	r3, [r6, #0]
 800a3d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a3dc:	4607      	mov	r7, r0
 800a3de:	460c      	mov	r4, r1
 800a3e0:	b10a      	cbz	r2, 800a3e6 <_printf_common+0x26>
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	6033      	str	r3, [r6, #0]
 800a3e6:	6823      	ldr	r3, [r4, #0]
 800a3e8:	0699      	lsls	r1, r3, #26
 800a3ea:	bf42      	ittt	mi
 800a3ec:	6833      	ldrmi	r3, [r6, #0]
 800a3ee:	3302      	addmi	r3, #2
 800a3f0:	6033      	strmi	r3, [r6, #0]
 800a3f2:	6825      	ldr	r5, [r4, #0]
 800a3f4:	f015 0506 	ands.w	r5, r5, #6
 800a3f8:	d106      	bne.n	800a408 <_printf_common+0x48>
 800a3fa:	f104 0a19 	add.w	sl, r4, #25
 800a3fe:	68e3      	ldr	r3, [r4, #12]
 800a400:	6832      	ldr	r2, [r6, #0]
 800a402:	1a9b      	subs	r3, r3, r2
 800a404:	42ab      	cmp	r3, r5
 800a406:	dc26      	bgt.n	800a456 <_printf_common+0x96>
 800a408:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a40c:	6822      	ldr	r2, [r4, #0]
 800a40e:	3b00      	subs	r3, #0
 800a410:	bf18      	it	ne
 800a412:	2301      	movne	r3, #1
 800a414:	0692      	lsls	r2, r2, #26
 800a416:	d42b      	bmi.n	800a470 <_printf_common+0xb0>
 800a418:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a41c:	4641      	mov	r1, r8
 800a41e:	4638      	mov	r0, r7
 800a420:	47c8      	blx	r9
 800a422:	3001      	adds	r0, #1
 800a424:	d01e      	beq.n	800a464 <_printf_common+0xa4>
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	6922      	ldr	r2, [r4, #16]
 800a42a:	f003 0306 	and.w	r3, r3, #6
 800a42e:	2b04      	cmp	r3, #4
 800a430:	bf02      	ittt	eq
 800a432:	68e5      	ldreq	r5, [r4, #12]
 800a434:	6833      	ldreq	r3, [r6, #0]
 800a436:	1aed      	subeq	r5, r5, r3
 800a438:	68a3      	ldr	r3, [r4, #8]
 800a43a:	bf0c      	ite	eq
 800a43c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a440:	2500      	movne	r5, #0
 800a442:	4293      	cmp	r3, r2
 800a444:	bfc4      	itt	gt
 800a446:	1a9b      	subgt	r3, r3, r2
 800a448:	18ed      	addgt	r5, r5, r3
 800a44a:	2600      	movs	r6, #0
 800a44c:	341a      	adds	r4, #26
 800a44e:	42b5      	cmp	r5, r6
 800a450:	d11a      	bne.n	800a488 <_printf_common+0xc8>
 800a452:	2000      	movs	r0, #0
 800a454:	e008      	b.n	800a468 <_printf_common+0xa8>
 800a456:	2301      	movs	r3, #1
 800a458:	4652      	mov	r2, sl
 800a45a:	4641      	mov	r1, r8
 800a45c:	4638      	mov	r0, r7
 800a45e:	47c8      	blx	r9
 800a460:	3001      	adds	r0, #1
 800a462:	d103      	bne.n	800a46c <_printf_common+0xac>
 800a464:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a46c:	3501      	adds	r5, #1
 800a46e:	e7c6      	b.n	800a3fe <_printf_common+0x3e>
 800a470:	18e1      	adds	r1, r4, r3
 800a472:	1c5a      	adds	r2, r3, #1
 800a474:	2030      	movs	r0, #48	@ 0x30
 800a476:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a47a:	4422      	add	r2, r4
 800a47c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a480:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a484:	3302      	adds	r3, #2
 800a486:	e7c7      	b.n	800a418 <_printf_common+0x58>
 800a488:	2301      	movs	r3, #1
 800a48a:	4622      	mov	r2, r4
 800a48c:	4641      	mov	r1, r8
 800a48e:	4638      	mov	r0, r7
 800a490:	47c8      	blx	r9
 800a492:	3001      	adds	r0, #1
 800a494:	d0e6      	beq.n	800a464 <_printf_common+0xa4>
 800a496:	3601      	adds	r6, #1
 800a498:	e7d9      	b.n	800a44e <_printf_common+0x8e>
	...

0800a49c <_printf_i>:
 800a49c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4a0:	7e0f      	ldrb	r7, [r1, #24]
 800a4a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a4a4:	2f78      	cmp	r7, #120	@ 0x78
 800a4a6:	4691      	mov	r9, r2
 800a4a8:	4680      	mov	r8, r0
 800a4aa:	460c      	mov	r4, r1
 800a4ac:	469a      	mov	sl, r3
 800a4ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a4b2:	d807      	bhi.n	800a4c4 <_printf_i+0x28>
 800a4b4:	2f62      	cmp	r7, #98	@ 0x62
 800a4b6:	d80a      	bhi.n	800a4ce <_printf_i+0x32>
 800a4b8:	2f00      	cmp	r7, #0
 800a4ba:	f000 80d2 	beq.w	800a662 <_printf_i+0x1c6>
 800a4be:	2f58      	cmp	r7, #88	@ 0x58
 800a4c0:	f000 80b9 	beq.w	800a636 <_printf_i+0x19a>
 800a4c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a4c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a4cc:	e03a      	b.n	800a544 <_printf_i+0xa8>
 800a4ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a4d2:	2b15      	cmp	r3, #21
 800a4d4:	d8f6      	bhi.n	800a4c4 <_printf_i+0x28>
 800a4d6:	a101      	add	r1, pc, #4	@ (adr r1, 800a4dc <_printf_i+0x40>)
 800a4d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4dc:	0800a535 	.word	0x0800a535
 800a4e0:	0800a549 	.word	0x0800a549
 800a4e4:	0800a4c5 	.word	0x0800a4c5
 800a4e8:	0800a4c5 	.word	0x0800a4c5
 800a4ec:	0800a4c5 	.word	0x0800a4c5
 800a4f0:	0800a4c5 	.word	0x0800a4c5
 800a4f4:	0800a549 	.word	0x0800a549
 800a4f8:	0800a4c5 	.word	0x0800a4c5
 800a4fc:	0800a4c5 	.word	0x0800a4c5
 800a500:	0800a4c5 	.word	0x0800a4c5
 800a504:	0800a4c5 	.word	0x0800a4c5
 800a508:	0800a649 	.word	0x0800a649
 800a50c:	0800a573 	.word	0x0800a573
 800a510:	0800a603 	.word	0x0800a603
 800a514:	0800a4c5 	.word	0x0800a4c5
 800a518:	0800a4c5 	.word	0x0800a4c5
 800a51c:	0800a66b 	.word	0x0800a66b
 800a520:	0800a4c5 	.word	0x0800a4c5
 800a524:	0800a573 	.word	0x0800a573
 800a528:	0800a4c5 	.word	0x0800a4c5
 800a52c:	0800a4c5 	.word	0x0800a4c5
 800a530:	0800a60b 	.word	0x0800a60b
 800a534:	6833      	ldr	r3, [r6, #0]
 800a536:	1d1a      	adds	r2, r3, #4
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	6032      	str	r2, [r6, #0]
 800a53c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a540:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a544:	2301      	movs	r3, #1
 800a546:	e09d      	b.n	800a684 <_printf_i+0x1e8>
 800a548:	6833      	ldr	r3, [r6, #0]
 800a54a:	6820      	ldr	r0, [r4, #0]
 800a54c:	1d19      	adds	r1, r3, #4
 800a54e:	6031      	str	r1, [r6, #0]
 800a550:	0606      	lsls	r6, r0, #24
 800a552:	d501      	bpl.n	800a558 <_printf_i+0xbc>
 800a554:	681d      	ldr	r5, [r3, #0]
 800a556:	e003      	b.n	800a560 <_printf_i+0xc4>
 800a558:	0645      	lsls	r5, r0, #25
 800a55a:	d5fb      	bpl.n	800a554 <_printf_i+0xb8>
 800a55c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a560:	2d00      	cmp	r5, #0
 800a562:	da03      	bge.n	800a56c <_printf_i+0xd0>
 800a564:	232d      	movs	r3, #45	@ 0x2d
 800a566:	426d      	negs	r5, r5
 800a568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a56c:	4859      	ldr	r0, [pc, #356]	@ (800a6d4 <_printf_i+0x238>)
 800a56e:	230a      	movs	r3, #10
 800a570:	e011      	b.n	800a596 <_printf_i+0xfa>
 800a572:	6821      	ldr	r1, [r4, #0]
 800a574:	6833      	ldr	r3, [r6, #0]
 800a576:	0608      	lsls	r0, r1, #24
 800a578:	f853 5b04 	ldr.w	r5, [r3], #4
 800a57c:	d402      	bmi.n	800a584 <_printf_i+0xe8>
 800a57e:	0649      	lsls	r1, r1, #25
 800a580:	bf48      	it	mi
 800a582:	b2ad      	uxthmi	r5, r5
 800a584:	2f6f      	cmp	r7, #111	@ 0x6f
 800a586:	4853      	ldr	r0, [pc, #332]	@ (800a6d4 <_printf_i+0x238>)
 800a588:	6033      	str	r3, [r6, #0]
 800a58a:	bf14      	ite	ne
 800a58c:	230a      	movne	r3, #10
 800a58e:	2308      	moveq	r3, #8
 800a590:	2100      	movs	r1, #0
 800a592:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a596:	6866      	ldr	r6, [r4, #4]
 800a598:	60a6      	str	r6, [r4, #8]
 800a59a:	2e00      	cmp	r6, #0
 800a59c:	bfa2      	ittt	ge
 800a59e:	6821      	ldrge	r1, [r4, #0]
 800a5a0:	f021 0104 	bicge.w	r1, r1, #4
 800a5a4:	6021      	strge	r1, [r4, #0]
 800a5a6:	b90d      	cbnz	r5, 800a5ac <_printf_i+0x110>
 800a5a8:	2e00      	cmp	r6, #0
 800a5aa:	d04b      	beq.n	800a644 <_printf_i+0x1a8>
 800a5ac:	4616      	mov	r6, r2
 800a5ae:	fbb5 f1f3 	udiv	r1, r5, r3
 800a5b2:	fb03 5711 	mls	r7, r3, r1, r5
 800a5b6:	5dc7      	ldrb	r7, [r0, r7]
 800a5b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a5bc:	462f      	mov	r7, r5
 800a5be:	42bb      	cmp	r3, r7
 800a5c0:	460d      	mov	r5, r1
 800a5c2:	d9f4      	bls.n	800a5ae <_printf_i+0x112>
 800a5c4:	2b08      	cmp	r3, #8
 800a5c6:	d10b      	bne.n	800a5e0 <_printf_i+0x144>
 800a5c8:	6823      	ldr	r3, [r4, #0]
 800a5ca:	07df      	lsls	r7, r3, #31
 800a5cc:	d508      	bpl.n	800a5e0 <_printf_i+0x144>
 800a5ce:	6923      	ldr	r3, [r4, #16]
 800a5d0:	6861      	ldr	r1, [r4, #4]
 800a5d2:	4299      	cmp	r1, r3
 800a5d4:	bfde      	ittt	le
 800a5d6:	2330      	movle	r3, #48	@ 0x30
 800a5d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a5dc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a5e0:	1b92      	subs	r2, r2, r6
 800a5e2:	6122      	str	r2, [r4, #16]
 800a5e4:	f8cd a000 	str.w	sl, [sp]
 800a5e8:	464b      	mov	r3, r9
 800a5ea:	aa03      	add	r2, sp, #12
 800a5ec:	4621      	mov	r1, r4
 800a5ee:	4640      	mov	r0, r8
 800a5f0:	f7ff fee6 	bl	800a3c0 <_printf_common>
 800a5f4:	3001      	adds	r0, #1
 800a5f6:	d14a      	bne.n	800a68e <_printf_i+0x1f2>
 800a5f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a5fc:	b004      	add	sp, #16
 800a5fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a602:	6823      	ldr	r3, [r4, #0]
 800a604:	f043 0320 	orr.w	r3, r3, #32
 800a608:	6023      	str	r3, [r4, #0]
 800a60a:	4833      	ldr	r0, [pc, #204]	@ (800a6d8 <_printf_i+0x23c>)
 800a60c:	2778      	movs	r7, #120	@ 0x78
 800a60e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a612:	6823      	ldr	r3, [r4, #0]
 800a614:	6831      	ldr	r1, [r6, #0]
 800a616:	061f      	lsls	r7, r3, #24
 800a618:	f851 5b04 	ldr.w	r5, [r1], #4
 800a61c:	d402      	bmi.n	800a624 <_printf_i+0x188>
 800a61e:	065f      	lsls	r7, r3, #25
 800a620:	bf48      	it	mi
 800a622:	b2ad      	uxthmi	r5, r5
 800a624:	6031      	str	r1, [r6, #0]
 800a626:	07d9      	lsls	r1, r3, #31
 800a628:	bf44      	itt	mi
 800a62a:	f043 0320 	orrmi.w	r3, r3, #32
 800a62e:	6023      	strmi	r3, [r4, #0]
 800a630:	b11d      	cbz	r5, 800a63a <_printf_i+0x19e>
 800a632:	2310      	movs	r3, #16
 800a634:	e7ac      	b.n	800a590 <_printf_i+0xf4>
 800a636:	4827      	ldr	r0, [pc, #156]	@ (800a6d4 <_printf_i+0x238>)
 800a638:	e7e9      	b.n	800a60e <_printf_i+0x172>
 800a63a:	6823      	ldr	r3, [r4, #0]
 800a63c:	f023 0320 	bic.w	r3, r3, #32
 800a640:	6023      	str	r3, [r4, #0]
 800a642:	e7f6      	b.n	800a632 <_printf_i+0x196>
 800a644:	4616      	mov	r6, r2
 800a646:	e7bd      	b.n	800a5c4 <_printf_i+0x128>
 800a648:	6833      	ldr	r3, [r6, #0]
 800a64a:	6825      	ldr	r5, [r4, #0]
 800a64c:	6961      	ldr	r1, [r4, #20]
 800a64e:	1d18      	adds	r0, r3, #4
 800a650:	6030      	str	r0, [r6, #0]
 800a652:	062e      	lsls	r6, r5, #24
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	d501      	bpl.n	800a65c <_printf_i+0x1c0>
 800a658:	6019      	str	r1, [r3, #0]
 800a65a:	e002      	b.n	800a662 <_printf_i+0x1c6>
 800a65c:	0668      	lsls	r0, r5, #25
 800a65e:	d5fb      	bpl.n	800a658 <_printf_i+0x1bc>
 800a660:	8019      	strh	r1, [r3, #0]
 800a662:	2300      	movs	r3, #0
 800a664:	6123      	str	r3, [r4, #16]
 800a666:	4616      	mov	r6, r2
 800a668:	e7bc      	b.n	800a5e4 <_printf_i+0x148>
 800a66a:	6833      	ldr	r3, [r6, #0]
 800a66c:	1d1a      	adds	r2, r3, #4
 800a66e:	6032      	str	r2, [r6, #0]
 800a670:	681e      	ldr	r6, [r3, #0]
 800a672:	6862      	ldr	r2, [r4, #4]
 800a674:	2100      	movs	r1, #0
 800a676:	4630      	mov	r0, r6
 800a678:	f7f5 fe3a 	bl	80002f0 <memchr>
 800a67c:	b108      	cbz	r0, 800a682 <_printf_i+0x1e6>
 800a67e:	1b80      	subs	r0, r0, r6
 800a680:	6060      	str	r0, [r4, #4]
 800a682:	6863      	ldr	r3, [r4, #4]
 800a684:	6123      	str	r3, [r4, #16]
 800a686:	2300      	movs	r3, #0
 800a688:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a68c:	e7aa      	b.n	800a5e4 <_printf_i+0x148>
 800a68e:	6923      	ldr	r3, [r4, #16]
 800a690:	4632      	mov	r2, r6
 800a692:	4649      	mov	r1, r9
 800a694:	4640      	mov	r0, r8
 800a696:	47d0      	blx	sl
 800a698:	3001      	adds	r0, #1
 800a69a:	d0ad      	beq.n	800a5f8 <_printf_i+0x15c>
 800a69c:	6823      	ldr	r3, [r4, #0]
 800a69e:	079b      	lsls	r3, r3, #30
 800a6a0:	d413      	bmi.n	800a6ca <_printf_i+0x22e>
 800a6a2:	68e0      	ldr	r0, [r4, #12]
 800a6a4:	9b03      	ldr	r3, [sp, #12]
 800a6a6:	4298      	cmp	r0, r3
 800a6a8:	bfb8      	it	lt
 800a6aa:	4618      	movlt	r0, r3
 800a6ac:	e7a6      	b.n	800a5fc <_printf_i+0x160>
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	4632      	mov	r2, r6
 800a6b2:	4649      	mov	r1, r9
 800a6b4:	4640      	mov	r0, r8
 800a6b6:	47d0      	blx	sl
 800a6b8:	3001      	adds	r0, #1
 800a6ba:	d09d      	beq.n	800a5f8 <_printf_i+0x15c>
 800a6bc:	3501      	adds	r5, #1
 800a6be:	68e3      	ldr	r3, [r4, #12]
 800a6c0:	9903      	ldr	r1, [sp, #12]
 800a6c2:	1a5b      	subs	r3, r3, r1
 800a6c4:	42ab      	cmp	r3, r5
 800a6c6:	dcf2      	bgt.n	800a6ae <_printf_i+0x212>
 800a6c8:	e7eb      	b.n	800a6a2 <_printf_i+0x206>
 800a6ca:	2500      	movs	r5, #0
 800a6cc:	f104 0619 	add.w	r6, r4, #25
 800a6d0:	e7f5      	b.n	800a6be <_printf_i+0x222>
 800a6d2:	bf00      	nop
 800a6d4:	0800aaff 	.word	0x0800aaff
 800a6d8:	0800ab10 	.word	0x0800ab10

0800a6dc <__sflush_r>:
 800a6dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6e4:	0716      	lsls	r6, r2, #28
 800a6e6:	4605      	mov	r5, r0
 800a6e8:	460c      	mov	r4, r1
 800a6ea:	d454      	bmi.n	800a796 <__sflush_r+0xba>
 800a6ec:	684b      	ldr	r3, [r1, #4]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	dc02      	bgt.n	800a6f8 <__sflush_r+0x1c>
 800a6f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	dd48      	ble.n	800a78a <__sflush_r+0xae>
 800a6f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a6fa:	2e00      	cmp	r6, #0
 800a6fc:	d045      	beq.n	800a78a <__sflush_r+0xae>
 800a6fe:	2300      	movs	r3, #0
 800a700:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a704:	682f      	ldr	r7, [r5, #0]
 800a706:	6a21      	ldr	r1, [r4, #32]
 800a708:	602b      	str	r3, [r5, #0]
 800a70a:	d030      	beq.n	800a76e <__sflush_r+0x92>
 800a70c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a70e:	89a3      	ldrh	r3, [r4, #12]
 800a710:	0759      	lsls	r1, r3, #29
 800a712:	d505      	bpl.n	800a720 <__sflush_r+0x44>
 800a714:	6863      	ldr	r3, [r4, #4]
 800a716:	1ad2      	subs	r2, r2, r3
 800a718:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a71a:	b10b      	cbz	r3, 800a720 <__sflush_r+0x44>
 800a71c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a71e:	1ad2      	subs	r2, r2, r3
 800a720:	2300      	movs	r3, #0
 800a722:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a724:	6a21      	ldr	r1, [r4, #32]
 800a726:	4628      	mov	r0, r5
 800a728:	47b0      	blx	r6
 800a72a:	1c43      	adds	r3, r0, #1
 800a72c:	89a3      	ldrh	r3, [r4, #12]
 800a72e:	d106      	bne.n	800a73e <__sflush_r+0x62>
 800a730:	6829      	ldr	r1, [r5, #0]
 800a732:	291d      	cmp	r1, #29
 800a734:	d82b      	bhi.n	800a78e <__sflush_r+0xb2>
 800a736:	4a2a      	ldr	r2, [pc, #168]	@ (800a7e0 <__sflush_r+0x104>)
 800a738:	410a      	asrs	r2, r1
 800a73a:	07d6      	lsls	r6, r2, #31
 800a73c:	d427      	bmi.n	800a78e <__sflush_r+0xb2>
 800a73e:	2200      	movs	r2, #0
 800a740:	6062      	str	r2, [r4, #4]
 800a742:	04d9      	lsls	r1, r3, #19
 800a744:	6922      	ldr	r2, [r4, #16]
 800a746:	6022      	str	r2, [r4, #0]
 800a748:	d504      	bpl.n	800a754 <__sflush_r+0x78>
 800a74a:	1c42      	adds	r2, r0, #1
 800a74c:	d101      	bne.n	800a752 <__sflush_r+0x76>
 800a74e:	682b      	ldr	r3, [r5, #0]
 800a750:	b903      	cbnz	r3, 800a754 <__sflush_r+0x78>
 800a752:	6560      	str	r0, [r4, #84]	@ 0x54
 800a754:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a756:	602f      	str	r7, [r5, #0]
 800a758:	b1b9      	cbz	r1, 800a78a <__sflush_r+0xae>
 800a75a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a75e:	4299      	cmp	r1, r3
 800a760:	d002      	beq.n	800a768 <__sflush_r+0x8c>
 800a762:	4628      	mov	r0, r5
 800a764:	f7ff fbf2 	bl	8009f4c <_free_r>
 800a768:	2300      	movs	r3, #0
 800a76a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a76c:	e00d      	b.n	800a78a <__sflush_r+0xae>
 800a76e:	2301      	movs	r3, #1
 800a770:	4628      	mov	r0, r5
 800a772:	47b0      	blx	r6
 800a774:	4602      	mov	r2, r0
 800a776:	1c50      	adds	r0, r2, #1
 800a778:	d1c9      	bne.n	800a70e <__sflush_r+0x32>
 800a77a:	682b      	ldr	r3, [r5, #0]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d0c6      	beq.n	800a70e <__sflush_r+0x32>
 800a780:	2b1d      	cmp	r3, #29
 800a782:	d001      	beq.n	800a788 <__sflush_r+0xac>
 800a784:	2b16      	cmp	r3, #22
 800a786:	d11e      	bne.n	800a7c6 <__sflush_r+0xea>
 800a788:	602f      	str	r7, [r5, #0]
 800a78a:	2000      	movs	r0, #0
 800a78c:	e022      	b.n	800a7d4 <__sflush_r+0xf8>
 800a78e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a792:	b21b      	sxth	r3, r3
 800a794:	e01b      	b.n	800a7ce <__sflush_r+0xf2>
 800a796:	690f      	ldr	r7, [r1, #16]
 800a798:	2f00      	cmp	r7, #0
 800a79a:	d0f6      	beq.n	800a78a <__sflush_r+0xae>
 800a79c:	0793      	lsls	r3, r2, #30
 800a79e:	680e      	ldr	r6, [r1, #0]
 800a7a0:	bf08      	it	eq
 800a7a2:	694b      	ldreq	r3, [r1, #20]
 800a7a4:	600f      	str	r7, [r1, #0]
 800a7a6:	bf18      	it	ne
 800a7a8:	2300      	movne	r3, #0
 800a7aa:	eba6 0807 	sub.w	r8, r6, r7
 800a7ae:	608b      	str	r3, [r1, #8]
 800a7b0:	f1b8 0f00 	cmp.w	r8, #0
 800a7b4:	dde9      	ble.n	800a78a <__sflush_r+0xae>
 800a7b6:	6a21      	ldr	r1, [r4, #32]
 800a7b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a7ba:	4643      	mov	r3, r8
 800a7bc:	463a      	mov	r2, r7
 800a7be:	4628      	mov	r0, r5
 800a7c0:	47b0      	blx	r6
 800a7c2:	2800      	cmp	r0, #0
 800a7c4:	dc08      	bgt.n	800a7d8 <__sflush_r+0xfc>
 800a7c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7ce:	81a3      	strh	r3, [r4, #12]
 800a7d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7d8:	4407      	add	r7, r0
 800a7da:	eba8 0800 	sub.w	r8, r8, r0
 800a7de:	e7e7      	b.n	800a7b0 <__sflush_r+0xd4>
 800a7e0:	dfbffffe 	.word	0xdfbffffe

0800a7e4 <_fflush_r>:
 800a7e4:	b538      	push	{r3, r4, r5, lr}
 800a7e6:	690b      	ldr	r3, [r1, #16]
 800a7e8:	4605      	mov	r5, r0
 800a7ea:	460c      	mov	r4, r1
 800a7ec:	b913      	cbnz	r3, 800a7f4 <_fflush_r+0x10>
 800a7ee:	2500      	movs	r5, #0
 800a7f0:	4628      	mov	r0, r5
 800a7f2:	bd38      	pop	{r3, r4, r5, pc}
 800a7f4:	b118      	cbz	r0, 800a7fe <_fflush_r+0x1a>
 800a7f6:	6a03      	ldr	r3, [r0, #32]
 800a7f8:	b90b      	cbnz	r3, 800a7fe <_fflush_r+0x1a>
 800a7fa:	f7ff fa9f 	bl	8009d3c <__sinit>
 800a7fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d0f3      	beq.n	800a7ee <_fflush_r+0xa>
 800a806:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a808:	07d0      	lsls	r0, r2, #31
 800a80a:	d404      	bmi.n	800a816 <_fflush_r+0x32>
 800a80c:	0599      	lsls	r1, r3, #22
 800a80e:	d402      	bmi.n	800a816 <_fflush_r+0x32>
 800a810:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a812:	f7ff fb98 	bl	8009f46 <__retarget_lock_acquire_recursive>
 800a816:	4628      	mov	r0, r5
 800a818:	4621      	mov	r1, r4
 800a81a:	f7ff ff5f 	bl	800a6dc <__sflush_r>
 800a81e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a820:	07da      	lsls	r2, r3, #31
 800a822:	4605      	mov	r5, r0
 800a824:	d4e4      	bmi.n	800a7f0 <_fflush_r+0xc>
 800a826:	89a3      	ldrh	r3, [r4, #12]
 800a828:	059b      	lsls	r3, r3, #22
 800a82a:	d4e1      	bmi.n	800a7f0 <_fflush_r+0xc>
 800a82c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a82e:	f7ff fb8b 	bl	8009f48 <__retarget_lock_release_recursive>
 800a832:	e7dd      	b.n	800a7f0 <_fflush_r+0xc>

0800a834 <__swbuf_r>:
 800a834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a836:	460e      	mov	r6, r1
 800a838:	4614      	mov	r4, r2
 800a83a:	4605      	mov	r5, r0
 800a83c:	b118      	cbz	r0, 800a846 <__swbuf_r+0x12>
 800a83e:	6a03      	ldr	r3, [r0, #32]
 800a840:	b90b      	cbnz	r3, 800a846 <__swbuf_r+0x12>
 800a842:	f7ff fa7b 	bl	8009d3c <__sinit>
 800a846:	69a3      	ldr	r3, [r4, #24]
 800a848:	60a3      	str	r3, [r4, #8]
 800a84a:	89a3      	ldrh	r3, [r4, #12]
 800a84c:	071a      	lsls	r2, r3, #28
 800a84e:	d501      	bpl.n	800a854 <__swbuf_r+0x20>
 800a850:	6923      	ldr	r3, [r4, #16]
 800a852:	b943      	cbnz	r3, 800a866 <__swbuf_r+0x32>
 800a854:	4621      	mov	r1, r4
 800a856:	4628      	mov	r0, r5
 800a858:	f000 f82a 	bl	800a8b0 <__swsetup_r>
 800a85c:	b118      	cbz	r0, 800a866 <__swbuf_r+0x32>
 800a85e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a862:	4638      	mov	r0, r7
 800a864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a866:	6823      	ldr	r3, [r4, #0]
 800a868:	6922      	ldr	r2, [r4, #16]
 800a86a:	1a98      	subs	r0, r3, r2
 800a86c:	6963      	ldr	r3, [r4, #20]
 800a86e:	b2f6      	uxtb	r6, r6
 800a870:	4283      	cmp	r3, r0
 800a872:	4637      	mov	r7, r6
 800a874:	dc05      	bgt.n	800a882 <__swbuf_r+0x4e>
 800a876:	4621      	mov	r1, r4
 800a878:	4628      	mov	r0, r5
 800a87a:	f7ff ffb3 	bl	800a7e4 <_fflush_r>
 800a87e:	2800      	cmp	r0, #0
 800a880:	d1ed      	bne.n	800a85e <__swbuf_r+0x2a>
 800a882:	68a3      	ldr	r3, [r4, #8]
 800a884:	3b01      	subs	r3, #1
 800a886:	60a3      	str	r3, [r4, #8]
 800a888:	6823      	ldr	r3, [r4, #0]
 800a88a:	1c5a      	adds	r2, r3, #1
 800a88c:	6022      	str	r2, [r4, #0]
 800a88e:	701e      	strb	r6, [r3, #0]
 800a890:	6962      	ldr	r2, [r4, #20]
 800a892:	1c43      	adds	r3, r0, #1
 800a894:	429a      	cmp	r2, r3
 800a896:	d004      	beq.n	800a8a2 <__swbuf_r+0x6e>
 800a898:	89a3      	ldrh	r3, [r4, #12]
 800a89a:	07db      	lsls	r3, r3, #31
 800a89c:	d5e1      	bpl.n	800a862 <__swbuf_r+0x2e>
 800a89e:	2e0a      	cmp	r6, #10
 800a8a0:	d1df      	bne.n	800a862 <__swbuf_r+0x2e>
 800a8a2:	4621      	mov	r1, r4
 800a8a4:	4628      	mov	r0, r5
 800a8a6:	f7ff ff9d 	bl	800a7e4 <_fflush_r>
 800a8aa:	2800      	cmp	r0, #0
 800a8ac:	d0d9      	beq.n	800a862 <__swbuf_r+0x2e>
 800a8ae:	e7d6      	b.n	800a85e <__swbuf_r+0x2a>

0800a8b0 <__swsetup_r>:
 800a8b0:	b538      	push	{r3, r4, r5, lr}
 800a8b2:	4b29      	ldr	r3, [pc, #164]	@ (800a958 <__swsetup_r+0xa8>)
 800a8b4:	4605      	mov	r5, r0
 800a8b6:	6818      	ldr	r0, [r3, #0]
 800a8b8:	460c      	mov	r4, r1
 800a8ba:	b118      	cbz	r0, 800a8c4 <__swsetup_r+0x14>
 800a8bc:	6a03      	ldr	r3, [r0, #32]
 800a8be:	b90b      	cbnz	r3, 800a8c4 <__swsetup_r+0x14>
 800a8c0:	f7ff fa3c 	bl	8009d3c <__sinit>
 800a8c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8c8:	0719      	lsls	r1, r3, #28
 800a8ca:	d422      	bmi.n	800a912 <__swsetup_r+0x62>
 800a8cc:	06da      	lsls	r2, r3, #27
 800a8ce:	d407      	bmi.n	800a8e0 <__swsetup_r+0x30>
 800a8d0:	2209      	movs	r2, #9
 800a8d2:	602a      	str	r2, [r5, #0]
 800a8d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8d8:	81a3      	strh	r3, [r4, #12]
 800a8da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a8de:	e033      	b.n	800a948 <__swsetup_r+0x98>
 800a8e0:	0758      	lsls	r0, r3, #29
 800a8e2:	d512      	bpl.n	800a90a <__swsetup_r+0x5a>
 800a8e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8e6:	b141      	cbz	r1, 800a8fa <__swsetup_r+0x4a>
 800a8e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a8ec:	4299      	cmp	r1, r3
 800a8ee:	d002      	beq.n	800a8f6 <__swsetup_r+0x46>
 800a8f0:	4628      	mov	r0, r5
 800a8f2:	f7ff fb2b 	bl	8009f4c <_free_r>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a8fa:	89a3      	ldrh	r3, [r4, #12]
 800a8fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a900:	81a3      	strh	r3, [r4, #12]
 800a902:	2300      	movs	r3, #0
 800a904:	6063      	str	r3, [r4, #4]
 800a906:	6923      	ldr	r3, [r4, #16]
 800a908:	6023      	str	r3, [r4, #0]
 800a90a:	89a3      	ldrh	r3, [r4, #12]
 800a90c:	f043 0308 	orr.w	r3, r3, #8
 800a910:	81a3      	strh	r3, [r4, #12]
 800a912:	6923      	ldr	r3, [r4, #16]
 800a914:	b94b      	cbnz	r3, 800a92a <__swsetup_r+0x7a>
 800a916:	89a3      	ldrh	r3, [r4, #12]
 800a918:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a91c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a920:	d003      	beq.n	800a92a <__swsetup_r+0x7a>
 800a922:	4621      	mov	r1, r4
 800a924:	4628      	mov	r0, r5
 800a926:	f000 f84f 	bl	800a9c8 <__smakebuf_r>
 800a92a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a92e:	f013 0201 	ands.w	r2, r3, #1
 800a932:	d00a      	beq.n	800a94a <__swsetup_r+0x9a>
 800a934:	2200      	movs	r2, #0
 800a936:	60a2      	str	r2, [r4, #8]
 800a938:	6962      	ldr	r2, [r4, #20]
 800a93a:	4252      	negs	r2, r2
 800a93c:	61a2      	str	r2, [r4, #24]
 800a93e:	6922      	ldr	r2, [r4, #16]
 800a940:	b942      	cbnz	r2, 800a954 <__swsetup_r+0xa4>
 800a942:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a946:	d1c5      	bne.n	800a8d4 <__swsetup_r+0x24>
 800a948:	bd38      	pop	{r3, r4, r5, pc}
 800a94a:	0799      	lsls	r1, r3, #30
 800a94c:	bf58      	it	pl
 800a94e:	6962      	ldrpl	r2, [r4, #20]
 800a950:	60a2      	str	r2, [r4, #8]
 800a952:	e7f4      	b.n	800a93e <__swsetup_r+0x8e>
 800a954:	2000      	movs	r0, #0
 800a956:	e7f7      	b.n	800a948 <__swsetup_r+0x98>
 800a958:	24000024 	.word	0x24000024

0800a95c <_sbrk_r>:
 800a95c:	b538      	push	{r3, r4, r5, lr}
 800a95e:	4d06      	ldr	r5, [pc, #24]	@ (800a978 <_sbrk_r+0x1c>)
 800a960:	2300      	movs	r3, #0
 800a962:	4604      	mov	r4, r0
 800a964:	4608      	mov	r0, r1
 800a966:	602b      	str	r3, [r5, #0]
 800a968:	f7f6 f9dc 	bl	8000d24 <_sbrk>
 800a96c:	1c43      	adds	r3, r0, #1
 800a96e:	d102      	bne.n	800a976 <_sbrk_r+0x1a>
 800a970:	682b      	ldr	r3, [r5, #0]
 800a972:	b103      	cbz	r3, 800a976 <_sbrk_r+0x1a>
 800a974:	6023      	str	r3, [r4, #0]
 800a976:	bd38      	pop	{r3, r4, r5, pc}
 800a978:	24000400 	.word	0x24000400

0800a97c <__swhatbuf_r>:
 800a97c:	b570      	push	{r4, r5, r6, lr}
 800a97e:	460c      	mov	r4, r1
 800a980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a984:	2900      	cmp	r1, #0
 800a986:	b096      	sub	sp, #88	@ 0x58
 800a988:	4615      	mov	r5, r2
 800a98a:	461e      	mov	r6, r3
 800a98c:	da0d      	bge.n	800a9aa <__swhatbuf_r+0x2e>
 800a98e:	89a3      	ldrh	r3, [r4, #12]
 800a990:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a994:	f04f 0100 	mov.w	r1, #0
 800a998:	bf14      	ite	ne
 800a99a:	2340      	movne	r3, #64	@ 0x40
 800a99c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	6031      	str	r1, [r6, #0]
 800a9a4:	602b      	str	r3, [r5, #0]
 800a9a6:	b016      	add	sp, #88	@ 0x58
 800a9a8:	bd70      	pop	{r4, r5, r6, pc}
 800a9aa:	466a      	mov	r2, sp
 800a9ac:	f000 f848 	bl	800aa40 <_fstat_r>
 800a9b0:	2800      	cmp	r0, #0
 800a9b2:	dbec      	blt.n	800a98e <__swhatbuf_r+0x12>
 800a9b4:	9901      	ldr	r1, [sp, #4]
 800a9b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a9ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a9be:	4259      	negs	r1, r3
 800a9c0:	4159      	adcs	r1, r3
 800a9c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a9c6:	e7eb      	b.n	800a9a0 <__swhatbuf_r+0x24>

0800a9c8 <__smakebuf_r>:
 800a9c8:	898b      	ldrh	r3, [r1, #12]
 800a9ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9cc:	079d      	lsls	r5, r3, #30
 800a9ce:	4606      	mov	r6, r0
 800a9d0:	460c      	mov	r4, r1
 800a9d2:	d507      	bpl.n	800a9e4 <__smakebuf_r+0x1c>
 800a9d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a9d8:	6023      	str	r3, [r4, #0]
 800a9da:	6123      	str	r3, [r4, #16]
 800a9dc:	2301      	movs	r3, #1
 800a9de:	6163      	str	r3, [r4, #20]
 800a9e0:	b003      	add	sp, #12
 800a9e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9e4:	ab01      	add	r3, sp, #4
 800a9e6:	466a      	mov	r2, sp
 800a9e8:	f7ff ffc8 	bl	800a97c <__swhatbuf_r>
 800a9ec:	9f00      	ldr	r7, [sp, #0]
 800a9ee:	4605      	mov	r5, r0
 800a9f0:	4639      	mov	r1, r7
 800a9f2:	4630      	mov	r0, r6
 800a9f4:	f7ff fb16 	bl	800a024 <_malloc_r>
 800a9f8:	b948      	cbnz	r0, 800aa0e <__smakebuf_r+0x46>
 800a9fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9fe:	059a      	lsls	r2, r3, #22
 800aa00:	d4ee      	bmi.n	800a9e0 <__smakebuf_r+0x18>
 800aa02:	f023 0303 	bic.w	r3, r3, #3
 800aa06:	f043 0302 	orr.w	r3, r3, #2
 800aa0a:	81a3      	strh	r3, [r4, #12]
 800aa0c:	e7e2      	b.n	800a9d4 <__smakebuf_r+0xc>
 800aa0e:	89a3      	ldrh	r3, [r4, #12]
 800aa10:	6020      	str	r0, [r4, #0]
 800aa12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa16:	81a3      	strh	r3, [r4, #12]
 800aa18:	9b01      	ldr	r3, [sp, #4]
 800aa1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aa1e:	b15b      	cbz	r3, 800aa38 <__smakebuf_r+0x70>
 800aa20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa24:	4630      	mov	r0, r6
 800aa26:	f000 f81d 	bl	800aa64 <_isatty_r>
 800aa2a:	b128      	cbz	r0, 800aa38 <__smakebuf_r+0x70>
 800aa2c:	89a3      	ldrh	r3, [r4, #12]
 800aa2e:	f023 0303 	bic.w	r3, r3, #3
 800aa32:	f043 0301 	orr.w	r3, r3, #1
 800aa36:	81a3      	strh	r3, [r4, #12]
 800aa38:	89a3      	ldrh	r3, [r4, #12]
 800aa3a:	431d      	orrs	r5, r3
 800aa3c:	81a5      	strh	r5, [r4, #12]
 800aa3e:	e7cf      	b.n	800a9e0 <__smakebuf_r+0x18>

0800aa40 <_fstat_r>:
 800aa40:	b538      	push	{r3, r4, r5, lr}
 800aa42:	4d07      	ldr	r5, [pc, #28]	@ (800aa60 <_fstat_r+0x20>)
 800aa44:	2300      	movs	r3, #0
 800aa46:	4604      	mov	r4, r0
 800aa48:	4608      	mov	r0, r1
 800aa4a:	4611      	mov	r1, r2
 800aa4c:	602b      	str	r3, [r5, #0]
 800aa4e:	f7fe ff68 	bl	8009922 <_fstat>
 800aa52:	1c43      	adds	r3, r0, #1
 800aa54:	d102      	bne.n	800aa5c <_fstat_r+0x1c>
 800aa56:	682b      	ldr	r3, [r5, #0]
 800aa58:	b103      	cbz	r3, 800aa5c <_fstat_r+0x1c>
 800aa5a:	6023      	str	r3, [r4, #0]
 800aa5c:	bd38      	pop	{r3, r4, r5, pc}
 800aa5e:	bf00      	nop
 800aa60:	24000400 	.word	0x24000400

0800aa64 <_isatty_r>:
 800aa64:	b538      	push	{r3, r4, r5, lr}
 800aa66:	4d06      	ldr	r5, [pc, #24]	@ (800aa80 <_isatty_r+0x1c>)
 800aa68:	2300      	movs	r3, #0
 800aa6a:	4604      	mov	r4, r0
 800aa6c:	4608      	mov	r0, r1
 800aa6e:	602b      	str	r3, [r5, #0]
 800aa70:	f7ff f8ba 	bl	8009be8 <_isatty>
 800aa74:	1c43      	adds	r3, r0, #1
 800aa76:	d102      	bne.n	800aa7e <_isatty_r+0x1a>
 800aa78:	682b      	ldr	r3, [r5, #0]
 800aa7a:	b103      	cbz	r3, 800aa7e <_isatty_r+0x1a>
 800aa7c:	6023      	str	r3, [r4, #0]
 800aa7e:	bd38      	pop	{r3, r4, r5, pc}
 800aa80:	24000400 	.word	0x24000400

0800aa84 <_init>:
 800aa84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa86:	bf00      	nop
 800aa88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa8a:	bc08      	pop	{r3}
 800aa8c:	469e      	mov	lr, r3
 800aa8e:	4770      	bx	lr

0800aa90 <_fini>:
 800aa90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa92:	bf00      	nop
 800aa94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa96:	bc08      	pop	{r3}
 800aa98:	469e      	mov	lr, r3
 800aa9a:	4770      	bx	lr
