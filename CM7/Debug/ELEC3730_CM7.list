
ELEC3730_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030dc  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003374  08003374  00004374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033a0  080033a0  00005074  2**0
                  CONTENTS
  4 .ARM          00000008  080033a0  080033a0  000043a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033a8  080033a8  00005074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033a8  080033a8  000043a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080033ac  080033ac  000043ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  24000000  080033b0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  24000074  08003424  00005074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240002dc  08003424  000052dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00005074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d809  00000000  00000000  000050a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a1a  00000000  00000000  000128ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  000142c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000967  00000000  00000000  00014ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e708  00000000  00000000  0001585f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf49  00000000  00000000  00053f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001998b3  00000000  00000000  00060eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001fa763  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b58  00000000  00000000  001fa7a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001fe300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000074 	.word	0x24000074
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800335c 	.word	0x0800335c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000078 	.word	0x24000078
 80002d4:	0800335c 	.word	0x0800335c

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002ec:	4b3d      	ldr	r3, [pc, #244]	@ (80003e4 <SystemInit+0xfc>)
 80002ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002f2:	4a3c      	ldr	r2, [pc, #240]	@ (80003e4 <SystemInit+0xfc>)
 80002f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002fc:	4b39      	ldr	r3, [pc, #228]	@ (80003e4 <SystemInit+0xfc>)
 80002fe:	691b      	ldr	r3, [r3, #16]
 8000300:	4a38      	ldr	r2, [pc, #224]	@ (80003e4 <SystemInit+0xfc>)
 8000302:	f043 0310 	orr.w	r3, r3, #16
 8000306:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000308:	4b37      	ldr	r3, [pc, #220]	@ (80003e8 <SystemInit+0x100>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f003 030f 	and.w	r3, r3, #15
 8000310:	2b06      	cmp	r3, #6
 8000312:	d807      	bhi.n	8000324 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000314:	4b34      	ldr	r3, [pc, #208]	@ (80003e8 <SystemInit+0x100>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	f023 030f 	bic.w	r3, r3, #15
 800031c:	4a32      	ldr	r2, [pc, #200]	@ (80003e8 <SystemInit+0x100>)
 800031e:	f043 0307 	orr.w	r3, r3, #7
 8000322:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000324:	4b31      	ldr	r3, [pc, #196]	@ (80003ec <SystemInit+0x104>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a30      	ldr	r2, [pc, #192]	@ (80003ec <SystemInit+0x104>)
 800032a:	f043 0301 	orr.w	r3, r3, #1
 800032e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000330:	4b2e      	ldr	r3, [pc, #184]	@ (80003ec <SystemInit+0x104>)
 8000332:	2200      	movs	r2, #0
 8000334:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000336:	4b2d      	ldr	r3, [pc, #180]	@ (80003ec <SystemInit+0x104>)
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	492c      	ldr	r1, [pc, #176]	@ (80003ec <SystemInit+0x104>)
 800033c:	4b2c      	ldr	r3, [pc, #176]	@ (80003f0 <SystemInit+0x108>)
 800033e:	4013      	ands	r3, r2
 8000340:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000342:	4b29      	ldr	r3, [pc, #164]	@ (80003e8 <SystemInit+0x100>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f003 0308 	and.w	r3, r3, #8
 800034a:	2b00      	cmp	r3, #0
 800034c:	d007      	beq.n	800035e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800034e:	4b26      	ldr	r3, [pc, #152]	@ (80003e8 <SystemInit+0x100>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f023 030f 	bic.w	r3, r3, #15
 8000356:	4a24      	ldr	r2, [pc, #144]	@ (80003e8 <SystemInit+0x100>)
 8000358:	f043 0307 	orr.w	r3, r3, #7
 800035c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800035e:	4b23      	ldr	r3, [pc, #140]	@ (80003ec <SystemInit+0x104>)
 8000360:	2200      	movs	r2, #0
 8000362:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000364:	4b21      	ldr	r3, [pc, #132]	@ (80003ec <SystemInit+0x104>)
 8000366:	2200      	movs	r2, #0
 8000368:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800036a:	4b20      	ldr	r3, [pc, #128]	@ (80003ec <SystemInit+0x104>)
 800036c:	2200      	movs	r2, #0
 800036e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000370:	4b1e      	ldr	r3, [pc, #120]	@ (80003ec <SystemInit+0x104>)
 8000372:	4a20      	ldr	r2, [pc, #128]	@ (80003f4 <SystemInit+0x10c>)
 8000374:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000376:	4b1d      	ldr	r3, [pc, #116]	@ (80003ec <SystemInit+0x104>)
 8000378:	4a1f      	ldr	r2, [pc, #124]	@ (80003f8 <SystemInit+0x110>)
 800037a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800037c:	4b1b      	ldr	r3, [pc, #108]	@ (80003ec <SystemInit+0x104>)
 800037e:	4a1f      	ldr	r2, [pc, #124]	@ (80003fc <SystemInit+0x114>)
 8000380:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000382:	4b1a      	ldr	r3, [pc, #104]	@ (80003ec <SystemInit+0x104>)
 8000384:	2200      	movs	r2, #0
 8000386:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000388:	4b18      	ldr	r3, [pc, #96]	@ (80003ec <SystemInit+0x104>)
 800038a:	4a1c      	ldr	r2, [pc, #112]	@ (80003fc <SystemInit+0x114>)
 800038c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800038e:	4b17      	ldr	r3, [pc, #92]	@ (80003ec <SystemInit+0x104>)
 8000390:	2200      	movs	r2, #0
 8000392:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000394:	4b15      	ldr	r3, [pc, #84]	@ (80003ec <SystemInit+0x104>)
 8000396:	4a19      	ldr	r2, [pc, #100]	@ (80003fc <SystemInit+0x114>)
 8000398:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800039a:	4b14      	ldr	r3, [pc, #80]	@ (80003ec <SystemInit+0x104>)
 800039c:	2200      	movs	r2, #0
 800039e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80003a0:	4b12      	ldr	r3, [pc, #72]	@ (80003ec <SystemInit+0x104>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a11      	ldr	r2, [pc, #68]	@ (80003ec <SystemInit+0x104>)
 80003a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80003aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80003ac:	4b0f      	ldr	r3, [pc, #60]	@ (80003ec <SystemInit+0x104>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003b2:	4b13      	ldr	r3, [pc, #76]	@ (8000400 <SystemInit+0x118>)
 80003b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003b6:	4a12      	ldr	r2, [pc, #72]	@ (8000400 <SystemInit+0x118>)
 80003b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003bc:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003be:	4b11      	ldr	r3, [pc, #68]	@ (8000404 <SystemInit+0x11c>)
 80003c0:	681a      	ldr	r2, [r3, #0]
 80003c2:	4b11      	ldr	r3, [pc, #68]	@ (8000408 <SystemInit+0x120>)
 80003c4:	4013      	ands	r3, r2
 80003c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ca:	d202      	bcs.n	80003d2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003cc:	4b0f      	ldr	r3, [pc, #60]	@ (800040c <SystemInit+0x124>)
 80003ce:	2201      	movs	r2, #1
 80003d0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000410 <SystemInit+0x128>)
 80003d4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003d8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003da:	bf00      	nop
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	e000ed00 	.word	0xe000ed00
 80003e8:	52002000 	.word	0x52002000
 80003ec:	58024400 	.word	0x58024400
 80003f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003f4:	02020200 	.word	0x02020200
 80003f8:	01ff0000 	.word	0x01ff0000
 80003fc:	01010280 	.word	0x01010280
 8000400:	580000c0 	.word	0x580000c0
 8000404:	5c001000 	.word	0x5c001000
 8000408:	ffff0000 	.word	0xffff0000
 800040c:	51008108 	.word	0x51008108
 8000410:	52004000 	.word	0x52004000

08000414 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000418:	4b09      	ldr	r3, [pc, #36]	@ (8000440 <ExitRun0Mode+0x2c>)
 800041a:	68db      	ldr	r3, [r3, #12]
 800041c:	4a08      	ldr	r2, [pc, #32]	@ (8000440 <ExitRun0Mode+0x2c>)
 800041e:	f023 0302 	bic.w	r3, r3, #2
 8000422:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000424:	bf00      	nop
 8000426:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <ExitRun0Mode+0x2c>)
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800042e:	2b00      	cmp	r3, #0
 8000430:	d0f9      	beq.n	8000426 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000432:	bf00      	nop
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	58024800 	.word	0x58024800

08000444 <HAL_GPIO_EXTI_Callback>:

int flagA = 0;
int count = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B2_Pin){
 800044e:	88fb      	ldrh	r3, [r7, #6]
 8000450:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000454:	d104      	bne.n	8000460 <HAL_GPIO_EXTI_Callback+0x1c>
		HAL_GPIO_TogglePin(LEDBlue_GPIO_Port, LEDBlue_Pin);
 8000456:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800045a:	4803      	ldr	r0, [pc, #12]	@ (8000468 <HAL_GPIO_EXTI_Callback+0x24>)
 800045c:	f000 fd95 	bl	8000f8a <HAL_GPIO_TogglePin>
	}

}
 8000460:	bf00      	nop
 8000462:	3708      	adds	r7, #8
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	58022000 	.word	0x58022000

0800046c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800047c:	d102      	bne.n	8000484 <HAL_TIM_PeriodElapsedCallback+0x18>
		flagA = 1;
 800047e:	4b04      	ldr	r3, [pc, #16]	@ (8000490 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000480:	2201      	movs	r2, #1
 8000482:	601a      	str	r2, [r3, #0]
	}

}
 8000484:	bf00      	nop
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr
 8000490:	240000dc 	.word	0x240000dc

08000494 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
		initialise_monitor_handles();
 8000498:	f002 fc7c 	bl	8002d94 <initialise_monitor_handles>
	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800049c:	f000 f9fe 	bl	800089c <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004a0:	f000 f822 	bl	80004e8 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004a4:	f000 f8e8 	bl	8000678 <MX_GPIO_Init>
	MX_TIM2_Init();
 80004a8:	f000 f898 	bl	80005dc <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80004ac:	480a      	ldr	r0, [pc, #40]	@ (80004d8 <main+0x44>)
 80004ae:	f001 fddd 	bl	800206c <HAL_TIM_Base_Start_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(flagA){
 80004b2:	4b0a      	ldr	r3, [pc, #40]	@ (80004dc <main+0x48>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d0fb      	beq.n	80004b2 <main+0x1e>
			// Toggle LEDOrange when interrupt triggered by TIM2
			HAL_GPIO_TogglePin(LEDOrange_GPIO_Port, LEDOrange_Pin);
 80004ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004be:	4808      	ldr	r0, [pc, #32]	@ (80004e0 <main+0x4c>)
 80004c0:	f000 fd63 	bl	8000f8a <HAL_GPIO_TogglePin>
			flagA = 0;
 80004c4:	4b05      	ldr	r3, [pc, #20]	@ (80004dc <main+0x48>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
			count++;
 80004ca:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <main+0x50>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	3301      	adds	r3, #1
 80004d0:	4a04      	ldr	r2, [pc, #16]	@ (80004e4 <main+0x50>)
 80004d2:	6013      	str	r3, [r2, #0]
		if(flagA){
 80004d4:	e7ed      	b.n	80004b2 <main+0x1e>
 80004d6:	bf00      	nop
 80004d8:	24000090 	.word	0x24000090
 80004dc:	240000dc 	.word	0x240000dc
 80004e0:	58022000 	.word	0x58022000
 80004e4:	240000e0 	.word	0x240000e0

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b09c      	sub	sp, #112	@ 0x70
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004f2:	224c      	movs	r2, #76	@ 0x4c
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f002 fdb1 	bl	800305e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2220      	movs	r2, #32
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f002 fdab 	bl	800305e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000508:	2004      	movs	r0, #4
 800050a:	f000 fd73 	bl	8000ff4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800050e:	2300      	movs	r3, #0
 8000510:	603b      	str	r3, [r7, #0]
 8000512:	4b30      	ldr	r3, [pc, #192]	@ (80005d4 <SystemClock_Config+0xec>)
 8000514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000516:	4a2f      	ldr	r2, [pc, #188]	@ (80005d4 <SystemClock_Config+0xec>)
 8000518:	f023 0301 	bic.w	r3, r3, #1
 800051c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800051e:	4b2d      	ldr	r3, [pc, #180]	@ (80005d4 <SystemClock_Config+0xec>)
 8000520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	4b2b      	ldr	r3, [pc, #172]	@ (80005d8 <SystemClock_Config+0xf0>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a2a      	ldr	r2, [pc, #168]	@ (80005d8 <SystemClock_Config+0xf0>)
 800052e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b28      	ldr	r3, [pc, #160]	@ (80005d8 <SystemClock_Config+0xf0>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800053c:	603b      	str	r3, [r7, #0]
 800053e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000540:	bf00      	nop
 8000542:	4b25      	ldr	r3, [pc, #148]	@ (80005d8 <SystemClock_Config+0xf0>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800054a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800054e:	d1f8      	bne.n	8000542 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000550:	2301      	movs	r3, #1
 8000552:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000554:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000558:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055a:	2302      	movs	r3, #2
 800055c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055e:	2302      	movs	r3, #2
 8000560:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000562:	2305      	movs	r3, #5
 8000564:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000566:	23a0      	movs	r3, #160	@ 0xa0
 8000568:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800056a:	2302      	movs	r3, #2
 800056c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800056e:	2305      	movs	r3, #5
 8000570:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000572:	2302      	movs	r3, #2
 8000574:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000576:	2308      	movs	r3, #8
 8000578:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800057a:	2300      	movs	r3, #0
 800057c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000586:	4618      	mov	r0, r3
 8000588:	f000 fd8e 	bl	80010a8 <HAL_RCC_OscConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000592:	f000 f8cf 	bl	8000734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	233f      	movs	r3, #63	@ 0x3f
 8000598:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2303      	movs	r3, #3
 800059c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005a2:	2308      	movs	r3, #8
 80005a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005a6:	2340      	movs	r3, #64	@ 0x40
 80005a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005aa:	2340      	movs	r3, #64	@ 0x40
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005b2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005b4:	2340      	movs	r3, #64	@ 0x40
 80005b6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2102      	movs	r1, #2
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 f9cd 	bl	800195c <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80005c8:	f000 f8b4 	bl	8000734 <Error_Handler>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3770      	adds	r7, #112	@ 0x70
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	58000400 	.word	0x58000400
 80005d8:	58024800 	.word	0x58024800

080005dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005e2:	f107 0310 	add.w	r3, r7, #16
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000674 <MX_TIM2_Init+0x98>)
 80005fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000600:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 8000602:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <MX_TIM2_Init+0x98>)
 8000604:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000608:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800060a:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <MX_TIM2_Init+0x98>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9001;
 8000610:	4b18      	ldr	r3, [pc, #96]	@ (8000674 <MX_TIM2_Init+0x98>)
 8000612:	f242 3229 	movw	r2, #9001	@ 0x2329
 8000616:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000618:	4b16      	ldr	r3, [pc, #88]	@ (8000674 <MX_TIM2_Init+0x98>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800061e:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <MX_TIM2_Init+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000624:	4813      	ldr	r0, [pc, #76]	@ (8000674 <MX_TIM2_Init+0x98>)
 8000626:	f001 fcc9 	bl	8001fbc <HAL_TIM_Base_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000630:	f000 f880 	bl	8000734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000634:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000638:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800063a:	f107 0310 	add.w	r3, r7, #16
 800063e:	4619      	mov	r1, r3
 8000640:	480c      	ldr	r0, [pc, #48]	@ (8000674 <MX_TIM2_Init+0x98>)
 8000642:	f001 fe93 	bl	800236c <HAL_TIM_ConfigClockSource>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800064c:	f000 f872 	bl	8000734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_TIM2_Init+0x98>)
 800065e:	f002 f8e3 	bl	8002828 <HAL_TIMEx_MasterConfigSynchronization>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000668:	f000 f864 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3720      	adds	r7, #32
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	24000090 	.word	0x24000090

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	4b26      	ldr	r3, [pc, #152]	@ (8000728 <MX_GPIO_Init+0xb0>)
 8000690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000694:	4a24      	ldr	r2, [pc, #144]	@ (8000728 <MX_GPIO_Init+0xb0>)
 8000696:	f043 0304 	orr.w	r3, r3, #4
 800069a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800069e:	4b22      	ldr	r3, [pc, #136]	@ (8000728 <MX_GPIO_Init+0xb0>)
 80006a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006a4:	f003 0304 	and.w	r3, r3, #4
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000728 <MX_GPIO_Init+0xb0>)
 80006ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006b2:	4a1d      	ldr	r2, [pc, #116]	@ (8000728 <MX_GPIO_Init+0xb0>)
 80006b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000728 <MX_GPIO_Init+0xb0>)
 80006be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LEDGreen_Pin|LEDOrange_Pin|LEDRed_Pin|LEDBlue_Pin, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80006d0:	4816      	ldr	r0, [pc, #88]	@ (800072c <MX_GPIO_Init+0xb4>)
 80006d2:	f000 fc41 	bl	8000f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 80006d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006dc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006e2:	2302      	movs	r3, #2
 80006e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	4619      	mov	r1, r3
 80006ec:	4810      	ldr	r0, [pc, #64]	@ (8000730 <MX_GPIO_Init+0xb8>)
 80006ee:	f000 fa83 	bl	8000bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDGreen_Pin LEDOrange_Pin LEDRed_Pin LEDBlue_Pin */
  GPIO_InitStruct.Pin = LEDGreen_Pin|LEDOrange_Pin|LEDRed_Pin|LEDBlue_Pin;
 80006f2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80006f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2300      	movs	r3, #0
 8000702:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	4619      	mov	r1, r3
 800070a:	4808      	ldr	r0, [pc, #32]	@ (800072c <MX_GPIO_Init+0xb4>)
 800070c:	f000 fa74 	bl	8000bf8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(B2_EXTI_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	2028      	movs	r0, #40	@ 0x28
 8000716:	f000 fa3a 	bl	8000b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(B2_EXTI_IRQn);
 800071a:	2028      	movs	r0, #40	@ 0x28
 800071c:	f000 fa51 	bl	8000bc2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000720:	bf00      	nop
 8000722:	3720      	adds	r7, #32
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	58024400 	.word	0x58024400
 800072c:	58022000 	.word	0x58022000
 8000730:	58020800 	.word	0x58020800

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <Error_Handler+0x8>

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <HAL_MspInit+0x30>)
 8000748:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800074c:	4a08      	ldr	r2, [pc, #32]	@ (8000770 <HAL_MspInit+0x30>)
 800074e:	f043 0302 	orr.w	r3, r3, #2
 8000752:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <HAL_MspInit+0x30>)
 8000758:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800075c:	f003 0302 	and.w	r3, r3, #2
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	58024400 	.word	0x58024400

08000774 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000784:	d116      	bne.n	80007b4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000786:	4b0d      	ldr	r3, [pc, #52]	@ (80007bc <HAL_TIM_Base_MspInit+0x48>)
 8000788:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800078c:	4a0b      	ldr	r2, [pc, #44]	@ (80007bc <HAL_TIM_Base_MspInit+0x48>)
 800078e:	f043 0301 	orr.w	r3, r3, #1
 8000792:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000796:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <HAL_TIM_Base_MspInit+0x48>)
 8000798:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2100      	movs	r1, #0
 80007a8:	201c      	movs	r0, #28
 80007aa:	f000 f9f0 	bl	8000b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007ae:	201c      	movs	r0, #28
 80007b0:	f000 fa07 	bl	8000bc2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	58024400 	.word	0x58024400

080007c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <NMI_Handler+0x4>

080007c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <HardFault_Handler+0x4>

080007d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <MemManage_Handler+0x4>

080007d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <BusFault_Handler+0x4>

080007e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <UsageFault_Handler+0x4>

080007e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000816:	f000 f8b3 	bl	8000980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000824:	4802      	ldr	r0, [pc, #8]	@ (8000830 <TIM2_IRQHandler+0x10>)
 8000826:	f001 fc99 	bl	800215c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	24000090 	.word	0x24000090

08000834 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8000838:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800083c:	f000 fbbf 	bl	8000fbe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000844:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000880 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000848:	f7ff fde4 	bl	8000414 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800084c:	f7ff fd4c 	bl	80002e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000850:	480c      	ldr	r0, [pc, #48]	@ (8000884 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000852:	490d      	ldr	r1, [pc, #52]	@ (8000888 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000854:	4a0d      	ldr	r2, [pc, #52]	@ (800088c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000858:	e002      	b.n	8000860 <LoopCopyDataInit>

0800085a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800085c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085e:	3304      	adds	r3, #4

08000860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000864:	d3f9      	bcc.n	800085a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000866:	4a0a      	ldr	r2, [pc, #40]	@ (8000890 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000868:	4c0a      	ldr	r4, [pc, #40]	@ (8000894 <LoopFillZerobss+0x22>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800086c:	e001      	b.n	8000872 <LoopFillZerobss>

0800086e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000870:	3204      	adds	r2, #4

08000872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000874:	d3fb      	bcc.n	800086e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000876:	f002 fc47 	bl	8003108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800087a:	f7ff fe0b 	bl	8000494 <main>
  bx  lr
 800087e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000880:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000884:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000888:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 800088c:	080033b0 	.word	0x080033b0
  ldr r2, =_sbss
 8000890:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000894:	240002dc 	.word	0x240002dc

08000898 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <ADC3_IRQHandler>
	...

0800089c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a2:	2003      	movs	r0, #3
 80008a4:	f000 f968 	bl	8000b78 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80008a8:	f001 fa0e 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 80008ac:	4602      	mov	r2, r0
 80008ae:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <HAL_Init+0x68>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	0a1b      	lsrs	r3, r3, #8
 80008b4:	f003 030f 	and.w	r3, r3, #15
 80008b8:	4913      	ldr	r1, [pc, #76]	@ (8000908 <HAL_Init+0x6c>)
 80008ba:	5ccb      	ldrb	r3, [r1, r3]
 80008bc:	f003 031f 	and.w	r3, r3, #31
 80008c0:	fa22 f303 	lsr.w	r3, r2, r3
 80008c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80008c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <HAL_Init+0x68>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	f003 030f 	and.w	r3, r3, #15
 80008ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000908 <HAL_Init+0x6c>)
 80008d0:	5cd3      	ldrb	r3, [r2, r3]
 80008d2:	f003 031f 	and.w	r3, r3, #31
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	fa22 f303 	lsr.w	r3, r2, r3
 80008dc:	4a0b      	ldr	r2, [pc, #44]	@ (800090c <HAL_Init+0x70>)
 80008de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80008e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000910 <HAL_Init+0x74>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008e6:	2000      	movs	r0, #0
 80008e8:	f000 f814 	bl	8000914 <HAL_InitTick>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e002      	b.n	80008fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80008f6:	f7ff ff23 	bl	8000740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008fa:	2300      	movs	r3, #0
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	58024400 	.word	0x58024400
 8000908:	08003374 	.word	0x08003374
 800090c:	24000004 	.word	0x24000004
 8000910:	24000000 	.word	0x24000000

08000914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800091c:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <HAL_InitTick+0x60>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d101      	bne.n	8000928 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000924:	2301      	movs	r3, #1
 8000926:	e021      	b.n	800096c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000928:	4b13      	ldr	r3, [pc, #76]	@ (8000978 <HAL_InitTick+0x64>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <HAL_InitTick+0x60>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	4619      	mov	r1, r3
 8000932:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000936:	fbb3 f3f1 	udiv	r3, r3, r1
 800093a:	fbb2 f3f3 	udiv	r3, r2, r3
 800093e:	4618      	mov	r0, r3
 8000940:	f000 f94d 	bl	8000bde <HAL_SYSTICK_Config>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	e00e      	b.n	800096c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b0f      	cmp	r3, #15
 8000952:	d80a      	bhi.n	800096a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000954:	2200      	movs	r2, #0
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800095c:	f000 f917 	bl	8000b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000960:	4a06      	ldr	r2, [pc, #24]	@ (800097c <HAL_InitTick+0x68>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000966:	2300      	movs	r3, #0
 8000968:	e000      	b.n	800096c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
}
 800096c:	4618      	mov	r0, r3
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2400000c 	.word	0x2400000c
 8000978:	24000000 	.word	0x24000000
 800097c:	24000008 	.word	0x24000008

08000980 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000984:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <HAL_IncTick+0x20>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	461a      	mov	r2, r3
 800098a:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <HAL_IncTick+0x24>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4413      	add	r3, r2
 8000990:	4a04      	ldr	r2, [pc, #16]	@ (80009a4 <HAL_IncTick+0x24>)
 8000992:	6013      	str	r3, [r2, #0]
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	2400000c 	.word	0x2400000c
 80009a4:	240000e4 	.word	0x240000e4

080009a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  return uwTick;
 80009ac:	4b03      	ldr	r3, [pc, #12]	@ (80009bc <HAL_GetTick+0x14>)
 80009ae:	681b      	ldr	r3, [r3, #0]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	240000e4 	.word	0x240000e4

080009c0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80009c4:	4b03      	ldr	r3, [pc, #12]	@ (80009d4 <HAL_GetREVID+0x14>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	0c1b      	lsrs	r3, r3, #16
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	5c001000 	.word	0x5c001000

080009d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <__NVIC_SetPriorityGrouping+0x40>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ee:	68ba      	ldr	r2, [r7, #8]
 80009f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009f4:	4013      	ands	r3, r2
 80009f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a00:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <__NVIC_SetPriorityGrouping+0x44>)
 8000a02:	4313      	orrs	r3, r2
 8000a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a06:	4a04      	ldr	r2, [pc, #16]	@ (8000a18 <__NVIC_SetPriorityGrouping+0x40>)
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	60d3      	str	r3, [r2, #12]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000ed00 	.word	0xe000ed00
 8000a1c:	05fa0000 	.word	0x05fa0000

08000a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a24:	4b04      	ldr	r3, [pc, #16]	@ (8000a38 <__NVIC_GetPriorityGrouping+0x18>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	0a1b      	lsrs	r3, r3, #8
 8000a2a:	f003 0307 	and.w	r3, r3, #7
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	db0b      	blt.n	8000a66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4e:	88fb      	ldrh	r3, [r7, #6]
 8000a50:	f003 021f 	and.w	r2, r3, #31
 8000a54:	4907      	ldr	r1, [pc, #28]	@ (8000a74 <__NVIC_EnableIRQ+0x38>)
 8000a56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a5a:	095b      	lsrs	r3, r3, #5
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000e100 	.word	0xe000e100

08000a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	6039      	str	r1, [r7, #0]
 8000a82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	db0a      	blt.n	8000aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	490c      	ldr	r1, [pc, #48]	@ (8000ac4 <__NVIC_SetPriority+0x4c>)
 8000a92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a96:	0112      	lsls	r2, r2, #4
 8000a98:	b2d2      	uxtb	r2, r2
 8000a9a:	440b      	add	r3, r1
 8000a9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa0:	e00a      	b.n	8000ab8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	4908      	ldr	r1, [pc, #32]	@ (8000ac8 <__NVIC_SetPriority+0x50>)
 8000aa8:	88fb      	ldrh	r3, [r7, #6]
 8000aaa:	f003 030f 	and.w	r3, r3, #15
 8000aae:	3b04      	subs	r3, #4
 8000ab0:	0112      	lsls	r2, r2, #4
 8000ab2:	b2d2      	uxtb	r2, r2
 8000ab4:	440b      	add	r3, r1
 8000ab6:	761a      	strb	r2, [r3, #24]
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000e100 	.word	0xe000e100
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b089      	sub	sp, #36	@ 0x24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	f1c3 0307 	rsb	r3, r3, #7
 8000ae6:	2b04      	cmp	r3, #4
 8000ae8:	bf28      	it	cs
 8000aea:	2304      	movcs	r3, #4
 8000aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3304      	adds	r3, #4
 8000af2:	2b06      	cmp	r3, #6
 8000af4:	d902      	bls.n	8000afc <NVIC_EncodePriority+0x30>
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3b03      	subs	r3, #3
 8000afa:	e000      	b.n	8000afe <NVIC_EncodePriority+0x32>
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	43da      	mvns	r2, r3
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	401a      	ands	r2, r3
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1e:	43d9      	mvns	r1, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b24:	4313      	orrs	r3, r2
         );
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3724      	adds	r7, #36	@ 0x24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
	...

08000b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b44:	d301      	bcc.n	8000b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b46:	2301      	movs	r3, #1
 8000b48:	e00f      	b.n	8000b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b74 <SysTick_Config+0x40>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b52:	210f      	movs	r1, #15
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b58:	f7ff ff8e 	bl	8000a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b5c:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <SysTick_Config+0x40>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b62:	4b04      	ldr	r3, [pc, #16]	@ (8000b74 <SysTick_Config+0x40>)
 8000b64:	2207      	movs	r2, #7
 8000b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	e000e010 	.word	0xe000e010

08000b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff ff29 	bl	80009d8 <__NVIC_SetPriorityGrouping>
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b086      	sub	sp, #24
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]
 8000b9a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b9c:	f7ff ff40 	bl	8000a20 <__NVIC_GetPriorityGrouping>
 8000ba0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	68b9      	ldr	r1, [r7, #8]
 8000ba6:	6978      	ldr	r0, [r7, #20]
 8000ba8:	f7ff ff90 	bl	8000acc <NVIC_EncodePriority>
 8000bac:	4602      	mov	r2, r0
 8000bae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff5f 	bl	8000a78 <__NVIC_SetPriority>
}
 8000bba:	bf00      	nop
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff33 	bl	8000a3c <__NVIC_EnableIRQ>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f7ff ffa4 	bl	8000b34 <SysTick_Config>
 8000bec:	4603      	mov	r3, r0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b089      	sub	sp, #36	@ 0x24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000c06:	4b89      	ldr	r3, [pc, #548]	@ (8000e2c <HAL_GPIO_Init+0x234>)
 8000c08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c0a:	e194      	b.n	8000f36 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	2101      	movs	r1, #1
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	fa01 f303 	lsl.w	r3, r1, r3
 8000c18:	4013      	ands	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f000 8186 	beq.w	8000f30 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f003 0303 	and.w	r3, r3, #3
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d005      	beq.n	8000c3c <HAL_GPIO_Init+0x44>
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f003 0303 	and.w	r3, r3, #3
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d130      	bne.n	8000c9e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	2203      	movs	r2, #3
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	4013      	ands	r3, r2
 8000c52:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	68da      	ldr	r2, [r3, #12]
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c72:	2201      	movs	r2, #1
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	091b      	lsrs	r3, r3, #4
 8000c88:	f003 0201 	and.w	r2, r3, #1
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f003 0303 	and.w	r3, r3, #3
 8000ca6:	2b03      	cmp	r3, #3
 8000ca8:	d017      	beq.n	8000cda <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43db      	mvns	r3, r3
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	689a      	ldr	r2, [r3, #8]
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 0303 	and.w	r3, r3, #3
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d123      	bne.n	8000d2e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	08da      	lsrs	r2, r3, #3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3208      	adds	r2, #8
 8000cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	220f      	movs	r2, #15
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4013      	ands	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	691a      	ldr	r2, [r3, #16]
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	f003 0307 	and.w	r3, r3, #7
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	08da      	lsrs	r2, r3, #3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3208      	adds	r2, #8
 8000d28:	69b9      	ldr	r1, [r7, #24]
 8000d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	2203      	movs	r2, #3
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4013      	ands	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f003 0203 	and.w	r2, r3, #3
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f000 80e0 	beq.w	8000f30 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d70:	4b2f      	ldr	r3, [pc, #188]	@ (8000e30 <HAL_GPIO_Init+0x238>)
 8000d72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d76:	4a2e      	ldr	r2, [pc, #184]	@ (8000e30 <HAL_GPIO_Init+0x238>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d80:	4b2b      	ldr	r3, [pc, #172]	@ (8000e30 <HAL_GPIO_Init+0x238>)
 8000d82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d8e:	4a29      	ldr	r2, [pc, #164]	@ (8000e34 <HAL_GPIO_Init+0x23c>)
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	089b      	lsrs	r3, r3, #2
 8000d94:	3302      	adds	r3, #2
 8000d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f003 0303 	and.w	r3, r3, #3
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	220f      	movs	r2, #15
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4013      	ands	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a20      	ldr	r2, [pc, #128]	@ (8000e38 <HAL_GPIO_Init+0x240>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d052      	beq.n	8000e60 <HAL_GPIO_Init+0x268>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a1f      	ldr	r2, [pc, #124]	@ (8000e3c <HAL_GPIO_Init+0x244>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d031      	beq.n	8000e26 <HAL_GPIO_Init+0x22e>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a1e      	ldr	r2, [pc, #120]	@ (8000e40 <HAL_GPIO_Init+0x248>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d02b      	beq.n	8000e22 <HAL_GPIO_Init+0x22a>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8000e44 <HAL_GPIO_Init+0x24c>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d025      	beq.n	8000e1e <HAL_GPIO_Init+0x226>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8000e48 <HAL_GPIO_Init+0x250>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d01f      	beq.n	8000e1a <HAL_GPIO_Init+0x222>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8000e4c <HAL_GPIO_Init+0x254>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d019      	beq.n	8000e16 <HAL_GPIO_Init+0x21e>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a1a      	ldr	r2, [pc, #104]	@ (8000e50 <HAL_GPIO_Init+0x258>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d013      	beq.n	8000e12 <HAL_GPIO_Init+0x21a>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a19      	ldr	r2, [pc, #100]	@ (8000e54 <HAL_GPIO_Init+0x25c>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d00d      	beq.n	8000e0e <HAL_GPIO_Init+0x216>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a18      	ldr	r2, [pc, #96]	@ (8000e58 <HAL_GPIO_Init+0x260>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d007      	beq.n	8000e0a <HAL_GPIO_Init+0x212>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a17      	ldr	r2, [pc, #92]	@ (8000e5c <HAL_GPIO_Init+0x264>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d101      	bne.n	8000e06 <HAL_GPIO_Init+0x20e>
 8000e02:	2309      	movs	r3, #9
 8000e04:	e02d      	b.n	8000e62 <HAL_GPIO_Init+0x26a>
 8000e06:	230a      	movs	r3, #10
 8000e08:	e02b      	b.n	8000e62 <HAL_GPIO_Init+0x26a>
 8000e0a:	2308      	movs	r3, #8
 8000e0c:	e029      	b.n	8000e62 <HAL_GPIO_Init+0x26a>
 8000e0e:	2307      	movs	r3, #7
 8000e10:	e027      	b.n	8000e62 <HAL_GPIO_Init+0x26a>
 8000e12:	2306      	movs	r3, #6
 8000e14:	e025      	b.n	8000e62 <HAL_GPIO_Init+0x26a>
 8000e16:	2305      	movs	r3, #5
 8000e18:	e023      	b.n	8000e62 <HAL_GPIO_Init+0x26a>
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	e021      	b.n	8000e62 <HAL_GPIO_Init+0x26a>
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e01f      	b.n	8000e62 <HAL_GPIO_Init+0x26a>
 8000e22:	2302      	movs	r3, #2
 8000e24:	e01d      	b.n	8000e62 <HAL_GPIO_Init+0x26a>
 8000e26:	2301      	movs	r3, #1
 8000e28:	e01b      	b.n	8000e62 <HAL_GPIO_Init+0x26a>
 8000e2a:	bf00      	nop
 8000e2c:	58000080 	.word	0x58000080
 8000e30:	58024400 	.word	0x58024400
 8000e34:	58000400 	.word	0x58000400
 8000e38:	58020000 	.word	0x58020000
 8000e3c:	58020400 	.word	0x58020400
 8000e40:	58020800 	.word	0x58020800
 8000e44:	58020c00 	.word	0x58020c00
 8000e48:	58021000 	.word	0x58021000
 8000e4c:	58021400 	.word	0x58021400
 8000e50:	58021800 	.word	0x58021800
 8000e54:	58021c00 	.word	0x58021c00
 8000e58:	58022000 	.word	0x58022000
 8000e5c:	58022400 	.word	0x58022400
 8000e60:	2300      	movs	r3, #0
 8000e62:	69fa      	ldr	r2, [r7, #28]
 8000e64:	f002 0203 	and.w	r2, r2, #3
 8000e68:	0092      	lsls	r2, r2, #2
 8000e6a:	4093      	lsls	r3, r2
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e72:	4938      	ldr	r1, [pc, #224]	@ (8000f54 <HAL_GPIO_Init+0x35c>)
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	089b      	lsrs	r3, r3, #2
 8000e78:	3302      	adds	r3, #2
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000ea6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000eae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d003      	beq.n	8000ed4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000ed4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d003      	beq.n	8000f00 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4013      	ands	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	3301      	adds	r3, #1
 8000f34:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f47f ae63 	bne.w	8000c0c <HAL_GPIO_Init+0x14>
  }
}
 8000f46:	bf00      	nop
 8000f48:	bf00      	nop
 8000f4a:	3724      	adds	r7, #36	@ 0x24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	58000400 	.word	0x58000400

08000f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	807b      	strh	r3, [r7, #2]
 8000f64:	4613      	mov	r3, r2
 8000f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f68:	787b      	ldrb	r3, [r7, #1]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f6e:	887a      	ldrh	r2, [r7, #2]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000f74:	e003      	b.n	8000f7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f76:	887b      	ldrh	r3, [r7, #2]
 8000f78:	041a      	lsls	r2, r3, #16
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	619a      	str	r2, [r3, #24]
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b085      	sub	sp, #20
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
 8000f92:	460b      	mov	r3, r1
 8000f94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f9c:	887a      	ldrh	r2, [r7, #2]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	041a      	lsls	r2, r3, #16
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	43d9      	mvns	r1, r3
 8000fa8:	887b      	ldrh	r3, [r7, #2]
 8000faa:	400b      	ands	r3, r1
 8000fac:	431a      	orrs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	619a      	str	r2, [r3, #24]
}
 8000fb2:	bf00      	nop
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8000fc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fcc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8000fd0:	88fb      	ldrh	r3, [r7, #6]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d008      	beq.n	8000fea <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fa2d 	bl	8000444 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8000ffc:	4b29      	ldr	r3, [pc, #164]	@ (80010a4 <HAL_PWREx_ConfigSupply+0xb0>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	f003 0307 	and.w	r3, r3, #7
 8001004:	2b06      	cmp	r3, #6
 8001006:	d00a      	beq.n	800101e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001008:	4b26      	ldr	r3, [pc, #152]	@ (80010a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	429a      	cmp	r2, r3
 8001014:	d001      	beq.n	800101a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e040      	b.n	800109c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	e03e      	b.n	800109c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800101e:	4b21      	ldr	r3, [pc, #132]	@ (80010a4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001026:	491f      	ldr	r1, [pc, #124]	@ (80010a4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4313      	orrs	r3, r2
 800102c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800102e:	f7ff fcbb 	bl	80009a8 <HAL_GetTick>
 8001032:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001034:	e009      	b.n	800104a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001036:	f7ff fcb7 	bl	80009a8 <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001044:	d901      	bls.n	800104a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e028      	b.n	800109c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800104a:	4b16      	ldr	r3, [pc, #88]	@ (80010a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001052:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001056:	d1ee      	bne.n	8001036 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b1e      	cmp	r3, #30
 800105c:	d008      	beq.n	8001070 <HAL_PWREx_ConfigSupply+0x7c>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b2e      	cmp	r3, #46	@ 0x2e
 8001062:	d005      	beq.n	8001070 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b1d      	cmp	r3, #29
 8001068:	d002      	beq.n	8001070 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b2d      	cmp	r3, #45	@ 0x2d
 800106e:	d114      	bne.n	800109a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001070:	f7ff fc9a 	bl	80009a8 <HAL_GetTick>
 8001074:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001076:	e009      	b.n	800108c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001078:	f7ff fc96 	bl	80009a8 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001086:	d901      	bls.n	800108c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e007      	b.n	800109c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800108c:	4b05      	ldr	r3, [pc, #20]	@ (80010a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001094:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001098:	d1ee      	bne.n	8001078 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	58024800 	.word	0x58024800

080010a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08c      	sub	sp, #48	@ 0x30
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d102      	bne.n	80010bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	f000 bc48 	b.w	800194c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 8088 	beq.w	80011da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010ca:	4b99      	ldr	r3, [pc, #612]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80010d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80010d4:	4b96      	ldr	r3, [pc, #600]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 80010d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80010da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010dc:	2b10      	cmp	r3, #16
 80010de:	d007      	beq.n	80010f0 <HAL_RCC_OscConfig+0x48>
 80010e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010e2:	2b18      	cmp	r3, #24
 80010e4:	d111      	bne.n	800110a <HAL_RCC_OscConfig+0x62>
 80010e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d10c      	bne.n	800110a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f0:	4b8f      	ldr	r3, [pc, #572]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d06d      	beq.n	80011d8 <HAL_RCC_OscConfig+0x130>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d169      	bne.n	80011d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	f000 bc21 	b.w	800194c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001112:	d106      	bne.n	8001122 <HAL_RCC_OscConfig+0x7a>
 8001114:	4b86      	ldr	r3, [pc, #536]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a85      	ldr	r2, [pc, #532]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 800111a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	e02e      	b.n	8001180 <HAL_RCC_OscConfig+0xd8>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10c      	bne.n	8001144 <HAL_RCC_OscConfig+0x9c>
 800112a:	4b81      	ldr	r3, [pc, #516]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a80      	ldr	r2, [pc, #512]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 8001130:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	4b7e      	ldr	r3, [pc, #504]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a7d      	ldr	r2, [pc, #500]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 800113c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	e01d      	b.n	8001180 <HAL_RCC_OscConfig+0xd8>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800114c:	d10c      	bne.n	8001168 <HAL_RCC_OscConfig+0xc0>
 800114e:	4b78      	ldr	r3, [pc, #480]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a77      	ldr	r2, [pc, #476]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 8001154:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	4b75      	ldr	r3, [pc, #468]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a74      	ldr	r2, [pc, #464]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 8001160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	e00b      	b.n	8001180 <HAL_RCC_OscConfig+0xd8>
 8001168:	4b71      	ldr	r3, [pc, #452]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a70      	ldr	r2, [pc, #448]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 800116e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	4b6e      	ldr	r3, [pc, #440]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a6d      	ldr	r2, [pc, #436]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 800117a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800117e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d013      	beq.n	80011b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001188:	f7ff fc0e 	bl	80009a8 <HAL_GetTick>
 800118c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001190:	f7ff fc0a 	bl	80009a8 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b64      	cmp	r3, #100	@ 0x64
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e3d4      	b.n	800194c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011a2:	4b63      	ldr	r3, [pc, #396]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f0      	beq.n	8001190 <HAL_RCC_OscConfig+0xe8>
 80011ae:	e014      	b.n	80011da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b0:	f7ff fbfa 	bl	80009a8 <HAL_GetTick>
 80011b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b8:	f7ff fbf6 	bl	80009a8 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b64      	cmp	r3, #100	@ 0x64
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e3c0      	b.n	800194c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011ca:	4b59      	ldr	r3, [pc, #356]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1f0      	bne.n	80011b8 <HAL_RCC_OscConfig+0x110>
 80011d6:	e000      	b.n	80011da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 80ca 	beq.w	800137c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011e8:	4b51      	ldr	r3, [pc, #324]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80011f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011f2:	4b4f      	ldr	r3, [pc, #316]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 80011f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80011f8:	6a3b      	ldr	r3, [r7, #32]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d007      	beq.n	800120e <HAL_RCC_OscConfig+0x166>
 80011fe:	6a3b      	ldr	r3, [r7, #32]
 8001200:	2b18      	cmp	r3, #24
 8001202:	d156      	bne.n	80012b2 <HAL_RCC_OscConfig+0x20a>
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d151      	bne.n	80012b2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800120e:	4b48      	ldr	r3, [pc, #288]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	2b00      	cmp	r3, #0
 8001218:	d005      	beq.n	8001226 <HAL_RCC_OscConfig+0x17e>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e392      	b.n	800194c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001226:	4b42      	ldr	r3, [pc, #264]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f023 0219 	bic.w	r2, r3, #25
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	493f      	ldr	r1, [pc, #252]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 8001234:	4313      	orrs	r3, r2
 8001236:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001238:	f7ff fbb6 	bl	80009a8 <HAL_GetTick>
 800123c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001240:	f7ff fbb2 	bl	80009a8 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e37c      	b.n	800194c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001252:	4b37      	ldr	r3, [pc, #220]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0f0      	beq.n	8001240 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125e:	f7ff fbaf 	bl	80009c0 <HAL_GetREVID>
 8001262:	4603      	mov	r3, r0
 8001264:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001268:	4293      	cmp	r3, r2
 800126a:	d817      	bhi.n	800129c <HAL_RCC_OscConfig+0x1f4>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	2b40      	cmp	r3, #64	@ 0x40
 8001272:	d108      	bne.n	8001286 <HAL_RCC_OscConfig+0x1de>
 8001274:	4b2e      	ldr	r3, [pc, #184]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800127c:	4a2c      	ldr	r2, [pc, #176]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 800127e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001282:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001284:	e07a      	b.n	800137c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001286:	4b2a      	ldr	r3, [pc, #168]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	031b      	lsls	r3, r3, #12
 8001294:	4926      	ldr	r1, [pc, #152]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 8001296:	4313      	orrs	r3, r2
 8001298:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800129a:	e06f      	b.n	800137c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129c:	4b24      	ldr	r3, [pc, #144]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	061b      	lsls	r3, r3, #24
 80012aa:	4921      	ldr	r1, [pc, #132]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012b0:	e064      	b.n	800137c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d047      	beq.n	800134a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f023 0219 	bic.w	r2, r3, #25
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	491a      	ldr	r1, [pc, #104]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012cc:	f7ff fb6c 	bl	80009a8 <HAL_GetTick>
 80012d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012d4:	f7ff fb68 	bl	80009a8 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e332      	b.n	800194c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012e6:	4b12      	ldr	r3, [pc, #72]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0304 	and.w	r3, r3, #4
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0f0      	beq.n	80012d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f2:	f7ff fb65 	bl	80009c0 <HAL_GetREVID>
 80012f6:	4603      	mov	r3, r0
 80012f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d819      	bhi.n	8001334 <HAL_RCC_OscConfig+0x28c>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	2b40      	cmp	r3, #64	@ 0x40
 8001306:	d108      	bne.n	800131a <HAL_RCC_OscConfig+0x272>
 8001308:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001310:	4a07      	ldr	r2, [pc, #28]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 8001312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001316:	6053      	str	r3, [r2, #4]
 8001318:	e030      	b.n	800137c <HAL_RCC_OscConfig+0x2d4>
 800131a:	4b05      	ldr	r3, [pc, #20]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	031b      	lsls	r3, r3, #12
 8001328:	4901      	ldr	r1, [pc, #4]	@ (8001330 <HAL_RCC_OscConfig+0x288>)
 800132a:	4313      	orrs	r3, r2
 800132c:	604b      	str	r3, [r1, #4]
 800132e:	e025      	b.n	800137c <HAL_RCC_OscConfig+0x2d4>
 8001330:	58024400 	.word	0x58024400
 8001334:	4b9a      	ldr	r3, [pc, #616]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	061b      	lsls	r3, r3, #24
 8001342:	4997      	ldr	r1, [pc, #604]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 8001344:	4313      	orrs	r3, r2
 8001346:	604b      	str	r3, [r1, #4]
 8001348:	e018      	b.n	800137c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800134a:	4b95      	ldr	r3, [pc, #596]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a94      	ldr	r2, [pc, #592]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 8001350:	f023 0301 	bic.w	r3, r3, #1
 8001354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001356:	f7ff fb27 	bl	80009a8 <HAL_GetTick>
 800135a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800135e:	f7ff fb23 	bl	80009a8 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e2ed      	b.n	800194c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001370:	4b8b      	ldr	r3, [pc, #556]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1f0      	bne.n	800135e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0310 	and.w	r3, r3, #16
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 80a9 	beq.w	80014dc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800138a:	4b85      	ldr	r3, [pc, #532]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001392:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001394:	4b82      	ldr	r3, [pc, #520]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 8001396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001398:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	2b08      	cmp	r3, #8
 800139e:	d007      	beq.n	80013b0 <HAL_RCC_OscConfig+0x308>
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	2b18      	cmp	r3, #24
 80013a4:	d13a      	bne.n	800141c <HAL_RCC_OscConfig+0x374>
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d135      	bne.n	800141c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013b0:	4b7b      	ldr	r3, [pc, #492]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d005      	beq.n	80013c8 <HAL_RCC_OscConfig+0x320>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	2b80      	cmp	r3, #128	@ 0x80
 80013c2:	d001      	beq.n	80013c8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e2c1      	b.n	800194c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013c8:	f7ff fafa 	bl	80009c0 <HAL_GetREVID>
 80013cc:	4603      	mov	r3, r0
 80013ce:	f241 0203 	movw	r2, #4099	@ 0x1003
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d817      	bhi.n	8001406 <HAL_RCC_OscConfig+0x35e>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a1b      	ldr	r3, [r3, #32]
 80013da:	2b20      	cmp	r3, #32
 80013dc:	d108      	bne.n	80013f0 <HAL_RCC_OscConfig+0x348>
 80013de:	4b70      	ldr	r3, [pc, #448]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80013e6:	4a6e      	ldr	r2, [pc, #440]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 80013e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80013ec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013ee:	e075      	b.n	80014dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013f0:	4b6b      	ldr	r3, [pc, #428]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	069b      	lsls	r3, r3, #26
 80013fe:	4968      	ldr	r1, [pc, #416]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 8001400:	4313      	orrs	r3, r2
 8001402:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001404:	e06a      	b.n	80014dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001406:	4b66      	ldr	r3, [pc, #408]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	061b      	lsls	r3, r3, #24
 8001414:	4962      	ldr	r1, [pc, #392]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 8001416:	4313      	orrs	r3, r2
 8001418:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800141a:	e05f      	b.n	80014dc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d042      	beq.n	80014aa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001424:	4b5e      	ldr	r3, [pc, #376]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a5d      	ldr	r2, [pc, #372]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 800142a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800142e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001430:	f7ff faba 	bl	80009a8 <HAL_GetTick>
 8001434:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001438:	f7ff fab6 	bl	80009a8 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e280      	b.n	800194c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800144a:	4b55      	ldr	r3, [pc, #340]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001456:	f7ff fab3 	bl	80009c0 <HAL_GetREVID>
 800145a:	4603      	mov	r3, r0
 800145c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001460:	4293      	cmp	r3, r2
 8001462:	d817      	bhi.n	8001494 <HAL_RCC_OscConfig+0x3ec>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	2b20      	cmp	r3, #32
 800146a:	d108      	bne.n	800147e <HAL_RCC_OscConfig+0x3d6>
 800146c:	4b4c      	ldr	r3, [pc, #304]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001474:	4a4a      	ldr	r2, [pc, #296]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 8001476:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800147a:	6053      	str	r3, [r2, #4]
 800147c:	e02e      	b.n	80014dc <HAL_RCC_OscConfig+0x434>
 800147e:	4b48      	ldr	r3, [pc, #288]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	069b      	lsls	r3, r3, #26
 800148c:	4944      	ldr	r1, [pc, #272]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 800148e:	4313      	orrs	r3, r2
 8001490:	604b      	str	r3, [r1, #4]
 8001492:	e023      	b.n	80014dc <HAL_RCC_OscConfig+0x434>
 8001494:	4b42      	ldr	r3, [pc, #264]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	061b      	lsls	r3, r3, #24
 80014a2:	493f      	ldr	r1, [pc, #252]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	60cb      	str	r3, [r1, #12]
 80014a8:	e018      	b.n	80014dc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80014aa:	4b3d      	ldr	r3, [pc, #244]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a3c      	ldr	r2, [pc, #240]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 80014b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80014b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b6:	f7ff fa77 	bl	80009a8 <HAL_GetTick>
 80014ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80014be:	f7ff fa73 	bl	80009a8 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e23d      	b.n	800194c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80014d0:	4b33      	ldr	r3, [pc, #204]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f0      	bne.n	80014be <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0308 	and.w	r3, r3, #8
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d036      	beq.n	8001556 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d019      	beq.n	8001524 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014f0:	4b2b      	ldr	r3, [pc, #172]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 80014f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014f4:	4a2a      	ldr	r2, [pc, #168]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fc:	f7ff fa54 	bl	80009a8 <HAL_GetTick>
 8001500:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001504:	f7ff fa50 	bl	80009a8 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e21a      	b.n	800194c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001516:	4b22      	ldr	r3, [pc, #136]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 8001518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x45c>
 8001522:	e018      	b.n	8001556 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001524:	4b1e      	ldr	r3, [pc, #120]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 8001526:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001528:	4a1d      	ldr	r2, [pc, #116]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 800152a:	f023 0301 	bic.w	r3, r3, #1
 800152e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001530:	f7ff fa3a 	bl	80009a8 <HAL_GetTick>
 8001534:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001538:	f7ff fa36 	bl	80009a8 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e200      	b.n	800194c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800154a:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 800154c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0320 	and.w	r3, r3, #32
 800155e:	2b00      	cmp	r3, #0
 8001560:	d039      	beq.n	80015d6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d01c      	beq.n	80015a4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800156a:	4b0d      	ldr	r3, [pc, #52]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a0c      	ldr	r2, [pc, #48]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 8001570:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001574:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001576:	f7ff fa17 	bl	80009a8 <HAL_GetTick>
 800157a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800157e:	f7ff fa13 	bl	80009a8 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e1dd      	b.n	800194c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001590:	4b03      	ldr	r3, [pc, #12]	@ (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x4d6>
 800159c:	e01b      	b.n	80015d6 <HAL_RCC_OscConfig+0x52e>
 800159e:	bf00      	nop
 80015a0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015a4:	4b9b      	ldr	r3, [pc, #620]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a9a      	ldr	r2, [pc, #616]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 80015aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80015ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80015b0:	f7ff f9fa 	bl	80009a8 <HAL_GetTick>
 80015b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015b8:	f7ff f9f6 	bl	80009a8 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e1c0      	b.n	800194c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015ca:	4b92      	ldr	r3, [pc, #584]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 8081 	beq.w	80016e6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80015e4:	4b8c      	ldr	r3, [pc, #560]	@ (8001818 <HAL_RCC_OscConfig+0x770>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a8b      	ldr	r2, [pc, #556]	@ (8001818 <HAL_RCC_OscConfig+0x770>)
 80015ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80015f0:	f7ff f9da 	bl	80009a8 <HAL_GetTick>
 80015f4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f8:	f7ff f9d6 	bl	80009a8 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b64      	cmp	r3, #100	@ 0x64
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e1a0      	b.n	800194c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800160a:	4b83      	ldr	r3, [pc, #524]	@ (8001818 <HAL_RCC_OscConfig+0x770>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d106      	bne.n	800162c <HAL_RCC_OscConfig+0x584>
 800161e:	4b7d      	ldr	r3, [pc, #500]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 8001620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001622:	4a7c      	ldr	r2, [pc, #496]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6713      	str	r3, [r2, #112]	@ 0x70
 800162a:	e02d      	b.n	8001688 <HAL_RCC_OscConfig+0x5e0>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d10c      	bne.n	800164e <HAL_RCC_OscConfig+0x5a6>
 8001634:	4b77      	ldr	r3, [pc, #476]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 8001636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001638:	4a76      	ldr	r2, [pc, #472]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 800163a:	f023 0301 	bic.w	r3, r3, #1
 800163e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001640:	4b74      	ldr	r3, [pc, #464]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 8001642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001644:	4a73      	ldr	r2, [pc, #460]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 8001646:	f023 0304 	bic.w	r3, r3, #4
 800164a:	6713      	str	r3, [r2, #112]	@ 0x70
 800164c:	e01c      	b.n	8001688 <HAL_RCC_OscConfig+0x5e0>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2b05      	cmp	r3, #5
 8001654:	d10c      	bne.n	8001670 <HAL_RCC_OscConfig+0x5c8>
 8001656:	4b6f      	ldr	r3, [pc, #444]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 8001658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800165a:	4a6e      	ldr	r2, [pc, #440]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 800165c:	f043 0304 	orr.w	r3, r3, #4
 8001660:	6713      	str	r3, [r2, #112]	@ 0x70
 8001662:	4b6c      	ldr	r3, [pc, #432]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 8001664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001666:	4a6b      	ldr	r2, [pc, #428]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6713      	str	r3, [r2, #112]	@ 0x70
 800166e:	e00b      	b.n	8001688 <HAL_RCC_OscConfig+0x5e0>
 8001670:	4b68      	ldr	r3, [pc, #416]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 8001672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001674:	4a67      	ldr	r2, [pc, #412]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 8001676:	f023 0301 	bic.w	r3, r3, #1
 800167a:	6713      	str	r3, [r2, #112]	@ 0x70
 800167c:	4b65      	ldr	r3, [pc, #404]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 800167e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001680:	4a64      	ldr	r2, [pc, #400]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 8001682:	f023 0304 	bic.w	r3, r3, #4
 8001686:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d015      	beq.n	80016bc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001690:	f7ff f98a 	bl	80009a8 <HAL_GetTick>
 8001694:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001696:	e00a      	b.n	80016ae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001698:	f7ff f986 	bl	80009a8 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e14e      	b.n	800194c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016ae:	4b59      	ldr	r3, [pc, #356]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 80016b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0ee      	beq.n	8001698 <HAL_RCC_OscConfig+0x5f0>
 80016ba:	e014      	b.n	80016e6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016bc:	f7ff f974 	bl	80009a8 <HAL_GetTick>
 80016c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016c2:	e00a      	b.n	80016da <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c4:	f7ff f970 	bl	80009a8 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e138      	b.n	800194c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016da:	4b4e      	ldr	r3, [pc, #312]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 80016dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1ee      	bne.n	80016c4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 812d 	beq.w	800194a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80016f0:	4b48      	ldr	r3, [pc, #288]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80016f8:	2b18      	cmp	r3, #24
 80016fa:	f000 80bd 	beq.w	8001878 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001702:	2b02      	cmp	r3, #2
 8001704:	f040 809e 	bne.w	8001844 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001708:	4b42      	ldr	r3, [pc, #264]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a41      	ldr	r2, [pc, #260]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 800170e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001714:	f7ff f948 	bl	80009a8 <HAL_GetTick>
 8001718:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800171c:	f7ff f944 	bl	80009a8 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e10e      	b.n	800194c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800172e:	4b39      	ldr	r3, [pc, #228]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800173a:	4b36      	ldr	r3, [pc, #216]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 800173c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800173e:	4b37      	ldr	r3, [pc, #220]	@ (800181c <HAL_RCC_OscConfig+0x774>)
 8001740:	4013      	ands	r3, r2
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800174a:	0112      	lsls	r2, r2, #4
 800174c:	430a      	orrs	r2, r1
 800174e:	4931      	ldr	r1, [pc, #196]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 8001750:	4313      	orrs	r3, r2
 8001752:	628b      	str	r3, [r1, #40]	@ 0x28
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001758:	3b01      	subs	r3, #1
 800175a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001762:	3b01      	subs	r3, #1
 8001764:	025b      	lsls	r3, r3, #9
 8001766:	b29b      	uxth	r3, r3
 8001768:	431a      	orrs	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800176e:	3b01      	subs	r3, #1
 8001770:	041b      	lsls	r3, r3, #16
 8001772:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001776:	431a      	orrs	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800177c:	3b01      	subs	r3, #1
 800177e:	061b      	lsls	r3, r3, #24
 8001780:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001784:	4923      	ldr	r1, [pc, #140]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 8001786:	4313      	orrs	r3, r2
 8001788:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800178a:	4b22      	ldr	r3, [pc, #136]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 800178c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800178e:	4a21      	ldr	r2, [pc, #132]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 8001790:	f023 0301 	bic.w	r3, r3, #1
 8001794:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001796:	4b1f      	ldr	r3, [pc, #124]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 8001798:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800179a:	4b21      	ldr	r3, [pc, #132]	@ (8001820 <HAL_RCC_OscConfig+0x778>)
 800179c:	4013      	ands	r3, r2
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80017a2:	00d2      	lsls	r2, r2, #3
 80017a4:	491b      	ldr	r1, [pc, #108]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80017aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 80017ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ae:	f023 020c 	bic.w	r2, r3, #12
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b6:	4917      	ldr	r1, [pc, #92]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80017bc:	4b15      	ldr	r3, [pc, #84]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 80017be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c0:	f023 0202 	bic.w	r2, r3, #2
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c8:	4912      	ldr	r1, [pc, #72]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80017ce:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 80017d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d2:	4a10      	ldr	r2, [pc, #64]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 80017d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80017da:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 80017dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017de:	4a0d      	ldr	r2, [pc, #52]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 80017e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80017e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 80017e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 80017ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80017f2:	4b08      	ldr	r3, [pc, #32]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 80017f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f6:	4a07      	ldr	r2, [pc, #28]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017fe:	4b05      	ldr	r3, [pc, #20]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a04      	ldr	r2, [pc, #16]	@ (8001814 <HAL_RCC_OscConfig+0x76c>)
 8001804:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180a:	f7ff f8cd 	bl	80009a8 <HAL_GetTick>
 800180e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001810:	e011      	b.n	8001836 <HAL_RCC_OscConfig+0x78e>
 8001812:	bf00      	nop
 8001814:	58024400 	.word	0x58024400
 8001818:	58024800 	.word	0x58024800
 800181c:	fffffc0c 	.word	0xfffffc0c
 8001820:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001824:	f7ff f8c0 	bl	80009a8 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e08a      	b.n	800194c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001836:	4b47      	ldr	r3, [pc, #284]	@ (8001954 <HAL_RCC_OscConfig+0x8ac>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0x77c>
 8001842:	e082      	b.n	800194a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001844:	4b43      	ldr	r3, [pc, #268]	@ (8001954 <HAL_RCC_OscConfig+0x8ac>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a42      	ldr	r2, [pc, #264]	@ (8001954 <HAL_RCC_OscConfig+0x8ac>)
 800184a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800184e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff f8aa 	bl	80009a8 <HAL_GetTick>
 8001854:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001858:	f7ff f8a6 	bl	80009a8 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e070      	b.n	800194c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800186a:	4b3a      	ldr	r3, [pc, #232]	@ (8001954 <HAL_RCC_OscConfig+0x8ac>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x7b0>
 8001876:	e068      	b.n	800194a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001878:	4b36      	ldr	r3, [pc, #216]	@ (8001954 <HAL_RCC_OscConfig+0x8ac>)
 800187a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800187c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800187e:	4b35      	ldr	r3, [pc, #212]	@ (8001954 <HAL_RCC_OscConfig+0x8ac>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001888:	2b01      	cmp	r3, #1
 800188a:	d031      	beq.n	80018f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	f003 0203 	and.w	r2, r3, #3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001896:	429a      	cmp	r2, r3
 8001898:	d12a      	bne.n	80018f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	091b      	lsrs	r3, r3, #4
 800189e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d122      	bne.n	80018f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d11a      	bne.n	80018f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	0a5b      	lsrs	r3, r3, #9
 80018be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d111      	bne.n	80018f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	0c1b      	lsrs	r3, r3, #16
 80018d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80018da:	429a      	cmp	r2, r3
 80018dc:	d108      	bne.n	80018f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	0e1b      	lsrs	r3, r3, #24
 80018e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e02b      	b.n	800194c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80018f4:	4b17      	ldr	r3, [pc, #92]	@ (8001954 <HAL_RCC_OscConfig+0x8ac>)
 80018f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018f8:	08db      	lsrs	r3, r3, #3
 80018fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80018fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	429a      	cmp	r2, r3
 8001908:	d01f      	beq.n	800194a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800190a:	4b12      	ldr	r3, [pc, #72]	@ (8001954 <HAL_RCC_OscConfig+0x8ac>)
 800190c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190e:	4a11      	ldr	r2, [pc, #68]	@ (8001954 <HAL_RCC_OscConfig+0x8ac>)
 8001910:	f023 0301 	bic.w	r3, r3, #1
 8001914:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001916:	f7ff f847 	bl	80009a8 <HAL_GetTick>
 800191a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800191c:	bf00      	nop
 800191e:	f7ff f843 	bl	80009a8 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001926:	4293      	cmp	r3, r2
 8001928:	d0f9      	beq.n	800191e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800192a:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <HAL_RCC_OscConfig+0x8ac>)
 800192c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800192e:	4b0a      	ldr	r3, [pc, #40]	@ (8001958 <HAL_RCC_OscConfig+0x8b0>)
 8001930:	4013      	ands	r3, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001936:	00d2      	lsls	r2, r2, #3
 8001938:	4906      	ldr	r1, [pc, #24]	@ (8001954 <HAL_RCC_OscConfig+0x8ac>)
 800193a:	4313      	orrs	r3, r2
 800193c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800193e:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <HAL_RCC_OscConfig+0x8ac>)
 8001940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001942:	4a04      	ldr	r2, [pc, #16]	@ (8001954 <HAL_RCC_OscConfig+0x8ac>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3730      	adds	r7, #48	@ 0x30
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	58024400 	.word	0x58024400
 8001958:	ffff0007 	.word	0xffff0007

0800195c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e19c      	b.n	8001caa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001970:	4b8a      	ldr	r3, [pc, #552]	@ (8001b9c <HAL_RCC_ClockConfig+0x240>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 030f 	and.w	r3, r3, #15
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d910      	bls.n	80019a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197e:	4b87      	ldr	r3, [pc, #540]	@ (8001b9c <HAL_RCC_ClockConfig+0x240>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f023 020f 	bic.w	r2, r3, #15
 8001986:	4985      	ldr	r1, [pc, #532]	@ (8001b9c <HAL_RCC_ClockConfig+0x240>)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	4313      	orrs	r3, r2
 800198c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800198e:	4b83      	ldr	r3, [pc, #524]	@ (8001b9c <HAL_RCC_ClockConfig+0x240>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	d001      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e184      	b.n	8001caa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d010      	beq.n	80019ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	4b7b      	ldr	r3, [pc, #492]	@ (8001ba0 <HAL_RCC_ClockConfig+0x244>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d908      	bls.n	80019ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80019bc:	4b78      	ldr	r3, [pc, #480]	@ (8001ba0 <HAL_RCC_ClockConfig+0x244>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	4975      	ldr	r1, [pc, #468]	@ (8001ba0 <HAL_RCC_ClockConfig+0x244>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0308 	and.w	r3, r3, #8
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d010      	beq.n	80019fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	695a      	ldr	r2, [r3, #20]
 80019de:	4b70      	ldr	r3, [pc, #448]	@ (8001ba0 <HAL_RCC_ClockConfig+0x244>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d908      	bls.n	80019fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80019ea:	4b6d      	ldr	r3, [pc, #436]	@ (8001ba0 <HAL_RCC_ClockConfig+0x244>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	496a      	ldr	r1, [pc, #424]	@ (8001ba0 <HAL_RCC_ClockConfig+0x244>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0310 	and.w	r3, r3, #16
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d010      	beq.n	8001a2a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	699a      	ldr	r2, [r3, #24]
 8001a0c:	4b64      	ldr	r3, [pc, #400]	@ (8001ba0 <HAL_RCC_ClockConfig+0x244>)
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d908      	bls.n	8001a2a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a18:	4b61      	ldr	r3, [pc, #388]	@ (8001ba0 <HAL_RCC_ClockConfig+0x244>)
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	495e      	ldr	r1, [pc, #376]	@ (8001ba0 <HAL_RCC_ClockConfig+0x244>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0320 	and.w	r3, r3, #32
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d010      	beq.n	8001a58 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69da      	ldr	r2, [r3, #28]
 8001a3a:	4b59      	ldr	r3, [pc, #356]	@ (8001ba0 <HAL_RCC_ClockConfig+0x244>)
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d908      	bls.n	8001a58 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001a46:	4b56      	ldr	r3, [pc, #344]	@ (8001ba0 <HAL_RCC_ClockConfig+0x244>)
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	4953      	ldr	r1, [pc, #332]	@ (8001ba0 <HAL_RCC_ClockConfig+0x244>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d010      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	4b4d      	ldr	r3, [pc, #308]	@ (8001ba0 <HAL_RCC_ClockConfig+0x244>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f003 030f 	and.w	r3, r3, #15
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d908      	bls.n	8001a86 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a74:	4b4a      	ldr	r3, [pc, #296]	@ (8001ba0 <HAL_RCC_ClockConfig+0x244>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f023 020f 	bic.w	r2, r3, #15
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4947      	ldr	r1, [pc, #284]	@ (8001ba0 <HAL_RCC_ClockConfig+0x244>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d055      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001a92:	4b43      	ldr	r3, [pc, #268]	@ (8001ba0 <HAL_RCC_ClockConfig+0x244>)
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	4940      	ldr	r1, [pc, #256]	@ (8001ba0 <HAL_RCC_ClockConfig+0x244>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d107      	bne.n	8001abc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001aac:	4b3c      	ldr	r3, [pc, #240]	@ (8001ba0 <HAL_RCC_ClockConfig+0x244>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d121      	bne.n	8001afc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0f6      	b.n	8001caa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b03      	cmp	r3, #3
 8001ac2:	d107      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ac4:	4b36      	ldr	r3, [pc, #216]	@ (8001ba0 <HAL_RCC_ClockConfig+0x244>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d115      	bne.n	8001afc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0ea      	b.n	8001caa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d107      	bne.n	8001aec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001adc:	4b30      	ldr	r3, [pc, #192]	@ (8001ba0 <HAL_RCC_ClockConfig+0x244>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d109      	bne.n	8001afc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e0de      	b.n	8001caa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001aec:	4b2c      	ldr	r3, [pc, #176]	@ (8001ba0 <HAL_RCC_ClockConfig+0x244>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0d6      	b.n	8001caa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001afc:	4b28      	ldr	r3, [pc, #160]	@ (8001ba0 <HAL_RCC_ClockConfig+0x244>)
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	f023 0207 	bic.w	r2, r3, #7
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	4925      	ldr	r1, [pc, #148]	@ (8001ba0 <HAL_RCC_ClockConfig+0x244>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b0e:	f7fe ff4b 	bl	80009a8 <HAL_GetTick>
 8001b12:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b14:	e00a      	b.n	8001b2c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b16:	f7fe ff47 	bl	80009a8 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e0be      	b.n	8001caa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba0 <HAL_RCC_ClockConfig+0x244>)
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d1eb      	bne.n	8001b16 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d010      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68da      	ldr	r2, [r3, #12]
 8001b4e:	4b14      	ldr	r3, [pc, #80]	@ (8001ba0 <HAL_RCC_ClockConfig+0x244>)
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d208      	bcs.n	8001b6c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ba0 <HAL_RCC_ClockConfig+0x244>)
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	f023 020f 	bic.w	r2, r3, #15
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	490e      	ldr	r1, [pc, #56]	@ (8001ba0 <HAL_RCC_ClockConfig+0x244>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <HAL_RCC_ClockConfig+0x240>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 030f 	and.w	r3, r3, #15
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d214      	bcs.n	8001ba4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7a:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <HAL_RCC_ClockConfig+0x240>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 020f 	bic.w	r2, r3, #15
 8001b82:	4906      	ldr	r1, [pc, #24]	@ (8001b9c <HAL_RCC_ClockConfig+0x240>)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8a:	4b04      	ldr	r3, [pc, #16]	@ (8001b9c <HAL_RCC_ClockConfig+0x240>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d005      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e086      	b.n	8001caa <HAL_RCC_ClockConfig+0x34e>
 8001b9c:	52002000 	.word	0x52002000
 8001ba0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d010      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	4b3f      	ldr	r3, [pc, #252]	@ (8001cb4 <HAL_RCC_ClockConfig+0x358>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d208      	bcs.n	8001bd2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001bc0:	4b3c      	ldr	r3, [pc, #240]	@ (8001cb4 <HAL_RCC_ClockConfig+0x358>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	4939      	ldr	r1, [pc, #228]	@ (8001cb4 <HAL_RCC_ClockConfig+0x358>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d010      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	4b34      	ldr	r3, [pc, #208]	@ (8001cb4 <HAL_RCC_ClockConfig+0x358>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d208      	bcs.n	8001c00 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001bee:	4b31      	ldr	r3, [pc, #196]	@ (8001cb4 <HAL_RCC_ClockConfig+0x358>)
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	492e      	ldr	r1, [pc, #184]	@ (8001cb4 <HAL_RCC_ClockConfig+0x358>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0310 	and.w	r3, r3, #16
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d010      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	699a      	ldr	r2, [r3, #24]
 8001c10:	4b28      	ldr	r3, [pc, #160]	@ (8001cb4 <HAL_RCC_ClockConfig+0x358>)
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d208      	bcs.n	8001c2e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c1c:	4b25      	ldr	r3, [pc, #148]	@ (8001cb4 <HAL_RCC_ClockConfig+0x358>)
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	4922      	ldr	r1, [pc, #136]	@ (8001cb4 <HAL_RCC_ClockConfig+0x358>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0320 	and.w	r3, r3, #32
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d010      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69da      	ldr	r2, [r3, #28]
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb4 <HAL_RCC_ClockConfig+0x358>)
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d208      	bcs.n	8001c5c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb4 <HAL_RCC_ClockConfig+0x358>)
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	4917      	ldr	r1, [pc, #92]	@ (8001cb4 <HAL_RCC_ClockConfig+0x358>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c5c:	f000 f834 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8001c60:	4602      	mov	r2, r0
 8001c62:	4b14      	ldr	r3, [pc, #80]	@ (8001cb4 <HAL_RCC_ClockConfig+0x358>)
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	0a1b      	lsrs	r3, r3, #8
 8001c68:	f003 030f 	and.w	r3, r3, #15
 8001c6c:	4912      	ldr	r1, [pc, #72]	@ (8001cb8 <HAL_RCC_ClockConfig+0x35c>)
 8001c6e:	5ccb      	ldrb	r3, [r1, r3]
 8001c70:	f003 031f 	and.w	r3, r3, #31
 8001c74:	fa22 f303 	lsr.w	r3, r2, r3
 8001c78:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb4 <HAL_RCC_ClockConfig+0x358>)
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb8 <HAL_RCC_ClockConfig+0x35c>)
 8001c84:	5cd3      	ldrb	r3, [r2, r3]
 8001c86:	f003 031f 	and.w	r3, r3, #31
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c90:	4a0a      	ldr	r2, [pc, #40]	@ (8001cbc <HAL_RCC_ClockConfig+0x360>)
 8001c92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c94:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <HAL_RCC_ClockConfig+0x364>)
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc4 <HAL_RCC_ClockConfig+0x368>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fe38 	bl	8000914 <HAL_InitTick>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	58024400 	.word	0x58024400
 8001cb8:	08003374 	.word	0x08003374
 8001cbc:	24000004 	.word	0x24000004
 8001cc0:	24000000 	.word	0x24000000
 8001cc4:	24000008 	.word	0x24000008

08001cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	@ 0x24
 8001ccc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cce:	4bb3      	ldr	r3, [pc, #716]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cd6:	2b18      	cmp	r3, #24
 8001cd8:	f200 8155 	bhi.w	8001f86 <HAL_RCC_GetSysClockFreq+0x2be>
 8001cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8001ce4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce2:	bf00      	nop
 8001ce4:	08001d49 	.word	0x08001d49
 8001ce8:	08001f87 	.word	0x08001f87
 8001cec:	08001f87 	.word	0x08001f87
 8001cf0:	08001f87 	.word	0x08001f87
 8001cf4:	08001f87 	.word	0x08001f87
 8001cf8:	08001f87 	.word	0x08001f87
 8001cfc:	08001f87 	.word	0x08001f87
 8001d00:	08001f87 	.word	0x08001f87
 8001d04:	08001d6f 	.word	0x08001d6f
 8001d08:	08001f87 	.word	0x08001f87
 8001d0c:	08001f87 	.word	0x08001f87
 8001d10:	08001f87 	.word	0x08001f87
 8001d14:	08001f87 	.word	0x08001f87
 8001d18:	08001f87 	.word	0x08001f87
 8001d1c:	08001f87 	.word	0x08001f87
 8001d20:	08001f87 	.word	0x08001f87
 8001d24:	08001d75 	.word	0x08001d75
 8001d28:	08001f87 	.word	0x08001f87
 8001d2c:	08001f87 	.word	0x08001f87
 8001d30:	08001f87 	.word	0x08001f87
 8001d34:	08001f87 	.word	0x08001f87
 8001d38:	08001f87 	.word	0x08001f87
 8001d3c:	08001f87 	.word	0x08001f87
 8001d40:	08001f87 	.word	0x08001f87
 8001d44:	08001d7b 	.word	0x08001d7b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d48:	4b94      	ldr	r3, [pc, #592]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0320 	and.w	r3, r3, #32
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d009      	beq.n	8001d68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001d54:	4b91      	ldr	r3, [pc, #580]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	08db      	lsrs	r3, r3, #3
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	4a90      	ldr	r2, [pc, #576]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d60:	fa22 f303 	lsr.w	r3, r2, r3
 8001d64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001d66:	e111      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001d68:	4b8d      	ldr	r3, [pc, #564]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d6a:	61bb      	str	r3, [r7, #24]
      break;
 8001d6c:	e10e      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001d6e:	4b8d      	ldr	r3, [pc, #564]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001d70:	61bb      	str	r3, [r7, #24]
      break;
 8001d72:	e10b      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001d74:	4b8c      	ldr	r3, [pc, #560]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001d76:	61bb      	str	r3, [r7, #24]
      break;
 8001d78:	e108      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001d7a:	4b88      	ldr	r3, [pc, #544]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001d84:	4b85      	ldr	r3, [pc, #532]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d8e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001d90:	4b82      	ldr	r3, [pc, #520]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001d9a:	4b80      	ldr	r3, [pc, #512]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d9e:	08db      	lsrs	r3, r3, #3
 8001da0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	fb02 f303 	mul.w	r3, r2, r3
 8001daa:	ee07 3a90 	vmov	s15, r3
 8001dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001db2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 80e1 	beq.w	8001f80 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	f000 8083 	beq.w	8001ecc <HAL_RCC_GetSysClockFreq+0x204>
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	f200 80a1 	bhi.w	8001f10 <HAL_RCC_GetSysClockFreq+0x248>
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_RCC_GetSysClockFreq+0x114>
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d056      	beq.n	8001e88 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001dda:	e099      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ddc:	4b6f      	ldr	r3, [pc, #444]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0320 	and.w	r3, r3, #32
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d02d      	beq.n	8001e44 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001de8:	4b6c      	ldr	r3, [pc, #432]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	08db      	lsrs	r3, r3, #3
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	4a6b      	ldr	r2, [pc, #428]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001df4:	fa22 f303 	lsr.w	r3, r2, r3
 8001df8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	ee07 3a90 	vmov	s15, r3
 8001e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	ee07 3a90 	vmov	s15, r3
 8001e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e12:	4b62      	ldr	r3, [pc, #392]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e1a:	ee07 3a90 	vmov	s15, r3
 8001e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e22:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e26:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8001fac <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e3e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001e42:	e087      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	ee07 3a90 	vmov	s15, r3
 8001e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e4e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001fb0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e56:	4b51      	ldr	r3, [pc, #324]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e5e:	ee07 3a90 	vmov	s15, r3
 8001e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e66:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e6a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8001fac <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001e86:	e065      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	ee07 3a90 	vmov	s15, r3
 8001e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e92:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001fb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e9a:	4b40      	ldr	r3, [pc, #256]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ea2:	ee07 3a90 	vmov	s15, r3
 8001ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001eaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8001eae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8001fac <HAL_RCC_GetSysClockFreq+0x2e4>
 8001eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001eba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001eca:	e043      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	ee07 3a90 	vmov	s15, r3
 8001ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ed6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001fb8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ede:	4b2f      	ldr	r3, [pc, #188]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ee6:	ee07 3a90 	vmov	s15, r3
 8001eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001eee:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ef2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8001fac <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001efe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f0e:	e021      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	ee07 3a90 	vmov	s15, r3
 8001f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f1a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001fb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f22:	4b1e      	ldr	r3, [pc, #120]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f2a:	ee07 3a90 	vmov	s15, r3
 8001f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f32:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f36:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8001fac <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f52:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001f54:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f58:	0a5b      	lsrs	r3, r3, #9
 8001f5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f5e:	3301      	adds	r3, #1
 8001f60:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	ee07 3a90 	vmov	s15, r3
 8001f68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f78:	ee17 3a90 	vmov	r3, s15
 8001f7c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001f7e:	e005      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61bb      	str	r3, [r7, #24]
      break;
 8001f84:	e002      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001f86:	4b07      	ldr	r3, [pc, #28]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001f88:	61bb      	str	r3, [r7, #24]
      break;
 8001f8a:	bf00      	nop
  }

  return sysclockfreq;
 8001f8c:	69bb      	ldr	r3, [r7, #24]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3724      	adds	r7, #36	@ 0x24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	58024400 	.word	0x58024400
 8001fa0:	03d09000 	.word	0x03d09000
 8001fa4:	003d0900 	.word	0x003d0900
 8001fa8:	017d7840 	.word	0x017d7840
 8001fac:	46000000 	.word	0x46000000
 8001fb0:	4c742400 	.word	0x4c742400
 8001fb4:	4a742400 	.word	0x4a742400
 8001fb8:	4bbebc20 	.word	0x4bbebc20

08001fbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e049      	b.n	8002062 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d106      	bne.n	8001fe8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7fe fbc6 	bl	8000774 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2202      	movs	r2, #2
 8001fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	f000 fad6 	bl	80025ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b01      	cmp	r3, #1
 800207e:	d001      	beq.n	8002084 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e054      	b.n	800212e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2202      	movs	r2, #2
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a26      	ldr	r2, [pc, #152]	@ (800213c <HAL_TIM_Base_Start_IT+0xd0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d022      	beq.n	80020ec <HAL_TIM_Base_Start_IT+0x80>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020ae:	d01d      	beq.n	80020ec <HAL_TIM_Base_Start_IT+0x80>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a22      	ldr	r2, [pc, #136]	@ (8002140 <HAL_TIM_Base_Start_IT+0xd4>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d018      	beq.n	80020ec <HAL_TIM_Base_Start_IT+0x80>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a21      	ldr	r2, [pc, #132]	@ (8002144 <HAL_TIM_Base_Start_IT+0xd8>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d013      	beq.n	80020ec <HAL_TIM_Base_Start_IT+0x80>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002148 <HAL_TIM_Base_Start_IT+0xdc>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d00e      	beq.n	80020ec <HAL_TIM_Base_Start_IT+0x80>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a1e      	ldr	r2, [pc, #120]	@ (800214c <HAL_TIM_Base_Start_IT+0xe0>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d009      	beq.n	80020ec <HAL_TIM_Base_Start_IT+0x80>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002150 <HAL_TIM_Base_Start_IT+0xe4>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d004      	beq.n	80020ec <HAL_TIM_Base_Start_IT+0x80>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002154 <HAL_TIM_Base_Start_IT+0xe8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d115      	bne.n	8002118 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	4b19      	ldr	r3, [pc, #100]	@ (8002158 <HAL_TIM_Base_Start_IT+0xec>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2b06      	cmp	r3, #6
 80020fc:	d015      	beq.n	800212a <HAL_TIM_Base_Start_IT+0xbe>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002104:	d011      	beq.n	800212a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f042 0201 	orr.w	r2, r2, #1
 8002114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002116:	e008      	b.n	800212a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0201 	orr.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	e000      	b.n	800212c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800212a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40010000 	.word	0x40010000
 8002140:	40000400 	.word	0x40000400
 8002144:	40000800 	.word	0x40000800
 8002148:	40000c00 	.word	0x40000c00
 800214c:	40010400 	.word	0x40010400
 8002150:	40001800 	.word	0x40001800
 8002154:	40014000 	.word	0x40014000
 8002158:	00010007 	.word	0x00010007

0800215c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d020      	beq.n	80021c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d01b      	beq.n	80021c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f06f 0202 	mvn.w	r2, #2
 8002190:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f9e2 	bl	8002570 <HAL_TIM_IC_CaptureCallback>
 80021ac:	e005      	b.n	80021ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f9d4 	bl	800255c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f9e5 	bl	8002584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d020      	beq.n	800220c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d01b      	beq.n	800220c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f06f 0204 	mvn.w	r2, #4
 80021dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2202      	movs	r2, #2
 80021e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f9bc 	bl	8002570 <HAL_TIM_IC_CaptureCallback>
 80021f8:	e005      	b.n	8002206 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f9ae 	bl	800255c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f9bf 	bl	8002584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	d020      	beq.n	8002258 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	2b00      	cmp	r3, #0
 800221e:	d01b      	beq.n	8002258 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f06f 0208 	mvn.w	r2, #8
 8002228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2204      	movs	r2, #4
 800222e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f996 	bl	8002570 <HAL_TIM_IC_CaptureCallback>
 8002244:	e005      	b.n	8002252 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f988 	bl	800255c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f999 	bl	8002584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	2b00      	cmp	r3, #0
 8002260:	d020      	beq.n	80022a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	2b00      	cmp	r3, #0
 800226a:	d01b      	beq.n	80022a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f06f 0210 	mvn.w	r2, #16
 8002274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2208      	movs	r2, #8
 800227a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f970 	bl	8002570 <HAL_TIM_IC_CaptureCallback>
 8002290:	e005      	b.n	800229e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f962 	bl	800255c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f973 	bl	8002584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00c      	beq.n	80022c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d007      	beq.n	80022c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f06f 0201 	mvn.w	r2, #1
 80022c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7fe f8d2 	bl	800046c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d104      	bne.n	80022dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00c      	beq.n	80022f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d007      	beq.n	80022f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80022ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 fb31 	bl	8002958 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00c      	beq.n	800231a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002306:	2b00      	cmp	r3, #0
 8002308:	d007      	beq.n	800231a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 fb29 	bl	800296c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00c      	beq.n	800233e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800232a:	2b00      	cmp	r3, #0
 800232c:	d007      	beq.n	800233e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f92d 	bl	8002598 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	f003 0320 	and.w	r3, r3, #32
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00c      	beq.n	8002362 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 0320 	and.w	r3, r3, #32
 800234e:	2b00      	cmp	r3, #0
 8002350:	d007      	beq.n	8002362 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f06f 0220 	mvn.w	r2, #32
 800235a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 faf1 	bl	8002944 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <HAL_TIM_ConfigClockSource+0x1c>
 8002384:	2302      	movs	r3, #2
 8002386:	e0dc      	b.n	8002542 <HAL_TIM_ConfigClockSource+0x1d6>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	4b6a      	ldr	r3, [pc, #424]	@ (800254c <HAL_TIM_ConfigClockSource+0x1e0>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80023ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a64      	ldr	r2, [pc, #400]	@ (8002550 <HAL_TIM_ConfigClockSource+0x1e4>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	f000 80a9 	beq.w	8002516 <HAL_TIM_ConfigClockSource+0x1aa>
 80023c4:	4a62      	ldr	r2, [pc, #392]	@ (8002550 <HAL_TIM_ConfigClockSource+0x1e4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	f200 80ae 	bhi.w	8002528 <HAL_TIM_ConfigClockSource+0x1bc>
 80023cc:	4a61      	ldr	r2, [pc, #388]	@ (8002554 <HAL_TIM_ConfigClockSource+0x1e8>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	f000 80a1 	beq.w	8002516 <HAL_TIM_ConfigClockSource+0x1aa>
 80023d4:	4a5f      	ldr	r2, [pc, #380]	@ (8002554 <HAL_TIM_ConfigClockSource+0x1e8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	f200 80a6 	bhi.w	8002528 <HAL_TIM_ConfigClockSource+0x1bc>
 80023dc:	4a5e      	ldr	r2, [pc, #376]	@ (8002558 <HAL_TIM_ConfigClockSource+0x1ec>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	f000 8099 	beq.w	8002516 <HAL_TIM_ConfigClockSource+0x1aa>
 80023e4:	4a5c      	ldr	r2, [pc, #368]	@ (8002558 <HAL_TIM_ConfigClockSource+0x1ec>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	f200 809e 	bhi.w	8002528 <HAL_TIM_ConfigClockSource+0x1bc>
 80023ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80023f0:	f000 8091 	beq.w	8002516 <HAL_TIM_ConfigClockSource+0x1aa>
 80023f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80023f8:	f200 8096 	bhi.w	8002528 <HAL_TIM_ConfigClockSource+0x1bc>
 80023fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002400:	f000 8089 	beq.w	8002516 <HAL_TIM_ConfigClockSource+0x1aa>
 8002404:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002408:	f200 808e 	bhi.w	8002528 <HAL_TIM_ConfigClockSource+0x1bc>
 800240c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002410:	d03e      	beq.n	8002490 <HAL_TIM_ConfigClockSource+0x124>
 8002412:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002416:	f200 8087 	bhi.w	8002528 <HAL_TIM_ConfigClockSource+0x1bc>
 800241a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800241e:	f000 8086 	beq.w	800252e <HAL_TIM_ConfigClockSource+0x1c2>
 8002422:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002426:	d87f      	bhi.n	8002528 <HAL_TIM_ConfigClockSource+0x1bc>
 8002428:	2b70      	cmp	r3, #112	@ 0x70
 800242a:	d01a      	beq.n	8002462 <HAL_TIM_ConfigClockSource+0xf6>
 800242c:	2b70      	cmp	r3, #112	@ 0x70
 800242e:	d87b      	bhi.n	8002528 <HAL_TIM_ConfigClockSource+0x1bc>
 8002430:	2b60      	cmp	r3, #96	@ 0x60
 8002432:	d050      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0x16a>
 8002434:	2b60      	cmp	r3, #96	@ 0x60
 8002436:	d877      	bhi.n	8002528 <HAL_TIM_ConfigClockSource+0x1bc>
 8002438:	2b50      	cmp	r3, #80	@ 0x50
 800243a:	d03c      	beq.n	80024b6 <HAL_TIM_ConfigClockSource+0x14a>
 800243c:	2b50      	cmp	r3, #80	@ 0x50
 800243e:	d873      	bhi.n	8002528 <HAL_TIM_ConfigClockSource+0x1bc>
 8002440:	2b40      	cmp	r3, #64	@ 0x40
 8002442:	d058      	beq.n	80024f6 <HAL_TIM_ConfigClockSource+0x18a>
 8002444:	2b40      	cmp	r3, #64	@ 0x40
 8002446:	d86f      	bhi.n	8002528 <HAL_TIM_ConfigClockSource+0x1bc>
 8002448:	2b30      	cmp	r3, #48	@ 0x30
 800244a:	d064      	beq.n	8002516 <HAL_TIM_ConfigClockSource+0x1aa>
 800244c:	2b30      	cmp	r3, #48	@ 0x30
 800244e:	d86b      	bhi.n	8002528 <HAL_TIM_ConfigClockSource+0x1bc>
 8002450:	2b20      	cmp	r3, #32
 8002452:	d060      	beq.n	8002516 <HAL_TIM_ConfigClockSource+0x1aa>
 8002454:	2b20      	cmp	r3, #32
 8002456:	d867      	bhi.n	8002528 <HAL_TIM_ConfigClockSource+0x1bc>
 8002458:	2b00      	cmp	r3, #0
 800245a:	d05c      	beq.n	8002516 <HAL_TIM_ConfigClockSource+0x1aa>
 800245c:	2b10      	cmp	r3, #16
 800245e:	d05a      	beq.n	8002516 <HAL_TIM_ConfigClockSource+0x1aa>
 8002460:	e062      	b.n	8002528 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002472:	f000 f9b9 	bl	80027e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002484:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	609a      	str	r2, [r3, #8]
      break;
 800248e:	e04f      	b.n	8002530 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024a0:	f000 f9a2 	bl	80027e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024b2:	609a      	str	r2, [r3, #8]
      break;
 80024b4:	e03c      	b.n	8002530 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024c2:	461a      	mov	r2, r3
 80024c4:	f000 f912 	bl	80026ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2150      	movs	r1, #80	@ 0x50
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 f96c 	bl	80027ac <TIM_ITRx_SetConfig>
      break;
 80024d4:	e02c      	b.n	8002530 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024e2:	461a      	mov	r2, r3
 80024e4:	f000 f931 	bl	800274a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2160      	movs	r1, #96	@ 0x60
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 f95c 	bl	80027ac <TIM_ITRx_SetConfig>
      break;
 80024f4:	e01c      	b.n	8002530 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002502:	461a      	mov	r2, r3
 8002504:	f000 f8f2 	bl	80026ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2140      	movs	r1, #64	@ 0x40
 800250e:	4618      	mov	r0, r3
 8002510:	f000 f94c 	bl	80027ac <TIM_ITRx_SetConfig>
      break;
 8002514:	e00c      	b.n	8002530 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4619      	mov	r1, r3
 8002520:	4610      	mov	r0, r2
 8002522:	f000 f943 	bl	80027ac <TIM_ITRx_SetConfig>
      break;
 8002526:	e003      	b.n	8002530 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
      break;
 800252c:	e000      	b.n	8002530 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800252e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002540:	7bfb      	ldrb	r3, [r7, #15]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	ffceff88 	.word	0xffceff88
 8002550:	00100040 	.word	0x00100040
 8002554:	00100030 	.word	0x00100030
 8002558:	00100020 	.word	0x00100020

0800255c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a43      	ldr	r2, [pc, #268]	@ (80026cc <TIM_Base_SetConfig+0x120>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d013      	beq.n	80025ec <TIM_Base_SetConfig+0x40>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025ca:	d00f      	beq.n	80025ec <TIM_Base_SetConfig+0x40>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a40      	ldr	r2, [pc, #256]	@ (80026d0 <TIM_Base_SetConfig+0x124>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d00b      	beq.n	80025ec <TIM_Base_SetConfig+0x40>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a3f      	ldr	r2, [pc, #252]	@ (80026d4 <TIM_Base_SetConfig+0x128>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d007      	beq.n	80025ec <TIM_Base_SetConfig+0x40>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a3e      	ldr	r2, [pc, #248]	@ (80026d8 <TIM_Base_SetConfig+0x12c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d003      	beq.n	80025ec <TIM_Base_SetConfig+0x40>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a3d      	ldr	r2, [pc, #244]	@ (80026dc <TIM_Base_SetConfig+0x130>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d108      	bne.n	80025fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a32      	ldr	r2, [pc, #200]	@ (80026cc <TIM_Base_SetConfig+0x120>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d01f      	beq.n	8002646 <TIM_Base_SetConfig+0x9a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800260c:	d01b      	beq.n	8002646 <TIM_Base_SetConfig+0x9a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a2f      	ldr	r2, [pc, #188]	@ (80026d0 <TIM_Base_SetConfig+0x124>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d017      	beq.n	8002646 <TIM_Base_SetConfig+0x9a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a2e      	ldr	r2, [pc, #184]	@ (80026d4 <TIM_Base_SetConfig+0x128>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d013      	beq.n	8002646 <TIM_Base_SetConfig+0x9a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a2d      	ldr	r2, [pc, #180]	@ (80026d8 <TIM_Base_SetConfig+0x12c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d00f      	beq.n	8002646 <TIM_Base_SetConfig+0x9a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a2c      	ldr	r2, [pc, #176]	@ (80026dc <TIM_Base_SetConfig+0x130>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00b      	beq.n	8002646 <TIM_Base_SetConfig+0x9a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a2b      	ldr	r2, [pc, #172]	@ (80026e0 <TIM_Base_SetConfig+0x134>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d007      	beq.n	8002646 <TIM_Base_SetConfig+0x9a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a2a      	ldr	r2, [pc, #168]	@ (80026e4 <TIM_Base_SetConfig+0x138>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d003      	beq.n	8002646 <TIM_Base_SetConfig+0x9a>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a29      	ldr	r2, [pc, #164]	@ (80026e8 <TIM_Base_SetConfig+0x13c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d108      	bne.n	8002658 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800264c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	4313      	orrs	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	4313      	orrs	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a14      	ldr	r2, [pc, #80]	@ (80026cc <TIM_Base_SetConfig+0x120>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00f      	beq.n	800269e <TIM_Base_SetConfig+0xf2>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a16      	ldr	r2, [pc, #88]	@ (80026dc <TIM_Base_SetConfig+0x130>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d00b      	beq.n	800269e <TIM_Base_SetConfig+0xf2>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a15      	ldr	r2, [pc, #84]	@ (80026e0 <TIM_Base_SetConfig+0x134>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d007      	beq.n	800269e <TIM_Base_SetConfig+0xf2>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a14      	ldr	r2, [pc, #80]	@ (80026e4 <TIM_Base_SetConfig+0x138>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d003      	beq.n	800269e <TIM_Base_SetConfig+0xf2>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a13      	ldr	r2, [pc, #76]	@ (80026e8 <TIM_Base_SetConfig+0x13c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d103      	bne.n	80026a6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	691a      	ldr	r2, [r3, #16]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f043 0204 	orr.w	r2, r3, #4
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	601a      	str	r2, [r3, #0]
}
 80026be:	bf00      	nop
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40010000 	.word	0x40010000
 80026d0:	40000400 	.word	0x40000400
 80026d4:	40000800 	.word	0x40000800
 80026d8:	40000c00 	.word	0x40000c00
 80026dc:	40010400 	.word	0x40010400
 80026e0:	40014000 	.word	0x40014000
 80026e4:	40014400 	.word	0x40014400
 80026e8:	40014800 	.word	0x40014800

080026ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	f023 0201 	bic.w	r2, r3, #1
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f023 030a 	bic.w	r3, r3, #10
 8002728:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	4313      	orrs	r3, r2
 8002730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	621a      	str	r2, [r3, #32]
}
 800273e:	bf00      	nop
 8002740:	371c      	adds	r7, #28
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800274a:	b480      	push	{r7}
 800274c:	b087      	sub	sp, #28
 800274e:	af00      	add	r7, sp, #0
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	f023 0210 	bic.w	r2, r3, #16
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002774:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	031b      	lsls	r3, r3, #12
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002786:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	4313      	orrs	r3, r2
 8002790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	621a      	str	r2, [r3, #32]
}
 800279e:	bf00      	nop
 80027a0:	371c      	adds	r7, #28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
	...

080027ac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4b09      	ldr	r3, [pc, #36]	@ (80027e4 <TIM_ITRx_SetConfig+0x38>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	f043 0307 	orr.w	r3, r3, #7
 80027ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	609a      	str	r2, [r3, #8]
}
 80027d6:	bf00      	nop
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	ffcfff8f 	.word	0xffcfff8f

080027e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
 80027f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002802:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	021a      	lsls	r2, r3, #8
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	431a      	orrs	r2, r3
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	4313      	orrs	r3, r2
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	4313      	orrs	r3, r2
 8002814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	609a      	str	r2, [r3, #8]
}
 800281c:	bf00      	nop
 800281e:	371c      	adds	r7, #28
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800283c:	2302      	movs	r3, #2
 800283e:	e06d      	b.n	800291c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a30      	ldr	r2, [pc, #192]	@ (8002928 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d004      	beq.n	8002874 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a2f      	ldr	r2, [pc, #188]	@ (800292c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d108      	bne.n	8002886 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800287a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800288c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	4313      	orrs	r3, r2
 8002896:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a20      	ldr	r2, [pc, #128]	@ (8002928 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d022      	beq.n	80028f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028b2:	d01d      	beq.n	80028f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002930 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d018      	beq.n	80028f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002934 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d013      	beq.n	80028f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a1a      	ldr	r2, [pc, #104]	@ (8002938 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d00e      	beq.n	80028f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a15      	ldr	r2, [pc, #84]	@ (800292c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d009      	beq.n	80028f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a16      	ldr	r2, [pc, #88]	@ (800293c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d004      	beq.n	80028f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a15      	ldr	r2, [pc, #84]	@ (8002940 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d10c      	bne.n	800290a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	40010000 	.word	0x40010000
 800292c:	40010400 	.word	0x40010400
 8002930:	40000400 	.word	0x40000400
 8002934:	40000800 	.word	0x40000800
 8002938:	40000c00 	.word	0x40000c00
 800293c:	40001800 	.word	0x40001800
 8002940:	40014000 	.word	0x40014000

08002944 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <findslot>:
 8002980:	4b0a      	ldr	r3, [pc, #40]	@ (80029ac <findslot+0x2c>)
 8002982:	b510      	push	{r4, lr}
 8002984:	4604      	mov	r4, r0
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	b118      	cbz	r0, 8002992 <findslot+0x12>
 800298a:	6a03      	ldr	r3, [r0, #32]
 800298c:	b90b      	cbnz	r3, 8002992 <findslot+0x12>
 800298e:	f000 faed 	bl	8002f6c <__sinit>
 8002992:	2c13      	cmp	r4, #19
 8002994:	d807      	bhi.n	80029a6 <findslot+0x26>
 8002996:	4806      	ldr	r0, [pc, #24]	@ (80029b0 <findslot+0x30>)
 8002998:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800299c:	3201      	adds	r2, #1
 800299e:	d002      	beq.n	80029a6 <findslot+0x26>
 80029a0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80029a4:	bd10      	pop	{r4, pc}
 80029a6:	2000      	movs	r0, #0
 80029a8:	e7fc      	b.n	80029a4 <findslot+0x24>
 80029aa:	bf00      	nop
 80029ac:	24000024 	.word	0x24000024
 80029b0:	240000f4 	.word	0x240000f4

080029b4 <error>:
 80029b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b6:	4604      	mov	r4, r0
 80029b8:	f000 fba0 	bl	80030fc <__errno>
 80029bc:	2613      	movs	r6, #19
 80029be:	4605      	mov	r5, r0
 80029c0:	2700      	movs	r7, #0
 80029c2:	4630      	mov	r0, r6
 80029c4:	4639      	mov	r1, r7
 80029c6:	beab      	bkpt	0x00ab
 80029c8:	4606      	mov	r6, r0
 80029ca:	602e      	str	r6, [r5, #0]
 80029cc:	4620      	mov	r0, r4
 80029ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080029d0 <checkerror>:
 80029d0:	1c43      	adds	r3, r0, #1
 80029d2:	d101      	bne.n	80029d8 <checkerror+0x8>
 80029d4:	f7ff bfee 	b.w	80029b4 <error>
 80029d8:	4770      	bx	lr

080029da <_swiread>:
 80029da:	b530      	push	{r4, r5, lr}
 80029dc:	b085      	sub	sp, #20
 80029de:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80029e2:	9203      	str	r2, [sp, #12]
 80029e4:	2406      	movs	r4, #6
 80029e6:	ad01      	add	r5, sp, #4
 80029e8:	4620      	mov	r0, r4
 80029ea:	4629      	mov	r1, r5
 80029ec:	beab      	bkpt	0x00ab
 80029ee:	4604      	mov	r4, r0
 80029f0:	4620      	mov	r0, r4
 80029f2:	f7ff ffed 	bl	80029d0 <checkerror>
 80029f6:	b005      	add	sp, #20
 80029f8:	bd30      	pop	{r4, r5, pc}

080029fa <_read>:
 80029fa:	b570      	push	{r4, r5, r6, lr}
 80029fc:	460e      	mov	r6, r1
 80029fe:	4614      	mov	r4, r2
 8002a00:	f7ff ffbe 	bl	8002980 <findslot>
 8002a04:	4605      	mov	r5, r0
 8002a06:	b930      	cbnz	r0, 8002a16 <_read+0x1c>
 8002a08:	f000 fb78 	bl	80030fc <__errno>
 8002a0c:	2309      	movs	r3, #9
 8002a0e:	6003      	str	r3, [r0, #0]
 8002a10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a14:	bd70      	pop	{r4, r5, r6, pc}
 8002a16:	6800      	ldr	r0, [r0, #0]
 8002a18:	4622      	mov	r2, r4
 8002a1a:	4631      	mov	r1, r6
 8002a1c:	f7ff ffdd 	bl	80029da <_swiread>
 8002a20:	1c43      	adds	r3, r0, #1
 8002a22:	d0f5      	beq.n	8002a10 <_read+0x16>
 8002a24:	686b      	ldr	r3, [r5, #4]
 8002a26:	1a20      	subs	r0, r4, r0
 8002a28:	4403      	add	r3, r0
 8002a2a:	606b      	str	r3, [r5, #4]
 8002a2c:	e7f2      	b.n	8002a14 <_read+0x1a>

08002a2e <_swilseek>:
 8002a2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a30:	460c      	mov	r4, r1
 8002a32:	4616      	mov	r6, r2
 8002a34:	f7ff ffa4 	bl	8002980 <findslot>
 8002a38:	4605      	mov	r5, r0
 8002a3a:	b940      	cbnz	r0, 8002a4e <_swilseek+0x20>
 8002a3c:	f000 fb5e 	bl	80030fc <__errno>
 8002a40:	2309      	movs	r3, #9
 8002a42:	6003      	str	r3, [r0, #0]
 8002a44:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002a48:	4620      	mov	r0, r4
 8002a4a:	b003      	add	sp, #12
 8002a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a4e:	2e02      	cmp	r6, #2
 8002a50:	d903      	bls.n	8002a5a <_swilseek+0x2c>
 8002a52:	f000 fb53 	bl	80030fc <__errno>
 8002a56:	2316      	movs	r3, #22
 8002a58:	e7f3      	b.n	8002a42 <_swilseek+0x14>
 8002a5a:	2e01      	cmp	r6, #1
 8002a5c:	d112      	bne.n	8002a84 <_swilseek+0x56>
 8002a5e:	6843      	ldr	r3, [r0, #4]
 8002a60:	18e4      	adds	r4, r4, r3
 8002a62:	d4f6      	bmi.n	8002a52 <_swilseek+0x24>
 8002a64:	682b      	ldr	r3, [r5, #0]
 8002a66:	260a      	movs	r6, #10
 8002a68:	e9cd 3400 	strd	r3, r4, [sp]
 8002a6c:	466f      	mov	r7, sp
 8002a6e:	4630      	mov	r0, r6
 8002a70:	4639      	mov	r1, r7
 8002a72:	beab      	bkpt	0x00ab
 8002a74:	4606      	mov	r6, r0
 8002a76:	4630      	mov	r0, r6
 8002a78:	f7ff ffaa 	bl	80029d0 <checkerror>
 8002a7c:	2800      	cmp	r0, #0
 8002a7e:	dbe1      	blt.n	8002a44 <_swilseek+0x16>
 8002a80:	606c      	str	r4, [r5, #4]
 8002a82:	e7e1      	b.n	8002a48 <_swilseek+0x1a>
 8002a84:	2e02      	cmp	r6, #2
 8002a86:	6803      	ldr	r3, [r0, #0]
 8002a88:	d1ec      	bne.n	8002a64 <_swilseek+0x36>
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	260c      	movs	r6, #12
 8002a8e:	466f      	mov	r7, sp
 8002a90:	4630      	mov	r0, r6
 8002a92:	4639      	mov	r1, r7
 8002a94:	beab      	bkpt	0x00ab
 8002a96:	4606      	mov	r6, r0
 8002a98:	4630      	mov	r0, r6
 8002a9a:	f7ff ff99 	bl	80029d0 <checkerror>
 8002a9e:	1c43      	adds	r3, r0, #1
 8002aa0:	d0d0      	beq.n	8002a44 <_swilseek+0x16>
 8002aa2:	4404      	add	r4, r0
 8002aa4:	e7de      	b.n	8002a64 <_swilseek+0x36>

08002aa6 <_lseek>:
 8002aa6:	f7ff bfc2 	b.w	8002a2e <_swilseek>

08002aaa <_swiwrite>:
 8002aaa:	b530      	push	{r4, r5, lr}
 8002aac:	b085      	sub	sp, #20
 8002aae:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002ab2:	9203      	str	r2, [sp, #12]
 8002ab4:	2405      	movs	r4, #5
 8002ab6:	ad01      	add	r5, sp, #4
 8002ab8:	4620      	mov	r0, r4
 8002aba:	4629      	mov	r1, r5
 8002abc:	beab      	bkpt	0x00ab
 8002abe:	4604      	mov	r4, r0
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	f7ff ff85 	bl	80029d0 <checkerror>
 8002ac6:	b005      	add	sp, #20
 8002ac8:	bd30      	pop	{r4, r5, pc}

08002aca <_write>:
 8002aca:	b570      	push	{r4, r5, r6, lr}
 8002acc:	460e      	mov	r6, r1
 8002ace:	4615      	mov	r5, r2
 8002ad0:	f7ff ff56 	bl	8002980 <findslot>
 8002ad4:	4604      	mov	r4, r0
 8002ad6:	b930      	cbnz	r0, 8002ae6 <_write+0x1c>
 8002ad8:	f000 fb10 	bl	80030fc <__errno>
 8002adc:	2309      	movs	r3, #9
 8002ade:	6003      	str	r3, [r0, #0]
 8002ae0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ae4:	bd70      	pop	{r4, r5, r6, pc}
 8002ae6:	6800      	ldr	r0, [r0, #0]
 8002ae8:	462a      	mov	r2, r5
 8002aea:	4631      	mov	r1, r6
 8002aec:	f7ff ffdd 	bl	8002aaa <_swiwrite>
 8002af0:	1e03      	subs	r3, r0, #0
 8002af2:	dbf5      	blt.n	8002ae0 <_write+0x16>
 8002af4:	6862      	ldr	r2, [r4, #4]
 8002af6:	1ae8      	subs	r0, r5, r3
 8002af8:	4402      	add	r2, r0
 8002afa:	42ab      	cmp	r3, r5
 8002afc:	6062      	str	r2, [r4, #4]
 8002afe:	d1f1      	bne.n	8002ae4 <_write+0x1a>
 8002b00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002b04:	2000      	movs	r0, #0
 8002b06:	f7ff bf55 	b.w	80029b4 <error>

08002b0a <_swiclose>:
 8002b0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002b0c:	2402      	movs	r4, #2
 8002b0e:	9001      	str	r0, [sp, #4]
 8002b10:	ad01      	add	r5, sp, #4
 8002b12:	4620      	mov	r0, r4
 8002b14:	4629      	mov	r1, r5
 8002b16:	beab      	bkpt	0x00ab
 8002b18:	4604      	mov	r4, r0
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	f7ff ff58 	bl	80029d0 <checkerror>
 8002b20:	b003      	add	sp, #12
 8002b22:	bd30      	pop	{r4, r5, pc}

08002b24 <_close>:
 8002b24:	b538      	push	{r3, r4, r5, lr}
 8002b26:	4605      	mov	r5, r0
 8002b28:	f7ff ff2a 	bl	8002980 <findslot>
 8002b2c:	4604      	mov	r4, r0
 8002b2e:	b930      	cbnz	r0, 8002b3e <_close+0x1a>
 8002b30:	f000 fae4 	bl	80030fc <__errno>
 8002b34:	2309      	movs	r3, #9
 8002b36:	6003      	str	r3, [r0, #0]
 8002b38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b3c:	bd38      	pop	{r3, r4, r5, pc}
 8002b3e:	3d01      	subs	r5, #1
 8002b40:	2d01      	cmp	r5, #1
 8002b42:	d809      	bhi.n	8002b58 <_close+0x34>
 8002b44:	4b07      	ldr	r3, [pc, #28]	@ (8002b64 <_close+0x40>)
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d104      	bne.n	8002b58 <_close+0x34>
 8002b4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b52:	6023      	str	r3, [r4, #0]
 8002b54:	2000      	movs	r0, #0
 8002b56:	e7f1      	b.n	8002b3c <_close+0x18>
 8002b58:	6820      	ldr	r0, [r4, #0]
 8002b5a:	f7ff ffd6 	bl	8002b0a <_swiclose>
 8002b5e:	2800      	cmp	r0, #0
 8002b60:	d0f5      	beq.n	8002b4e <_close+0x2a>
 8002b62:	e7eb      	b.n	8002b3c <_close+0x18>
 8002b64:	240000f4 	.word	0x240000f4

08002b68 <_swistat>:
 8002b68:	b570      	push	{r4, r5, r6, lr}
 8002b6a:	460c      	mov	r4, r1
 8002b6c:	f7ff ff08 	bl	8002980 <findslot>
 8002b70:	4605      	mov	r5, r0
 8002b72:	b930      	cbnz	r0, 8002b82 <_swistat+0x1a>
 8002b74:	f000 fac2 	bl	80030fc <__errno>
 8002b78:	2309      	movs	r3, #9
 8002b7a:	6003      	str	r3, [r0, #0]
 8002b7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b80:	bd70      	pop	{r4, r5, r6, pc}
 8002b82:	6863      	ldr	r3, [r4, #4]
 8002b84:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b88:	6063      	str	r3, [r4, #4]
 8002b8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b8e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002b90:	260c      	movs	r6, #12
 8002b92:	4630      	mov	r0, r6
 8002b94:	4629      	mov	r1, r5
 8002b96:	beab      	bkpt	0x00ab
 8002b98:	4605      	mov	r5, r0
 8002b9a:	4628      	mov	r0, r5
 8002b9c:	f7ff ff18 	bl	80029d0 <checkerror>
 8002ba0:	1c43      	adds	r3, r0, #1
 8002ba2:	d0eb      	beq.n	8002b7c <_swistat+0x14>
 8002ba4:	6120      	str	r0, [r4, #16]
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	e7ea      	b.n	8002b80 <_swistat+0x18>

08002baa <_stat>:
 8002baa:	b538      	push	{r3, r4, r5, lr}
 8002bac:	460d      	mov	r5, r1
 8002bae:	4604      	mov	r4, r0
 8002bb0:	2258      	movs	r2, #88	@ 0x58
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	4628      	mov	r0, r5
 8002bb6:	f000 fa52 	bl	800305e <memset>
 8002bba:	4620      	mov	r0, r4
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	f000 f811 	bl	8002be4 <_swiopen>
 8002bc2:	1c43      	adds	r3, r0, #1
 8002bc4:	4604      	mov	r4, r0
 8002bc6:	d00b      	beq.n	8002be0 <_stat+0x36>
 8002bc8:	686b      	ldr	r3, [r5, #4]
 8002bca:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8002bce:	606b      	str	r3, [r5, #4]
 8002bd0:	4629      	mov	r1, r5
 8002bd2:	f7ff ffc9 	bl	8002b68 <_swistat>
 8002bd6:	4605      	mov	r5, r0
 8002bd8:	4620      	mov	r0, r4
 8002bda:	f7ff ffa3 	bl	8002b24 <_close>
 8002bde:	462c      	mov	r4, r5
 8002be0:	4620      	mov	r0, r4
 8002be2:	bd38      	pop	{r3, r4, r5, pc}

08002be4 <_swiopen>:
 8002be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002be8:	4f29      	ldr	r7, [pc, #164]	@ (8002c90 <_swiopen+0xac>)
 8002bea:	b096      	sub	sp, #88	@ 0x58
 8002bec:	4682      	mov	sl, r0
 8002bee:	460e      	mov	r6, r1
 8002bf0:	2400      	movs	r4, #0
 8002bf2:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8002bfc:	d00c      	beq.n	8002c18 <_swiopen+0x34>
 8002bfe:	3401      	adds	r4, #1
 8002c00:	2c14      	cmp	r4, #20
 8002c02:	d1f6      	bne.n	8002bf2 <_swiopen+0xe>
 8002c04:	f000 fa7a 	bl	80030fc <__errno>
 8002c08:	2318      	movs	r3, #24
 8002c0a:	6003      	str	r3, [r0, #0]
 8002c0c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002c10:	4620      	mov	r0, r4
 8002c12:	b016      	add	sp, #88	@ 0x58
 8002c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c18:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8002c1c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002c20:	46e9      	mov	r9, sp
 8002c22:	d109      	bne.n	8002c38 <_swiopen+0x54>
 8002c24:	4649      	mov	r1, r9
 8002c26:	4650      	mov	r0, sl
 8002c28:	f7ff ffbf 	bl	8002baa <_stat>
 8002c2c:	3001      	adds	r0, #1
 8002c2e:	d003      	beq.n	8002c38 <_swiopen+0x54>
 8002c30:	f000 fa64 	bl	80030fc <__errno>
 8002c34:	2311      	movs	r3, #17
 8002c36:	e7e8      	b.n	8002c0a <_swiopen+0x26>
 8002c38:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8002c3c:	f240 6301 	movw	r3, #1537	@ 0x601
 8002c40:	07b2      	lsls	r2, r6, #30
 8002c42:	bf48      	it	mi
 8002c44:	f045 0502 	orrmi.w	r5, r5, #2
 8002c48:	421e      	tst	r6, r3
 8002c4a:	bf18      	it	ne
 8002c4c:	f045 0504 	orrne.w	r5, r5, #4
 8002c50:	0733      	lsls	r3, r6, #28
 8002c52:	bf48      	it	mi
 8002c54:	f025 0504 	bicmi.w	r5, r5, #4
 8002c58:	4650      	mov	r0, sl
 8002c5a:	bf48      	it	mi
 8002c5c:	f045 0508 	orrmi.w	r5, r5, #8
 8002c60:	f8cd a000 	str.w	sl, [sp]
 8002c64:	f7fd fb38 	bl	80002d8 <strlen>
 8002c68:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8002c6c:	2501      	movs	r5, #1
 8002c6e:	4628      	mov	r0, r5
 8002c70:	4649      	mov	r1, r9
 8002c72:	beab      	bkpt	0x00ab
 8002c74:	4605      	mov	r5, r0
 8002c76:	2d00      	cmp	r5, #0
 8002c78:	db05      	blt.n	8002c86 <_swiopen+0xa2>
 8002c7a:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8002c7e:	4447      	add	r7, r8
 8002c80:	2300      	movs	r3, #0
 8002c82:	607b      	str	r3, [r7, #4]
 8002c84:	e7c4      	b.n	8002c10 <_swiopen+0x2c>
 8002c86:	4628      	mov	r0, r5
 8002c88:	f7ff fe94 	bl	80029b4 <error>
 8002c8c:	4604      	mov	r4, r0
 8002c8e:	e7bf      	b.n	8002c10 <_swiopen+0x2c>
 8002c90:	240000f4 	.word	0x240000f4

08002c94 <_get_semihosting_exts>:
 8002c94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002c98:	4606      	mov	r6, r0
 8002c9a:	460f      	mov	r7, r1
 8002c9c:	4829      	ldr	r0, [pc, #164]	@ (8002d44 <_get_semihosting_exts+0xb0>)
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	4615      	mov	r5, r2
 8002ca2:	f7ff ff9f 	bl	8002be4 <_swiopen>
 8002ca6:	462a      	mov	r2, r5
 8002ca8:	4604      	mov	r4, r0
 8002caa:	2100      	movs	r1, #0
 8002cac:	4630      	mov	r0, r6
 8002cae:	f000 f9d6 	bl	800305e <memset>
 8002cb2:	1c63      	adds	r3, r4, #1
 8002cb4:	d014      	beq.n	8002ce0 <_get_semihosting_exts+0x4c>
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	f7ff fe62 	bl	8002980 <findslot>
 8002cbc:	f04f 080c 	mov.w	r8, #12
 8002cc0:	4681      	mov	r9, r0
 8002cc2:	4640      	mov	r0, r8
 8002cc4:	4649      	mov	r1, r9
 8002cc6:	beab      	bkpt	0x00ab
 8002cc8:	4680      	mov	r8, r0
 8002cca:	4640      	mov	r0, r8
 8002ccc:	f7ff fe80 	bl	80029d0 <checkerror>
 8002cd0:	2803      	cmp	r0, #3
 8002cd2:	dd02      	ble.n	8002cda <_get_semihosting_exts+0x46>
 8002cd4:	1ec3      	subs	r3, r0, #3
 8002cd6:	42ab      	cmp	r3, r5
 8002cd8:	dc07      	bgt.n	8002cea <_get_semihosting_exts+0x56>
 8002cda:	4620      	mov	r0, r4
 8002cdc:	f7ff ff22 	bl	8002b24 <_close>
 8002ce0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ce4:	b003      	add	sp, #12
 8002ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002cea:	2204      	movs	r2, #4
 8002cec:	eb0d 0102 	add.w	r1, sp, r2
 8002cf0:	4620      	mov	r0, r4
 8002cf2:	f7ff fe82 	bl	80029fa <_read>
 8002cf6:	2803      	cmp	r0, #3
 8002cf8:	ddef      	ble.n	8002cda <_get_semihosting_exts+0x46>
 8002cfa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002cfe:	2b53      	cmp	r3, #83	@ 0x53
 8002d00:	d1eb      	bne.n	8002cda <_get_semihosting_exts+0x46>
 8002d02:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002d06:	2b48      	cmp	r3, #72	@ 0x48
 8002d08:	d1e7      	bne.n	8002cda <_get_semihosting_exts+0x46>
 8002d0a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002d0e:	2b46      	cmp	r3, #70	@ 0x46
 8002d10:	d1e3      	bne.n	8002cda <_get_semihosting_exts+0x46>
 8002d12:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002d16:	2b42      	cmp	r3, #66	@ 0x42
 8002d18:	d1df      	bne.n	8002cda <_get_semihosting_exts+0x46>
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	4639      	mov	r1, r7
 8002d1e:	4620      	mov	r0, r4
 8002d20:	f7ff fe85 	bl	8002a2e <_swilseek>
 8002d24:	2800      	cmp	r0, #0
 8002d26:	dbd8      	blt.n	8002cda <_get_semihosting_exts+0x46>
 8002d28:	462a      	mov	r2, r5
 8002d2a:	4631      	mov	r1, r6
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	f7ff fe64 	bl	80029fa <_read>
 8002d32:	4605      	mov	r5, r0
 8002d34:	4620      	mov	r0, r4
 8002d36:	f7ff fef5 	bl	8002b24 <_close>
 8002d3a:	4628      	mov	r0, r5
 8002d3c:	f7ff fe48 	bl	80029d0 <checkerror>
 8002d40:	e7d0      	b.n	8002ce4 <_get_semihosting_exts+0x50>
 8002d42:	bf00      	nop
 8002d44:	08003384 	.word	0x08003384

08002d48 <initialise_semihosting_exts>:
 8002d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d4a:	4d0a      	ldr	r5, [pc, #40]	@ (8002d74 <initialise_semihosting_exts+0x2c>)
 8002d4c:	4c0a      	ldr	r4, [pc, #40]	@ (8002d78 <initialise_semihosting_exts+0x30>)
 8002d4e:	2100      	movs	r1, #0
 8002d50:	2201      	movs	r2, #1
 8002d52:	a801      	add	r0, sp, #4
 8002d54:	6029      	str	r1, [r5, #0]
 8002d56:	6022      	str	r2, [r4, #0]
 8002d58:	f7ff ff9c 	bl	8002c94 <_get_semihosting_exts>
 8002d5c:	2800      	cmp	r0, #0
 8002d5e:	dd07      	ble.n	8002d70 <initialise_semihosting_exts+0x28>
 8002d60:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002d64:	f003 0201 	and.w	r2, r3, #1
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	602a      	str	r2, [r5, #0]
 8002d6e:	6023      	str	r3, [r4, #0]
 8002d70:	b003      	add	sp, #12
 8002d72:	bd30      	pop	{r4, r5, pc}
 8002d74:	24000014 	.word	0x24000014
 8002d78:	24000010 	.word	0x24000010

08002d7c <_has_ext_stdout_stderr>:
 8002d7c:	b510      	push	{r4, lr}
 8002d7e:	4c04      	ldr	r4, [pc, #16]	@ (8002d90 <_has_ext_stdout_stderr+0x14>)
 8002d80:	6823      	ldr	r3, [r4, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	da01      	bge.n	8002d8a <_has_ext_stdout_stderr+0xe>
 8002d86:	f7ff ffdf 	bl	8002d48 <initialise_semihosting_exts>
 8002d8a:	6820      	ldr	r0, [r4, #0]
 8002d8c:	bd10      	pop	{r4, pc}
 8002d8e:	bf00      	nop
 8002d90:	24000010 	.word	0x24000010

08002d94 <initialise_monitor_handles>:
 8002d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d98:	b085      	sub	sp, #20
 8002d9a:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8002e4c <initialise_monitor_handles+0xb8>
 8002d9e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002da2:	2303      	movs	r3, #3
 8002da4:	2400      	movs	r4, #0
 8002da6:	9303      	str	r3, [sp, #12]
 8002da8:	af01      	add	r7, sp, #4
 8002daa:	9402      	str	r4, [sp, #8]
 8002dac:	2501      	movs	r5, #1
 8002dae:	4628      	mov	r0, r5
 8002db0:	4639      	mov	r1, r7
 8002db2:	beab      	bkpt	0x00ab
 8002db4:	4605      	mov	r5, r0
 8002db6:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8002e50 <initialise_monitor_handles+0xbc>
 8002dba:	4623      	mov	r3, r4
 8002dbc:	4c20      	ldr	r4, [pc, #128]	@ (8002e40 <initialise_monitor_handles+0xac>)
 8002dbe:	f8c8 5000 	str.w	r5, [r8]
 8002dc2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002dc6:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	2b14      	cmp	r3, #20
 8002dce:	d1fa      	bne.n	8002dc6 <initialise_monitor_handles+0x32>
 8002dd0:	f7ff ffd4 	bl	8002d7c <_has_ext_stdout_stderr>
 8002dd4:	4d1b      	ldr	r5, [pc, #108]	@ (8002e44 <initialise_monitor_handles+0xb0>)
 8002dd6:	b1d0      	cbz	r0, 8002e0e <initialise_monitor_handles+0x7a>
 8002dd8:	f04f 0a03 	mov.w	sl, #3
 8002ddc:	2304      	movs	r3, #4
 8002dde:	f8cd 9004 	str.w	r9, [sp, #4]
 8002de2:	2601      	movs	r6, #1
 8002de4:	f8cd a00c 	str.w	sl, [sp, #12]
 8002de8:	9302      	str	r3, [sp, #8]
 8002dea:	4630      	mov	r0, r6
 8002dec:	4639      	mov	r1, r7
 8002dee:	beab      	bkpt	0x00ab
 8002df0:	4683      	mov	fp, r0
 8002df2:	4b15      	ldr	r3, [pc, #84]	@ (8002e48 <initialise_monitor_handles+0xb4>)
 8002df4:	f8cd 9004 	str.w	r9, [sp, #4]
 8002df8:	f8c3 b000 	str.w	fp, [r3]
 8002dfc:	2308      	movs	r3, #8
 8002dfe:	f8cd a00c 	str.w	sl, [sp, #12]
 8002e02:	9302      	str	r3, [sp, #8]
 8002e04:	4630      	mov	r0, r6
 8002e06:	4639      	mov	r1, r7
 8002e08:	beab      	bkpt	0x00ab
 8002e0a:	4606      	mov	r6, r0
 8002e0c:	602e      	str	r6, [r5, #0]
 8002e0e:	682b      	ldr	r3, [r5, #0]
 8002e10:	3301      	adds	r3, #1
 8002e12:	bf02      	ittt	eq
 8002e14:	4b0c      	ldreq	r3, [pc, #48]	@ (8002e48 <initialise_monitor_handles+0xb4>)
 8002e16:	681b      	ldreq	r3, [r3, #0]
 8002e18:	602b      	streq	r3, [r5, #0]
 8002e1a:	2600      	movs	r6, #0
 8002e1c:	f8d8 3000 	ldr.w	r3, [r8]
 8002e20:	6023      	str	r3, [r4, #0]
 8002e22:	6066      	str	r6, [r4, #4]
 8002e24:	f7ff ffaa 	bl	8002d7c <_has_ext_stdout_stderr>
 8002e28:	b130      	cbz	r0, 8002e38 <initialise_monitor_handles+0xa4>
 8002e2a:	4b07      	ldr	r3, [pc, #28]	@ (8002e48 <initialise_monitor_handles+0xb4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002e32:	682b      	ldr	r3, [r5, #0]
 8002e34:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002e38:	b005      	add	sp, #20
 8002e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e3e:	bf00      	nop
 8002e40:	240000f4 	.word	0x240000f4
 8002e44:	240000e8 	.word	0x240000e8
 8002e48:	240000ec 	.word	0x240000ec
 8002e4c:	0800339a 	.word	0x0800339a
 8002e50:	240000f0 	.word	0x240000f0

08002e54 <std>:
 8002e54:	2300      	movs	r3, #0
 8002e56:	b510      	push	{r4, lr}
 8002e58:	4604      	mov	r4, r0
 8002e5a:	e9c0 3300 	strd	r3, r3, [r0]
 8002e5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e62:	6083      	str	r3, [r0, #8]
 8002e64:	8181      	strh	r1, [r0, #12]
 8002e66:	6643      	str	r3, [r0, #100]	@ 0x64
 8002e68:	81c2      	strh	r2, [r0, #14]
 8002e6a:	6183      	str	r3, [r0, #24]
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	2208      	movs	r2, #8
 8002e70:	305c      	adds	r0, #92	@ 0x5c
 8002e72:	f000 f8f4 	bl	800305e <memset>
 8002e76:	4b0d      	ldr	r3, [pc, #52]	@ (8002eac <std+0x58>)
 8002e78:	6263      	str	r3, [r4, #36]	@ 0x24
 8002e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb0 <std+0x5c>)
 8002e7c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb4 <std+0x60>)
 8002e80:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002e82:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb8 <std+0x64>)
 8002e84:	6323      	str	r3, [r4, #48]	@ 0x30
 8002e86:	4b0d      	ldr	r3, [pc, #52]	@ (8002ebc <std+0x68>)
 8002e88:	6224      	str	r4, [r4, #32]
 8002e8a:	429c      	cmp	r4, r3
 8002e8c:	d006      	beq.n	8002e9c <std+0x48>
 8002e8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002e92:	4294      	cmp	r4, r2
 8002e94:	d002      	beq.n	8002e9c <std+0x48>
 8002e96:	33d0      	adds	r3, #208	@ 0xd0
 8002e98:	429c      	cmp	r4, r3
 8002e9a:	d105      	bne.n	8002ea8 <std+0x54>
 8002e9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ea4:	f000 b954 	b.w	8003150 <__retarget_lock_init_recursive>
 8002ea8:	bd10      	pop	{r4, pc}
 8002eaa:	bf00      	nop
 8002eac:	08002fd9 	.word	0x08002fd9
 8002eb0:	08002ffb 	.word	0x08002ffb
 8002eb4:	08003033 	.word	0x08003033
 8002eb8:	08003057 	.word	0x08003057
 8002ebc:	24000194 	.word	0x24000194

08002ec0 <stdio_exit_handler>:
 8002ec0:	4a02      	ldr	r2, [pc, #8]	@ (8002ecc <stdio_exit_handler+0xc>)
 8002ec2:	4903      	ldr	r1, [pc, #12]	@ (8002ed0 <stdio_exit_handler+0x10>)
 8002ec4:	4803      	ldr	r0, [pc, #12]	@ (8002ed4 <stdio_exit_handler+0x14>)
 8002ec6:	f000 b869 	b.w	8002f9c <_fwalk_sglue>
 8002eca:	bf00      	nop
 8002ecc:	24000018 	.word	0x24000018
 8002ed0:	0800330d 	.word	0x0800330d
 8002ed4:	24000028 	.word	0x24000028

08002ed8 <cleanup_stdio>:
 8002ed8:	6841      	ldr	r1, [r0, #4]
 8002eda:	4b0c      	ldr	r3, [pc, #48]	@ (8002f0c <cleanup_stdio+0x34>)
 8002edc:	4299      	cmp	r1, r3
 8002ede:	b510      	push	{r4, lr}
 8002ee0:	4604      	mov	r4, r0
 8002ee2:	d001      	beq.n	8002ee8 <cleanup_stdio+0x10>
 8002ee4:	f000 fa12 	bl	800330c <_fflush_r>
 8002ee8:	68a1      	ldr	r1, [r4, #8]
 8002eea:	4b09      	ldr	r3, [pc, #36]	@ (8002f10 <cleanup_stdio+0x38>)
 8002eec:	4299      	cmp	r1, r3
 8002eee:	d002      	beq.n	8002ef6 <cleanup_stdio+0x1e>
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	f000 fa0b 	bl	800330c <_fflush_r>
 8002ef6:	68e1      	ldr	r1, [r4, #12]
 8002ef8:	4b06      	ldr	r3, [pc, #24]	@ (8002f14 <cleanup_stdio+0x3c>)
 8002efa:	4299      	cmp	r1, r3
 8002efc:	d004      	beq.n	8002f08 <cleanup_stdio+0x30>
 8002efe:	4620      	mov	r0, r4
 8002f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f04:	f000 ba02 	b.w	800330c <_fflush_r>
 8002f08:	bd10      	pop	{r4, pc}
 8002f0a:	bf00      	nop
 8002f0c:	24000194 	.word	0x24000194
 8002f10:	240001fc 	.word	0x240001fc
 8002f14:	24000264 	.word	0x24000264

08002f18 <global_stdio_init.part.0>:
 8002f18:	b510      	push	{r4, lr}
 8002f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f48 <global_stdio_init.part.0+0x30>)
 8002f1c:	4c0b      	ldr	r4, [pc, #44]	@ (8002f4c <global_stdio_init.part.0+0x34>)
 8002f1e:	4a0c      	ldr	r2, [pc, #48]	@ (8002f50 <global_stdio_init.part.0+0x38>)
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	4620      	mov	r0, r4
 8002f24:	2200      	movs	r2, #0
 8002f26:	2104      	movs	r1, #4
 8002f28:	f7ff ff94 	bl	8002e54 <std>
 8002f2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002f30:	2201      	movs	r2, #1
 8002f32:	2109      	movs	r1, #9
 8002f34:	f7ff ff8e 	bl	8002e54 <std>
 8002f38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f42:	2112      	movs	r1, #18
 8002f44:	f7ff bf86 	b.w	8002e54 <std>
 8002f48:	240002cc 	.word	0x240002cc
 8002f4c:	24000194 	.word	0x24000194
 8002f50:	08002ec1 	.word	0x08002ec1

08002f54 <__sfp_lock_acquire>:
 8002f54:	4801      	ldr	r0, [pc, #4]	@ (8002f5c <__sfp_lock_acquire+0x8>)
 8002f56:	f000 b8fc 	b.w	8003152 <__retarget_lock_acquire_recursive>
 8002f5a:	bf00      	nop
 8002f5c:	240002d5 	.word	0x240002d5

08002f60 <__sfp_lock_release>:
 8002f60:	4801      	ldr	r0, [pc, #4]	@ (8002f68 <__sfp_lock_release+0x8>)
 8002f62:	f000 b8f7 	b.w	8003154 <__retarget_lock_release_recursive>
 8002f66:	bf00      	nop
 8002f68:	240002d5 	.word	0x240002d5

08002f6c <__sinit>:
 8002f6c:	b510      	push	{r4, lr}
 8002f6e:	4604      	mov	r4, r0
 8002f70:	f7ff fff0 	bl	8002f54 <__sfp_lock_acquire>
 8002f74:	6a23      	ldr	r3, [r4, #32]
 8002f76:	b11b      	cbz	r3, 8002f80 <__sinit+0x14>
 8002f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f7c:	f7ff bff0 	b.w	8002f60 <__sfp_lock_release>
 8002f80:	4b04      	ldr	r3, [pc, #16]	@ (8002f94 <__sinit+0x28>)
 8002f82:	6223      	str	r3, [r4, #32]
 8002f84:	4b04      	ldr	r3, [pc, #16]	@ (8002f98 <__sinit+0x2c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1f5      	bne.n	8002f78 <__sinit+0xc>
 8002f8c:	f7ff ffc4 	bl	8002f18 <global_stdio_init.part.0>
 8002f90:	e7f2      	b.n	8002f78 <__sinit+0xc>
 8002f92:	bf00      	nop
 8002f94:	08002ed9 	.word	0x08002ed9
 8002f98:	240002cc 	.word	0x240002cc

08002f9c <_fwalk_sglue>:
 8002f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fa0:	4607      	mov	r7, r0
 8002fa2:	4688      	mov	r8, r1
 8002fa4:	4614      	mov	r4, r2
 8002fa6:	2600      	movs	r6, #0
 8002fa8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002fac:	f1b9 0901 	subs.w	r9, r9, #1
 8002fb0:	d505      	bpl.n	8002fbe <_fwalk_sglue+0x22>
 8002fb2:	6824      	ldr	r4, [r4, #0]
 8002fb4:	2c00      	cmp	r4, #0
 8002fb6:	d1f7      	bne.n	8002fa8 <_fwalk_sglue+0xc>
 8002fb8:	4630      	mov	r0, r6
 8002fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fbe:	89ab      	ldrh	r3, [r5, #12]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d907      	bls.n	8002fd4 <_fwalk_sglue+0x38>
 8002fc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	d003      	beq.n	8002fd4 <_fwalk_sglue+0x38>
 8002fcc:	4629      	mov	r1, r5
 8002fce:	4638      	mov	r0, r7
 8002fd0:	47c0      	blx	r8
 8002fd2:	4306      	orrs	r6, r0
 8002fd4:	3568      	adds	r5, #104	@ 0x68
 8002fd6:	e7e9      	b.n	8002fac <_fwalk_sglue+0x10>

08002fd8 <__sread>:
 8002fd8:	b510      	push	{r4, lr}
 8002fda:	460c      	mov	r4, r1
 8002fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fe0:	f000 f868 	bl	80030b4 <_read_r>
 8002fe4:	2800      	cmp	r0, #0
 8002fe6:	bfab      	itete	ge
 8002fe8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002fea:	89a3      	ldrhlt	r3, [r4, #12]
 8002fec:	181b      	addge	r3, r3, r0
 8002fee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002ff2:	bfac      	ite	ge
 8002ff4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002ff6:	81a3      	strhlt	r3, [r4, #12]
 8002ff8:	bd10      	pop	{r4, pc}

08002ffa <__swrite>:
 8002ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ffe:	461f      	mov	r7, r3
 8003000:	898b      	ldrh	r3, [r1, #12]
 8003002:	05db      	lsls	r3, r3, #23
 8003004:	4605      	mov	r5, r0
 8003006:	460c      	mov	r4, r1
 8003008:	4616      	mov	r6, r2
 800300a:	d505      	bpl.n	8003018 <__swrite+0x1e>
 800300c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003010:	2302      	movs	r3, #2
 8003012:	2200      	movs	r2, #0
 8003014:	f000 f83c 	bl	8003090 <_lseek_r>
 8003018:	89a3      	ldrh	r3, [r4, #12]
 800301a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800301e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003022:	81a3      	strh	r3, [r4, #12]
 8003024:	4632      	mov	r2, r6
 8003026:	463b      	mov	r3, r7
 8003028:	4628      	mov	r0, r5
 800302a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800302e:	f000 b853 	b.w	80030d8 <_write_r>

08003032 <__sseek>:
 8003032:	b510      	push	{r4, lr}
 8003034:	460c      	mov	r4, r1
 8003036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800303a:	f000 f829 	bl	8003090 <_lseek_r>
 800303e:	1c43      	adds	r3, r0, #1
 8003040:	89a3      	ldrh	r3, [r4, #12]
 8003042:	bf15      	itete	ne
 8003044:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003046:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800304a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800304e:	81a3      	strheq	r3, [r4, #12]
 8003050:	bf18      	it	ne
 8003052:	81a3      	strhne	r3, [r4, #12]
 8003054:	bd10      	pop	{r4, pc}

08003056 <__sclose>:
 8003056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800305a:	f000 b809 	b.w	8003070 <_close_r>

0800305e <memset>:
 800305e:	4402      	add	r2, r0
 8003060:	4603      	mov	r3, r0
 8003062:	4293      	cmp	r3, r2
 8003064:	d100      	bne.n	8003068 <memset+0xa>
 8003066:	4770      	bx	lr
 8003068:	f803 1b01 	strb.w	r1, [r3], #1
 800306c:	e7f9      	b.n	8003062 <memset+0x4>
	...

08003070 <_close_r>:
 8003070:	b538      	push	{r3, r4, r5, lr}
 8003072:	4d06      	ldr	r5, [pc, #24]	@ (800308c <_close_r+0x1c>)
 8003074:	2300      	movs	r3, #0
 8003076:	4604      	mov	r4, r0
 8003078:	4608      	mov	r0, r1
 800307a:	602b      	str	r3, [r5, #0]
 800307c:	f7ff fd52 	bl	8002b24 <_close>
 8003080:	1c43      	adds	r3, r0, #1
 8003082:	d102      	bne.n	800308a <_close_r+0x1a>
 8003084:	682b      	ldr	r3, [r5, #0]
 8003086:	b103      	cbz	r3, 800308a <_close_r+0x1a>
 8003088:	6023      	str	r3, [r4, #0]
 800308a:	bd38      	pop	{r3, r4, r5, pc}
 800308c:	240002d0 	.word	0x240002d0

08003090 <_lseek_r>:
 8003090:	b538      	push	{r3, r4, r5, lr}
 8003092:	4d07      	ldr	r5, [pc, #28]	@ (80030b0 <_lseek_r+0x20>)
 8003094:	4604      	mov	r4, r0
 8003096:	4608      	mov	r0, r1
 8003098:	4611      	mov	r1, r2
 800309a:	2200      	movs	r2, #0
 800309c:	602a      	str	r2, [r5, #0]
 800309e:	461a      	mov	r2, r3
 80030a0:	f7ff fd01 	bl	8002aa6 <_lseek>
 80030a4:	1c43      	adds	r3, r0, #1
 80030a6:	d102      	bne.n	80030ae <_lseek_r+0x1e>
 80030a8:	682b      	ldr	r3, [r5, #0]
 80030aa:	b103      	cbz	r3, 80030ae <_lseek_r+0x1e>
 80030ac:	6023      	str	r3, [r4, #0]
 80030ae:	bd38      	pop	{r3, r4, r5, pc}
 80030b0:	240002d0 	.word	0x240002d0

080030b4 <_read_r>:
 80030b4:	b538      	push	{r3, r4, r5, lr}
 80030b6:	4d07      	ldr	r5, [pc, #28]	@ (80030d4 <_read_r+0x20>)
 80030b8:	4604      	mov	r4, r0
 80030ba:	4608      	mov	r0, r1
 80030bc:	4611      	mov	r1, r2
 80030be:	2200      	movs	r2, #0
 80030c0:	602a      	str	r2, [r5, #0]
 80030c2:	461a      	mov	r2, r3
 80030c4:	f7ff fc99 	bl	80029fa <_read>
 80030c8:	1c43      	adds	r3, r0, #1
 80030ca:	d102      	bne.n	80030d2 <_read_r+0x1e>
 80030cc:	682b      	ldr	r3, [r5, #0]
 80030ce:	b103      	cbz	r3, 80030d2 <_read_r+0x1e>
 80030d0:	6023      	str	r3, [r4, #0]
 80030d2:	bd38      	pop	{r3, r4, r5, pc}
 80030d4:	240002d0 	.word	0x240002d0

080030d8 <_write_r>:
 80030d8:	b538      	push	{r3, r4, r5, lr}
 80030da:	4d07      	ldr	r5, [pc, #28]	@ (80030f8 <_write_r+0x20>)
 80030dc:	4604      	mov	r4, r0
 80030de:	4608      	mov	r0, r1
 80030e0:	4611      	mov	r1, r2
 80030e2:	2200      	movs	r2, #0
 80030e4:	602a      	str	r2, [r5, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	f7ff fcef 	bl	8002aca <_write>
 80030ec:	1c43      	adds	r3, r0, #1
 80030ee:	d102      	bne.n	80030f6 <_write_r+0x1e>
 80030f0:	682b      	ldr	r3, [r5, #0]
 80030f2:	b103      	cbz	r3, 80030f6 <_write_r+0x1e>
 80030f4:	6023      	str	r3, [r4, #0]
 80030f6:	bd38      	pop	{r3, r4, r5, pc}
 80030f8:	240002d0 	.word	0x240002d0

080030fc <__errno>:
 80030fc:	4b01      	ldr	r3, [pc, #4]	@ (8003104 <__errno+0x8>)
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	24000024 	.word	0x24000024

08003108 <__libc_init_array>:
 8003108:	b570      	push	{r4, r5, r6, lr}
 800310a:	4d0d      	ldr	r5, [pc, #52]	@ (8003140 <__libc_init_array+0x38>)
 800310c:	4c0d      	ldr	r4, [pc, #52]	@ (8003144 <__libc_init_array+0x3c>)
 800310e:	1b64      	subs	r4, r4, r5
 8003110:	10a4      	asrs	r4, r4, #2
 8003112:	2600      	movs	r6, #0
 8003114:	42a6      	cmp	r6, r4
 8003116:	d109      	bne.n	800312c <__libc_init_array+0x24>
 8003118:	4d0b      	ldr	r5, [pc, #44]	@ (8003148 <__libc_init_array+0x40>)
 800311a:	4c0c      	ldr	r4, [pc, #48]	@ (800314c <__libc_init_array+0x44>)
 800311c:	f000 f91e 	bl	800335c <_init>
 8003120:	1b64      	subs	r4, r4, r5
 8003122:	10a4      	asrs	r4, r4, #2
 8003124:	2600      	movs	r6, #0
 8003126:	42a6      	cmp	r6, r4
 8003128:	d105      	bne.n	8003136 <__libc_init_array+0x2e>
 800312a:	bd70      	pop	{r4, r5, r6, pc}
 800312c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003130:	4798      	blx	r3
 8003132:	3601      	adds	r6, #1
 8003134:	e7ee      	b.n	8003114 <__libc_init_array+0xc>
 8003136:	f855 3b04 	ldr.w	r3, [r5], #4
 800313a:	4798      	blx	r3
 800313c:	3601      	adds	r6, #1
 800313e:	e7f2      	b.n	8003126 <__libc_init_array+0x1e>
 8003140:	080033a8 	.word	0x080033a8
 8003144:	080033a8 	.word	0x080033a8
 8003148:	080033a8 	.word	0x080033a8
 800314c:	080033ac 	.word	0x080033ac

08003150 <__retarget_lock_init_recursive>:
 8003150:	4770      	bx	lr

08003152 <__retarget_lock_acquire_recursive>:
 8003152:	4770      	bx	lr

08003154 <__retarget_lock_release_recursive>:
 8003154:	4770      	bx	lr
	...

08003158 <_free_r>:
 8003158:	b538      	push	{r3, r4, r5, lr}
 800315a:	4605      	mov	r5, r0
 800315c:	2900      	cmp	r1, #0
 800315e:	d041      	beq.n	80031e4 <_free_r+0x8c>
 8003160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003164:	1f0c      	subs	r4, r1, #4
 8003166:	2b00      	cmp	r3, #0
 8003168:	bfb8      	it	lt
 800316a:	18e4      	addlt	r4, r4, r3
 800316c:	f000 f83e 	bl	80031ec <__malloc_lock>
 8003170:	4a1d      	ldr	r2, [pc, #116]	@ (80031e8 <_free_r+0x90>)
 8003172:	6813      	ldr	r3, [r2, #0]
 8003174:	b933      	cbnz	r3, 8003184 <_free_r+0x2c>
 8003176:	6063      	str	r3, [r4, #4]
 8003178:	6014      	str	r4, [r2, #0]
 800317a:	4628      	mov	r0, r5
 800317c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003180:	f000 b83a 	b.w	80031f8 <__malloc_unlock>
 8003184:	42a3      	cmp	r3, r4
 8003186:	d908      	bls.n	800319a <_free_r+0x42>
 8003188:	6820      	ldr	r0, [r4, #0]
 800318a:	1821      	adds	r1, r4, r0
 800318c:	428b      	cmp	r3, r1
 800318e:	bf01      	itttt	eq
 8003190:	6819      	ldreq	r1, [r3, #0]
 8003192:	685b      	ldreq	r3, [r3, #4]
 8003194:	1809      	addeq	r1, r1, r0
 8003196:	6021      	streq	r1, [r4, #0]
 8003198:	e7ed      	b.n	8003176 <_free_r+0x1e>
 800319a:	461a      	mov	r2, r3
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	b10b      	cbz	r3, 80031a4 <_free_r+0x4c>
 80031a0:	42a3      	cmp	r3, r4
 80031a2:	d9fa      	bls.n	800319a <_free_r+0x42>
 80031a4:	6811      	ldr	r1, [r2, #0]
 80031a6:	1850      	adds	r0, r2, r1
 80031a8:	42a0      	cmp	r0, r4
 80031aa:	d10b      	bne.n	80031c4 <_free_r+0x6c>
 80031ac:	6820      	ldr	r0, [r4, #0]
 80031ae:	4401      	add	r1, r0
 80031b0:	1850      	adds	r0, r2, r1
 80031b2:	4283      	cmp	r3, r0
 80031b4:	6011      	str	r1, [r2, #0]
 80031b6:	d1e0      	bne.n	800317a <_free_r+0x22>
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	6053      	str	r3, [r2, #4]
 80031be:	4408      	add	r0, r1
 80031c0:	6010      	str	r0, [r2, #0]
 80031c2:	e7da      	b.n	800317a <_free_r+0x22>
 80031c4:	d902      	bls.n	80031cc <_free_r+0x74>
 80031c6:	230c      	movs	r3, #12
 80031c8:	602b      	str	r3, [r5, #0]
 80031ca:	e7d6      	b.n	800317a <_free_r+0x22>
 80031cc:	6820      	ldr	r0, [r4, #0]
 80031ce:	1821      	adds	r1, r4, r0
 80031d0:	428b      	cmp	r3, r1
 80031d2:	bf04      	itt	eq
 80031d4:	6819      	ldreq	r1, [r3, #0]
 80031d6:	685b      	ldreq	r3, [r3, #4]
 80031d8:	6063      	str	r3, [r4, #4]
 80031da:	bf04      	itt	eq
 80031dc:	1809      	addeq	r1, r1, r0
 80031de:	6021      	streq	r1, [r4, #0]
 80031e0:	6054      	str	r4, [r2, #4]
 80031e2:	e7ca      	b.n	800317a <_free_r+0x22>
 80031e4:	bd38      	pop	{r3, r4, r5, pc}
 80031e6:	bf00      	nop
 80031e8:	240002d8 	.word	0x240002d8

080031ec <__malloc_lock>:
 80031ec:	4801      	ldr	r0, [pc, #4]	@ (80031f4 <__malloc_lock+0x8>)
 80031ee:	f7ff bfb0 	b.w	8003152 <__retarget_lock_acquire_recursive>
 80031f2:	bf00      	nop
 80031f4:	240002d4 	.word	0x240002d4

080031f8 <__malloc_unlock>:
 80031f8:	4801      	ldr	r0, [pc, #4]	@ (8003200 <__malloc_unlock+0x8>)
 80031fa:	f7ff bfab 	b.w	8003154 <__retarget_lock_release_recursive>
 80031fe:	bf00      	nop
 8003200:	240002d4 	.word	0x240002d4

08003204 <__sflush_r>:
 8003204:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800320c:	0716      	lsls	r6, r2, #28
 800320e:	4605      	mov	r5, r0
 8003210:	460c      	mov	r4, r1
 8003212:	d454      	bmi.n	80032be <__sflush_r+0xba>
 8003214:	684b      	ldr	r3, [r1, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	dc02      	bgt.n	8003220 <__sflush_r+0x1c>
 800321a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800321c:	2b00      	cmp	r3, #0
 800321e:	dd48      	ble.n	80032b2 <__sflush_r+0xae>
 8003220:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003222:	2e00      	cmp	r6, #0
 8003224:	d045      	beq.n	80032b2 <__sflush_r+0xae>
 8003226:	2300      	movs	r3, #0
 8003228:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800322c:	682f      	ldr	r7, [r5, #0]
 800322e:	6a21      	ldr	r1, [r4, #32]
 8003230:	602b      	str	r3, [r5, #0]
 8003232:	d030      	beq.n	8003296 <__sflush_r+0x92>
 8003234:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003236:	89a3      	ldrh	r3, [r4, #12]
 8003238:	0759      	lsls	r1, r3, #29
 800323a:	d505      	bpl.n	8003248 <__sflush_r+0x44>
 800323c:	6863      	ldr	r3, [r4, #4]
 800323e:	1ad2      	subs	r2, r2, r3
 8003240:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003242:	b10b      	cbz	r3, 8003248 <__sflush_r+0x44>
 8003244:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003246:	1ad2      	subs	r2, r2, r3
 8003248:	2300      	movs	r3, #0
 800324a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800324c:	6a21      	ldr	r1, [r4, #32]
 800324e:	4628      	mov	r0, r5
 8003250:	47b0      	blx	r6
 8003252:	1c43      	adds	r3, r0, #1
 8003254:	89a3      	ldrh	r3, [r4, #12]
 8003256:	d106      	bne.n	8003266 <__sflush_r+0x62>
 8003258:	6829      	ldr	r1, [r5, #0]
 800325a:	291d      	cmp	r1, #29
 800325c:	d82b      	bhi.n	80032b6 <__sflush_r+0xb2>
 800325e:	4a2a      	ldr	r2, [pc, #168]	@ (8003308 <__sflush_r+0x104>)
 8003260:	410a      	asrs	r2, r1
 8003262:	07d6      	lsls	r6, r2, #31
 8003264:	d427      	bmi.n	80032b6 <__sflush_r+0xb2>
 8003266:	2200      	movs	r2, #0
 8003268:	6062      	str	r2, [r4, #4]
 800326a:	04d9      	lsls	r1, r3, #19
 800326c:	6922      	ldr	r2, [r4, #16]
 800326e:	6022      	str	r2, [r4, #0]
 8003270:	d504      	bpl.n	800327c <__sflush_r+0x78>
 8003272:	1c42      	adds	r2, r0, #1
 8003274:	d101      	bne.n	800327a <__sflush_r+0x76>
 8003276:	682b      	ldr	r3, [r5, #0]
 8003278:	b903      	cbnz	r3, 800327c <__sflush_r+0x78>
 800327a:	6560      	str	r0, [r4, #84]	@ 0x54
 800327c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800327e:	602f      	str	r7, [r5, #0]
 8003280:	b1b9      	cbz	r1, 80032b2 <__sflush_r+0xae>
 8003282:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003286:	4299      	cmp	r1, r3
 8003288:	d002      	beq.n	8003290 <__sflush_r+0x8c>
 800328a:	4628      	mov	r0, r5
 800328c:	f7ff ff64 	bl	8003158 <_free_r>
 8003290:	2300      	movs	r3, #0
 8003292:	6363      	str	r3, [r4, #52]	@ 0x34
 8003294:	e00d      	b.n	80032b2 <__sflush_r+0xae>
 8003296:	2301      	movs	r3, #1
 8003298:	4628      	mov	r0, r5
 800329a:	47b0      	blx	r6
 800329c:	4602      	mov	r2, r0
 800329e:	1c50      	adds	r0, r2, #1
 80032a0:	d1c9      	bne.n	8003236 <__sflush_r+0x32>
 80032a2:	682b      	ldr	r3, [r5, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0c6      	beq.n	8003236 <__sflush_r+0x32>
 80032a8:	2b1d      	cmp	r3, #29
 80032aa:	d001      	beq.n	80032b0 <__sflush_r+0xac>
 80032ac:	2b16      	cmp	r3, #22
 80032ae:	d11e      	bne.n	80032ee <__sflush_r+0xea>
 80032b0:	602f      	str	r7, [r5, #0]
 80032b2:	2000      	movs	r0, #0
 80032b4:	e022      	b.n	80032fc <__sflush_r+0xf8>
 80032b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032ba:	b21b      	sxth	r3, r3
 80032bc:	e01b      	b.n	80032f6 <__sflush_r+0xf2>
 80032be:	690f      	ldr	r7, [r1, #16]
 80032c0:	2f00      	cmp	r7, #0
 80032c2:	d0f6      	beq.n	80032b2 <__sflush_r+0xae>
 80032c4:	0793      	lsls	r3, r2, #30
 80032c6:	680e      	ldr	r6, [r1, #0]
 80032c8:	bf08      	it	eq
 80032ca:	694b      	ldreq	r3, [r1, #20]
 80032cc:	600f      	str	r7, [r1, #0]
 80032ce:	bf18      	it	ne
 80032d0:	2300      	movne	r3, #0
 80032d2:	eba6 0807 	sub.w	r8, r6, r7
 80032d6:	608b      	str	r3, [r1, #8]
 80032d8:	f1b8 0f00 	cmp.w	r8, #0
 80032dc:	dde9      	ble.n	80032b2 <__sflush_r+0xae>
 80032de:	6a21      	ldr	r1, [r4, #32]
 80032e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80032e2:	4643      	mov	r3, r8
 80032e4:	463a      	mov	r2, r7
 80032e6:	4628      	mov	r0, r5
 80032e8:	47b0      	blx	r6
 80032ea:	2800      	cmp	r0, #0
 80032ec:	dc08      	bgt.n	8003300 <__sflush_r+0xfc>
 80032ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032f6:	81a3      	strh	r3, [r4, #12]
 80032f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003300:	4407      	add	r7, r0
 8003302:	eba8 0800 	sub.w	r8, r8, r0
 8003306:	e7e7      	b.n	80032d8 <__sflush_r+0xd4>
 8003308:	dfbffffe 	.word	0xdfbffffe

0800330c <_fflush_r>:
 800330c:	b538      	push	{r3, r4, r5, lr}
 800330e:	690b      	ldr	r3, [r1, #16]
 8003310:	4605      	mov	r5, r0
 8003312:	460c      	mov	r4, r1
 8003314:	b913      	cbnz	r3, 800331c <_fflush_r+0x10>
 8003316:	2500      	movs	r5, #0
 8003318:	4628      	mov	r0, r5
 800331a:	bd38      	pop	{r3, r4, r5, pc}
 800331c:	b118      	cbz	r0, 8003326 <_fflush_r+0x1a>
 800331e:	6a03      	ldr	r3, [r0, #32]
 8003320:	b90b      	cbnz	r3, 8003326 <_fflush_r+0x1a>
 8003322:	f7ff fe23 	bl	8002f6c <__sinit>
 8003326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0f3      	beq.n	8003316 <_fflush_r+0xa>
 800332e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003330:	07d0      	lsls	r0, r2, #31
 8003332:	d404      	bmi.n	800333e <_fflush_r+0x32>
 8003334:	0599      	lsls	r1, r3, #22
 8003336:	d402      	bmi.n	800333e <_fflush_r+0x32>
 8003338:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800333a:	f7ff ff0a 	bl	8003152 <__retarget_lock_acquire_recursive>
 800333e:	4628      	mov	r0, r5
 8003340:	4621      	mov	r1, r4
 8003342:	f7ff ff5f 	bl	8003204 <__sflush_r>
 8003346:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003348:	07da      	lsls	r2, r3, #31
 800334a:	4605      	mov	r5, r0
 800334c:	d4e4      	bmi.n	8003318 <_fflush_r+0xc>
 800334e:	89a3      	ldrh	r3, [r4, #12]
 8003350:	059b      	lsls	r3, r3, #22
 8003352:	d4e1      	bmi.n	8003318 <_fflush_r+0xc>
 8003354:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003356:	f7ff fefd 	bl	8003154 <__retarget_lock_release_recursive>
 800335a:	e7dd      	b.n	8003318 <_fflush_r+0xc>

0800335c <_init>:
 800335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335e:	bf00      	nop
 8003360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003362:	bc08      	pop	{r3}
 8003364:	469e      	mov	lr, r3
 8003366:	4770      	bx	lr

08003368 <_fini>:
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	bf00      	nop
 800336c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336e:	bc08      	pop	{r3}
 8003370:	469e      	mov	lr, r3
 8003372:	4770      	bx	lr
